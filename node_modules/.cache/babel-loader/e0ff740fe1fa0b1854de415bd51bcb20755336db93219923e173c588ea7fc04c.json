{"ast":null,"code":"import _toConsumableArray from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _typeof from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\";\nimport OptionList from './OptionList';\nimport { formatStrategyValues, SHOW_CHILD } from './utils/strategyUtil';\nimport { useProvideSelectContext } from './TreeSelectContext';\nimport { useProvideLegacySelectContext } from './LegacyContext';\nimport useTreeData from './hooks/useTreeData';\nimport { toArray, fillFieldNames, isNil } from './utils/valueUtil';\nimport useCache from './hooks/useCache';\nimport useDataEntities from './hooks/useDataEntities';\nimport { fillAdditionalInfo, fillLegacyProps } from './utils/legacyUtil';\nimport useCheckedKeys from './hooks/useCheckedKeys';\nimport useFilterTreeData from './hooks/useFilterTreeData';\nimport warningProps from './utils/warningPropsUtil';\nimport { baseSelectPropsWithoutPrivate } from '../vc-select/BaseSelect';\nimport { computed, defineComponent, ref, shallowRef, toRaw, toRef, toRefs, watchEffect } from 'vue';\nimport omit from '../_util/omit';\nimport PropTypes from '../_util/vue-types';\nimport { BaseSelect } from '../vc-select';\nimport { initDefaultProps } from '../_util/props-util';\nimport useId from '../vc-select/hooks/useId';\nimport useMergedState from '../_util/hooks/useMergedState';\nimport { conductCheck } from '../vc-tree/utils/conductUtil';\nimport { warning } from '../vc-util/warning';\nimport { toReactive } from '../_util/toReactive';\nimport useMaxLevel from '../vc-tree/useMaxLevel';\nexport function treeSelectProps() {\n  return _extends(_extends({}, omit(baseSelectPropsWithoutPrivate(), ['mode'])), {\n    prefixCls: String,\n    id: String,\n    value: {\n      type: [String, Number, Object, Array]\n    },\n    defaultValue: {\n      type: [String, Number, Object, Array]\n    },\n    onChange: {\n      type: Function\n    },\n    searchValue: String,\n    /** @deprecated Use `searchValue` instead */\n    inputValue: String,\n    onSearch: {\n      type: Function\n    },\n    autoClearSearchValue: {\n      type: Boolean,\n      \"default\": undefined\n    },\n    filterTreeNode: {\n      type: [Boolean, Function],\n      \"default\": undefined\n    },\n    treeNodeFilterProp: String,\n    // >>> Select\n    onSelect: Function,\n    onDeselect: Function,\n    showCheckedStrategy: {\n      type: String\n    },\n    treeNodeLabelProp: String,\n    fieldNames: {\n      type: Object\n    },\n    // >>> Mode\n    multiple: {\n      type: Boolean,\n      \"default\": undefined\n    },\n    treeCheckable: {\n      type: Boolean,\n      \"default\": undefined\n    },\n    treeCheckStrictly: {\n      type: Boolean,\n      \"default\": undefined\n    },\n    labelInValue: {\n      type: Boolean,\n      \"default\": undefined\n    },\n    // >>> Data\n    treeData: {\n      type: Array\n    },\n    treeDataSimpleMode: {\n      type: [Boolean, Object],\n      \"default\": undefined\n    },\n    loadData: {\n      type: Function\n    },\n    treeLoadedKeys: {\n      type: Array\n    },\n    onTreeLoad: {\n      type: Function\n    },\n    // >>> Expanded\n    treeDefaultExpandAll: {\n      type: Boolean,\n      \"default\": undefined\n    },\n    treeExpandedKeys: {\n      type: Array\n    },\n    treeDefaultExpandedKeys: {\n      type: Array\n    },\n    onTreeExpand: {\n      type: Function\n    },\n    // >>> Options\n    virtual: {\n      type: Boolean,\n      \"default\": undefined\n    },\n    listHeight: Number,\n    listItemHeight: Number,\n    onDropdownVisibleChange: {\n      type: Function\n    },\n    // >>> Tree\n    treeLine: {\n      type: [Boolean, Object],\n      \"default\": undefined\n    },\n    treeIcon: PropTypes.any,\n    showTreeIcon: {\n      type: Boolean,\n      \"default\": undefined\n    },\n    switcherIcon: PropTypes.any,\n    treeMotion: PropTypes.any,\n    children: Array,\n    treeExpandAction: String,\n    showArrow: {\n      type: Boolean,\n      \"default\": undefined\n    },\n    showSearch: {\n      type: Boolean,\n      \"default\": undefined\n    },\n    open: {\n      type: Boolean,\n      \"default\": undefined\n    },\n    defaultOpen: {\n      type: Boolean,\n      \"default\": undefined\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": undefined\n    },\n    placeholder: PropTypes.any,\n    maxTagPlaceholder: {\n      type: Function\n    },\n    dropdownPopupAlign: PropTypes.any,\n    customSlots: Object\n  });\n}\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\nexport default defineComponent({\n  compatConfig: {\n    MODE: 3\n  },\n  name: 'TreeSelect',\n  inheritAttrs: false,\n  props: initDefaultProps(treeSelectProps(), {\n    treeNodeFilterProp: 'value',\n    autoClearSearchValue: true,\n    showCheckedStrategy: SHOW_CHILD,\n    listHeight: 200,\n    listItemHeight: 20,\n    prefixCls: 'vc-tree-select'\n  }),\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n      expose = _ref.expose,\n      slots = _ref.slots;\n    var mergedId = useId(toRef(props, 'id'));\n    var treeConduction = computed(function () {\n      return props.treeCheckable && !props.treeCheckStrictly;\n    });\n    var mergedCheckable = computed(function () {\n      return props.treeCheckable || props.treeCheckStrictly;\n    });\n    var mergedLabelInValue = computed(function () {\n      return props.treeCheckStrictly || props.labelInValue;\n    });\n    var mergedMultiple = computed(function () {\n      return mergedCheckable.value || props.multiple;\n    });\n    // ========================== Warning ===========================\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(function () {\n        warningProps(props);\n      });\n    }\n    // ========================= FieldNames =========================\n    var mergedFieldNames = computed(function () {\n      return fillFieldNames(props.fieldNames);\n    });\n    // =========================== Search ===========================\n    var _useMergedState = useMergedState('', {\n        value: computed(function () {\n          return props.searchValue !== undefined ? props.searchValue : props.inputValue;\n        }),\n        postState: function postState(search) {\n          return search || '';\n        }\n      }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSearchValue = _useMergedState2[0],\n      setSearchValue = _useMergedState2[1];\n    var onInternalSearch = function onInternalSearch(searchText) {\n      var _a;\n      setSearchValue(searchText);\n      (_a = props.onSearch) === null || _a === void 0 ? void 0 : _a.call(props, searchText);\n    };\n    // ============================ Data ============================\n    // `useTreeData` only do convert of `children` or `simpleMode`.\n    // Else will return origin `treeData` for perf consideration.\n    // Do not do anything to loop the data.\n    var mergedTreeData = useTreeData(toRef(props, 'treeData'), toRef(props, 'children'), toRef(props, 'treeDataSimpleMode'));\n    var _useDataEntities = useDataEntities(mergedTreeData, mergedFieldNames),\n      keyEntities = _useDataEntities.keyEntities,\n      valueEntities = _useDataEntities.valueEntities;\n    /** Get `missingRawValues` which not exist in the tree yet */\n    var splitRawValues = function splitRawValues(newRawValues) {\n      var missingRawValues = [];\n      var existRawValues = [];\n      // Keep missing value in the cache\n      newRawValues.forEach(function (val) {\n        if (valueEntities.value.has(val)) {\n          existRawValues.push(val);\n        } else {\n          missingRawValues.push(val);\n        }\n      });\n      return {\n        missingRawValues: missingRawValues,\n        existRawValues: existRawValues\n      };\n    };\n    // Filtered Tree\n    var filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n      fieldNames: mergedFieldNames,\n      treeNodeFilterProp: toRef(props, 'treeNodeFilterProp'),\n      filterTreeNode: toRef(props, 'filterTreeNode')\n    });\n    // =========================== Label ============================\n    var getLabel = function getLabel(item) {\n      if (item) {\n        if (props.treeNodeLabelProp) {\n          return item[props.treeNodeLabelProp];\n        }\n        // Loop from fieldNames\n        var titleList = mergedFieldNames.value._title;\n        for (var i = 0; i < titleList.length; i += 1) {\n          var title = item[titleList[i]];\n          if (title !== undefined) {\n            return title;\n          }\n        }\n      }\n    };\n    // ========================= Wrap Value =========================\n    var toLabeledValues = function toLabeledValues(draftValues) {\n      var values = toArray(draftValues);\n      return values.map(function (val) {\n        if (isRawValue(val)) {\n          return {\n            value: val\n          };\n        }\n        return val;\n      });\n    };\n    var convert2LabelValues = function convert2LabelValues(draftValues) {\n      var values = toLabeledValues(draftValues);\n      return values.map(function (item) {\n        var rawLabel = item.label;\n        var rawValue = item.value,\n          rawHalfChecked = item.halfChecked;\n        var rawDisabled;\n        var entity = valueEntities.value.get(rawValue);\n        // Fill missing label & status\n        if (entity) {\n          rawLabel = rawLabel !== null && rawLabel !== void 0 ? rawLabel : getLabel(entity.node);\n          rawDisabled = entity.node.disabled;\n        }\n        return {\n          label: rawLabel,\n          value: rawValue,\n          halfChecked: rawHalfChecked,\n          disabled: rawDisabled\n        };\n      });\n    };\n    // =========================== Values ===========================\n    var _useMergedState3 = useMergedState(props.defaultValue, {\n        value: toRef(props, 'value')\n      }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      internalValue = _useMergedState4[0],\n      setInternalValue = _useMergedState4[1];\n    var rawMixedLabeledValues = computed(function () {\n      return toLabeledValues(internalValue.value);\n    });\n    // Split value into full check and half check\n    var rawLabeledValues = shallowRef([]);\n    var rawHalfLabeledValues = shallowRef([]);\n    watchEffect(function () {\n      var fullCheckValues = [];\n      var halfCheckValues = [];\n      rawMixedLabeledValues.value.forEach(function (item) {\n        if (item.halfChecked) {\n          halfCheckValues.push(item);\n        } else {\n          fullCheckValues.push(item);\n        }\n      });\n      rawLabeledValues.value = fullCheckValues;\n      rawHalfLabeledValues.value = halfCheckValues;\n    });\n    // const [mergedValues] = useCache(rawLabeledValues);\n    var rawValues = computed(function () {\n      return rawLabeledValues.value.map(function (item) {\n        return item.value;\n      });\n    });\n    var _useMaxLevel = useMaxLevel(keyEntities),\n      maxLevel = _useMaxLevel.maxLevel,\n      levelEntities = _useMaxLevel.levelEntities;\n    // Convert value to key. Will fill missed keys for conduct check.\n    var _useCheckedKeys = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities, maxLevel, levelEntities),\n      _useCheckedKeys2 = _slicedToArray(_useCheckedKeys, 2),\n      rawCheckedValues = _useCheckedKeys2[0],\n      rawHalfCheckedValues = _useCheckedKeys2[1];\n    // Convert rawCheckedKeys to check strategy related values\n    var displayValues = computed(function () {\n      // Collect keys which need to show\n      var displayKeys = formatStrategyValues(rawCheckedValues.value, props.showCheckedStrategy, keyEntities.value, mergedFieldNames.value);\n      // Convert to value and filled with label\n      var values = displayKeys.map(function (key) {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = keyEntities.value[key]) === null || _a === void 0 ? void 0 : _a.node) === null || _b === void 0 ? void 0 : _b[mergedFieldNames.value.value]) !== null && _c !== void 0 ? _c : key;\n      });\n      // Back fill with origin label\n      var labeledValues = values.map(function (val) {\n        var targetItem = rawLabeledValues.value.find(function (item) {\n          return item.value === val;\n        });\n        return {\n          value: val,\n          label: targetItem === null || targetItem === void 0 ? void 0 : targetItem.label\n        };\n      });\n      var rawDisplayValues = convert2LabelValues(labeledValues);\n      var firstVal = rawDisplayValues[0];\n      if (!mergedMultiple.value && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n        return [];\n      }\n      return rawDisplayValues.map(function (item) {\n        var _a;\n        return _extends(_extends({}, item), {\n          label: (_a = item.label) !== null && _a !== void 0 ? _a : item.value\n        });\n      });\n    });\n    var _useCache = useCache(displayValues),\n      _useCache2 = _slicedToArray(_useCache, 1),\n      cachedDisplayValues = _useCache2[0];\n    // =========================== Change ===========================\n    var triggerChange = function triggerChange(newRawValues, extra, source) {\n      var labeledValues = convert2LabelValues(newRawValues);\n      setInternalValue(labeledValues);\n      // Clean up if needed\n      if (props.autoClearSearchValue) {\n        setSearchValue('');\n      }\n      // Generate rest parameters is costly, so only do it when necessary\n      if (props.onChange) {\n        var eventValues = newRawValues;\n        if (treeConduction.value) {\n          var formattedKeyList = formatStrategyValues(newRawValues, props.showCheckedStrategy, keyEntities.value, mergedFieldNames.value);\n          eventValues = formattedKeyList.map(function (key) {\n            var entity = valueEntities.value.get(key);\n            return entity ? entity.node[mergedFieldNames.value.value] : key;\n          });\n        }\n        var _ref3 = extra || {\n            triggerValue: undefined,\n            selected: undefined\n          },\n          triggerValue = _ref3.triggerValue,\n          selected = _ref3.selected;\n        var returnRawValues = eventValues;\n        // We need fill half check back\n        if (props.treeCheckStrictly) {\n          var halfValues = rawHalfLabeledValues.value.filter(function (item) {\n            return !eventValues.includes(item.value);\n          });\n          returnRawValues = [].concat(_toConsumableArray(returnRawValues), _toConsumableArray(halfValues));\n        }\n        var returnLabeledValues = convert2LabelValues(returnRawValues);\n        var additionalInfo = {\n          // [Legacy] Always return as array contains label & value\n          preValue: rawLabeledValues.value,\n          triggerValue: triggerValue\n        };\n        // [Legacy] Fill legacy data if user query.\n        // This is expansive that we only fill when user query\n        // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n        var showPosition = true;\n        if (props.treeCheckStrictly || source === 'selection' && !selected) {\n          showPosition = false;\n        }\n        fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData.value, showPosition, mergedFieldNames.value);\n        if (mergedCheckable.value) {\n          additionalInfo.checked = selected;\n        } else {\n          additionalInfo.selected = selected;\n        }\n        var returnValues = mergedLabelInValue.value ? returnLabeledValues : returnLabeledValues.map(function (item) {\n          return item.value;\n        });\n        props.onChange(mergedMultiple.value ? returnValues : returnValues[0], mergedLabelInValue.value ? null : returnLabeledValues.map(function (item) {\n          return item.label;\n        }), additionalInfo);\n      }\n    };\n    // ========================== Options ===========================\n    /** Trigger by option list */\n    var onOptionSelect = function onOptionSelect(selectedKey, _ref2) {\n      var selected = _ref2.selected,\n        source = _ref2.source;\n      var _a, _b, _c;\n      var keyEntitiesValue = toRaw(keyEntities.value);\n      var valueEntitiesValue = toRaw(valueEntities.value);\n      var entity = keyEntitiesValue[selectedKey];\n      var node = entity === null || entity === void 0 ? void 0 : entity.node;\n      var selectedValue = (_a = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value.value]) !== null && _a !== void 0 ? _a : selectedKey;\n      // Never be falsy but keep it safe\n      if (!mergedMultiple.value) {\n        // Single mode always set value\n        triggerChange([selectedValue], {\n          selected: true,\n          triggerValue: selectedValue\n        }, 'option');\n      } else {\n        var newRawValues = selected ? [].concat(_toConsumableArray(rawValues.value), [selectedValue]) : rawCheckedValues.value.filter(function (v) {\n          return v !== selectedValue;\n        });\n        // Add keys if tree conduction\n        if (treeConduction.value) {\n          // Should keep missing values\n          var _splitRawValues = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues.missingRawValues,\n            existRawValues = _splitRawValues.existRawValues;\n          var keyList = existRawValues.map(function (val) {\n            return valueEntitiesValue.get(val).key;\n          });\n          // Conduction by selected or not\n          var checkedKeys;\n          if (selected) {\n            var _conductCheck = conductCheck(keyList, true, keyEntitiesValue, maxLevel.value, levelEntities.value);\n            checkedKeys = _conductCheck.checkedKeys;\n          } else {\n            var _conductCheck2 = conductCheck(keyList, {\n              checked: false,\n              halfCheckedKeys: rawHalfCheckedValues.value\n            }, keyEntitiesValue, maxLevel.value, levelEntities.value);\n            checkedKeys = _conductCheck2.checkedKeys;\n          }\n          // Fill back of keys\n          newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n            return keyEntitiesValue[key].node[mergedFieldNames.value.value];\n          })));\n        }\n        triggerChange(newRawValues, {\n          selected: selected,\n          triggerValue: selectedValue\n        }, source || 'option');\n      }\n      // Trigger select event\n      if (selected || !mergedMultiple.value) {\n        (_b = props.onSelect) === null || _b === void 0 ? void 0 : _b.call(props, selectedValue, fillLegacyProps(node));\n      } else {\n        (_c = props.onDeselect) === null || _c === void 0 ? void 0 : _c.call(props, selectedValue, fillLegacyProps(node));\n      }\n    };\n    // ========================== Dropdown ==========================\n    var onInternalDropdownVisibleChange = function onInternalDropdownVisibleChange(open) {\n      if (props.onDropdownVisibleChange) {\n        var legacyParam = {};\n        Object.defineProperty(legacyParam, 'documentClickClose', {\n          get: function get() {\n            warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n            return false;\n          }\n        });\n        props.onDropdownVisibleChange(open, legacyParam);\n      }\n    };\n    // ====================== Display Change ========================\n    var onDisplayValuesChange = function onDisplayValuesChange(newValues, info) {\n      var newRawValues = newValues.map(function (item) {\n        return item.value;\n      });\n      if (info.type === 'clear') {\n        triggerChange(newRawValues, {}, 'selection');\n        return;\n      }\n      // TreeSelect only have multiple mode which means display change only has remove\n      if (info.values.length) {\n        onOptionSelect(info.values[0].value, {\n          selected: false,\n          source: 'selection'\n        });\n      }\n    };\n    var _toRefs = toRefs(props),\n      treeNodeFilterProp = _toRefs.treeNodeFilterProp,\n      loadData = _toRefs.loadData,\n      treeLoadedKeys = _toRefs.treeLoadedKeys,\n      onTreeLoad = _toRefs.onTreeLoad,\n      treeDefaultExpandAll = _toRefs.treeDefaultExpandAll,\n      treeExpandedKeys = _toRefs.treeExpandedKeys,\n      treeDefaultExpandedKeys = _toRefs.treeDefaultExpandedKeys,\n      onTreeExpand = _toRefs.onTreeExpand,\n      virtual = _toRefs.virtual,\n      listHeight = _toRefs.listHeight,\n      listItemHeight = _toRefs.listItemHeight,\n      treeLine = _toRefs.treeLine,\n      treeIcon = _toRefs.treeIcon,\n      showTreeIcon = _toRefs.showTreeIcon,\n      switcherIcon = _toRefs.switcherIcon,\n      treeMotion = _toRefs.treeMotion,\n      customSlots = _toRefs.customSlots,\n      dropdownMatchSelectWidth = _toRefs.dropdownMatchSelectWidth,\n      treeExpandAction = _toRefs.treeExpandAction;\n    useProvideLegacySelectContext(toReactive({\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp,\n      keyEntities: keyEntities,\n      customSlots: customSlots\n    }));\n    useProvideSelectContext(toReactive({\n      virtual: virtual,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect,\n      dropdownMatchSelectWidth: dropdownMatchSelectWidth,\n      treeExpandAction: treeExpandAction\n    }));\n    var selectRef = ref();\n    expose({\n      focus: function focus() {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      blur: function blur() {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.blur();\n      },\n      scrollTo: function scrollTo(arg) {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo(arg);\n      }\n    });\n    return function () {\n      var _a;\n      var restProps = omit(props, ['id', 'prefixCls', 'customSlots',\n      // Value\n      'value', 'defaultValue', 'onChange', 'onSelect', 'onDeselect',\n      // Search\n      'searchValue', 'inputValue', 'onSearch', 'autoClearSearchValue', 'filterTreeNode', 'treeNodeFilterProp',\n      // Selector\n      'showCheckedStrategy', 'treeNodeLabelProp',\n      //  Mode\n      'multiple', 'treeCheckable', 'treeCheckStrictly', 'labelInValue',\n      // FieldNames\n      'fieldNames',\n      // Data\n      'treeDataSimpleMode', 'treeData', 'children', 'loadData', 'treeLoadedKeys', 'onTreeLoad',\n      // Expanded\n      'treeDefaultExpandAll', 'treeExpandedKeys', 'treeDefaultExpandedKeys', 'onTreeExpand',\n      // Options\n      'virtual', 'listHeight', 'listItemHeight', 'onDropdownVisibleChange',\n      // Tree\n      'treeLine', 'treeIcon', 'showTreeIcon', 'switcherIcon', 'treeMotion']);\n      return _createVNode(BaseSelect, _objectSpread(_objectSpread(_objectSpread({\n        \"ref\": selectRef\n      }, attrs), restProps), {}, {\n        \"id\": mergedId,\n        \"prefixCls\": props.prefixCls,\n        \"mode\": mergedMultiple.value ? 'multiple' : undefined,\n        \"displayValues\": cachedDisplayValues.value,\n        \"onDisplayValuesChange\": onDisplayValuesChange,\n        \"searchValue\": mergedSearchValue.value,\n        \"onSearch\": onInternalSearch,\n        \"OptionList\": OptionList,\n        \"emptyOptions\": !mergedTreeData.value.length,\n        \"onDropdownVisibleChange\": onInternalDropdownVisibleChange,\n        \"tagRender\": props.tagRender || slots.tagRender,\n        \"dropdownMatchSelectWidth\": (_a = props.dropdownMatchSelectWidth) !== null && _a !== void 0 ? _a : true\n      }), slots);\n    };\n  }\n});","map":{"version":3,"names":["_objectSpread","_extends","createVNode","_createVNode","resolveDirective","_resolveDirective","OptionList","formatStrategyValues","SHOW_CHILD","useProvideSelectContext","useProvideLegacySelectContext","useTreeData","toArray","fillFieldNames","isNil","useCache","useDataEntities","fillAdditionalInfo","fillLegacyProps","useCheckedKeys","useFilterTreeData","warningProps","baseSelectPropsWithoutPrivate","computed","defineComponent","ref","shallowRef","toRaw","toRef","toRefs","watchEffect","omit","PropTypes","BaseSelect","initDefaultProps","useId","useMergedState","conductCheck","warning","toReactive","useMaxLevel","treeSelectProps","prefixCls","String","id","value","type","Number","Object","Array","defaultValue","onChange","Function","searchValue","inputValue","onSearch","autoClearSearchValue","Boolean","undefined","filterTreeNode","treeNodeFilterProp","onSelect","onDeselect","showCheckedStrategy","treeNodeLabelProp","fieldNames","multiple","treeCheckable","treeCheckStrictly","labelInValue","treeData","treeDataSimpleMode","loadData","treeLoadedKeys","onTreeLoad","treeDefaultExpandAll","treeExpandedKeys","treeDefaultExpandedKeys","onTreeExpand","virtual","listHeight","listItemHeight","onDropdownVisibleChange","treeLine","treeIcon","any","showTreeIcon","switcherIcon","treeMotion","children","treeExpandAction","showArrow","showSearch","open","defaultOpen","disabled","placeholder","maxTagPlaceholder","dropdownPopupAlign","customSlots","isRawValue","_typeof","compatConfig","MODE","name","inheritAttrs","props","setup","_ref","attrs","expose","slots","mergedId","treeConduction","mergedCheckable","mergedLabelInValue","mergedMultiple","process","env","NODE_ENV","mergedFieldNames","_useMergedState","postState","search","_useMergedState2","_slicedToArray","mergedSearchValue","setSearchValue","onInternalSearch","searchText","_a","call","mergedTreeData","_useDataEntities","keyEntities","valueEntities","splitRawValues","newRawValues","missingRawValues","existRawValues","forEach","val","has","push","filteredTreeData","getLabel","item","titleList","_title","i","length","title","toLabeledValues","draftValues","values","map","convert2LabelValues","rawLabel","label","rawValue","rawHalfChecked","halfChecked","rawDisabled","entity","get","node","_useMergedState3","_useMergedState4","internalValue","setInternalValue","rawMixedLabeledValues","rawLabeledValues","rawHalfLabeledValues","fullCheckValues","halfCheckValues","rawValues","_useMaxLevel","maxLevel","levelEntities","_useCheckedKeys","_useCheckedKeys2","rawCheckedValues","rawHalfCheckedValues","displayValues","displayKeys","key","_b","_c","labeledValues","targetItem","find","rawDisplayValues","firstVal","_useCache","_useCache2","cachedDisplayValues","triggerChange","extra","source","eventValues","formattedKeyList","_ref3","triggerValue","selected","returnRawValues","halfValues","filter","includes","concat","_toConsumableArray","returnLabeledValues","additionalInfo","preValue","showPosition","checked","returnValues","onOptionSelect","selectedKey","_ref2","keyEntitiesValue","valueEntitiesValue","selectedValue","v","_splitRawValues","keyList","checkedKeys","_conductCheck","_conductCheck2","halfCheckedKeys","onInternalDropdownVisibleChange","legacyParam","defineProperty","onDisplayValuesChange","newValues","info","_toRefs","dropdownMatchSelectWidth","checkable","selectRef","focus","blur","scrollTo","arg","restProps","tagRender"],"sources":["C:/Users/zhouy/WebstormProjects/lingo/node_modules/ant-design-vue/es/vc-tree-select/TreeSelect.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\";\nimport OptionList from './OptionList';\nimport { formatStrategyValues, SHOW_CHILD } from './utils/strategyUtil';\nimport { useProvideSelectContext } from './TreeSelectContext';\nimport { useProvideLegacySelectContext } from './LegacyContext';\nimport useTreeData from './hooks/useTreeData';\nimport { toArray, fillFieldNames, isNil } from './utils/valueUtil';\nimport useCache from './hooks/useCache';\nimport useDataEntities from './hooks/useDataEntities';\nimport { fillAdditionalInfo, fillLegacyProps } from './utils/legacyUtil';\nimport useCheckedKeys from './hooks/useCheckedKeys';\nimport useFilterTreeData from './hooks/useFilterTreeData';\nimport warningProps from './utils/warningPropsUtil';\nimport { baseSelectPropsWithoutPrivate } from '../vc-select/BaseSelect';\nimport { computed, defineComponent, ref, shallowRef, toRaw, toRef, toRefs, watchEffect } from 'vue';\nimport omit from '../_util/omit';\nimport PropTypes from '../_util/vue-types';\nimport { BaseSelect } from '../vc-select';\nimport { initDefaultProps } from '../_util/props-util';\nimport useId from '../vc-select/hooks/useId';\nimport useMergedState from '../_util/hooks/useMergedState';\nimport { conductCheck } from '../vc-tree/utils/conductUtil';\nimport { warning } from '../vc-util/warning';\nimport { toReactive } from '../_util/toReactive';\nimport useMaxLevel from '../vc-tree/useMaxLevel';\nexport function treeSelectProps() {\n  return _extends(_extends({}, omit(baseSelectPropsWithoutPrivate(), ['mode'])), {\n    prefixCls: String,\n    id: String,\n    value: {\n      type: [String, Number, Object, Array]\n    },\n    defaultValue: {\n      type: [String, Number, Object, Array]\n    },\n    onChange: {\n      type: Function\n    },\n    searchValue: String,\n    /** @deprecated Use `searchValue` instead */\n    inputValue: String,\n    onSearch: {\n      type: Function\n    },\n    autoClearSearchValue: {\n      type: Boolean,\n      default: undefined\n    },\n    filterTreeNode: {\n      type: [Boolean, Function],\n      default: undefined\n    },\n    treeNodeFilterProp: String,\n    // >>> Select\n    onSelect: Function,\n    onDeselect: Function,\n    showCheckedStrategy: {\n      type: String\n    },\n    treeNodeLabelProp: String,\n    fieldNames: {\n      type: Object\n    },\n    // >>> Mode\n    multiple: {\n      type: Boolean,\n      default: undefined\n    },\n    treeCheckable: {\n      type: Boolean,\n      default: undefined\n    },\n    treeCheckStrictly: {\n      type: Boolean,\n      default: undefined\n    },\n    labelInValue: {\n      type: Boolean,\n      default: undefined\n    },\n    // >>> Data\n    treeData: {\n      type: Array\n    },\n    treeDataSimpleMode: {\n      type: [Boolean, Object],\n      default: undefined\n    },\n    loadData: {\n      type: Function\n    },\n    treeLoadedKeys: {\n      type: Array\n    },\n    onTreeLoad: {\n      type: Function\n    },\n    // >>> Expanded\n    treeDefaultExpandAll: {\n      type: Boolean,\n      default: undefined\n    },\n    treeExpandedKeys: {\n      type: Array\n    },\n    treeDefaultExpandedKeys: {\n      type: Array\n    },\n    onTreeExpand: {\n      type: Function\n    },\n    // >>> Options\n    virtual: {\n      type: Boolean,\n      default: undefined\n    },\n    listHeight: Number,\n    listItemHeight: Number,\n    onDropdownVisibleChange: {\n      type: Function\n    },\n    // >>> Tree\n    treeLine: {\n      type: [Boolean, Object],\n      default: undefined\n    },\n    treeIcon: PropTypes.any,\n    showTreeIcon: {\n      type: Boolean,\n      default: undefined\n    },\n    switcherIcon: PropTypes.any,\n    treeMotion: PropTypes.any,\n    children: Array,\n    treeExpandAction: String,\n    showArrow: {\n      type: Boolean,\n      default: undefined\n    },\n    showSearch: {\n      type: Boolean,\n      default: undefined\n    },\n    open: {\n      type: Boolean,\n      default: undefined\n    },\n    defaultOpen: {\n      type: Boolean,\n      default: undefined\n    },\n    disabled: {\n      type: Boolean,\n      default: undefined\n    },\n    placeholder: PropTypes.any,\n    maxTagPlaceholder: {\n      type: Function\n    },\n    dropdownPopupAlign: PropTypes.any,\n    customSlots: Object\n  });\n}\nfunction isRawValue(value) {\n  return !value || typeof value !== 'object';\n}\nexport default defineComponent({\n  compatConfig: {\n    MODE: 3\n  },\n  name: 'TreeSelect',\n  inheritAttrs: false,\n  props: initDefaultProps(treeSelectProps(), {\n    treeNodeFilterProp: 'value',\n    autoClearSearchValue: true,\n    showCheckedStrategy: SHOW_CHILD,\n    listHeight: 200,\n    listItemHeight: 20,\n    prefixCls: 'vc-tree-select'\n  }),\n  setup(props, _ref) {\n    let {\n      attrs,\n      expose,\n      slots\n    } = _ref;\n    const mergedId = useId(toRef(props, 'id'));\n    const treeConduction = computed(() => props.treeCheckable && !props.treeCheckStrictly);\n    const mergedCheckable = computed(() => props.treeCheckable || props.treeCheckStrictly);\n    const mergedLabelInValue = computed(() => props.treeCheckStrictly || props.labelInValue);\n    const mergedMultiple = computed(() => mergedCheckable.value || props.multiple);\n    // ========================== Warning ===========================\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        warningProps(props);\n      });\n    }\n    // ========================= FieldNames =========================\n    const mergedFieldNames = computed(() => fillFieldNames(props.fieldNames));\n    // =========================== Search ===========================\n    const [mergedSearchValue, setSearchValue] = useMergedState('', {\n      value: computed(() => props.searchValue !== undefined ? props.searchValue : props.inputValue),\n      postState: search => search || ''\n    });\n    const onInternalSearch = searchText => {\n      var _a;\n      setSearchValue(searchText);\n      (_a = props.onSearch) === null || _a === void 0 ? void 0 : _a.call(props, searchText);\n    };\n    // ============================ Data ============================\n    // `useTreeData` only do convert of `children` or `simpleMode`.\n    // Else will return origin `treeData` for perf consideration.\n    // Do not do anything to loop the data.\n    const mergedTreeData = useTreeData(toRef(props, 'treeData'), toRef(props, 'children'), toRef(props, 'treeDataSimpleMode'));\n    const {\n      keyEntities,\n      valueEntities\n    } = useDataEntities(mergedTreeData, mergedFieldNames);\n    /** Get `missingRawValues` which not exist in the tree yet */\n    const splitRawValues = newRawValues => {\n      const missingRawValues = [];\n      const existRawValues = [];\n      // Keep missing value in the cache\n      newRawValues.forEach(val => {\n        if (valueEntities.value.has(val)) {\n          existRawValues.push(val);\n        } else {\n          missingRawValues.push(val);\n        }\n      });\n      return {\n        missingRawValues,\n        existRawValues\n      };\n    };\n    // Filtered Tree\n    const filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n      fieldNames: mergedFieldNames,\n      treeNodeFilterProp: toRef(props, 'treeNodeFilterProp'),\n      filterTreeNode: toRef(props, 'filterTreeNode')\n    });\n    // =========================== Label ============================\n    const getLabel = item => {\n      if (item) {\n        if (props.treeNodeLabelProp) {\n          return item[props.treeNodeLabelProp];\n        }\n        // Loop from fieldNames\n        const {\n          _title: titleList\n        } = mergedFieldNames.value;\n        for (let i = 0; i < titleList.length; i += 1) {\n          const title = item[titleList[i]];\n          if (title !== undefined) {\n            return title;\n          }\n        }\n      }\n    };\n    // ========================= Wrap Value =========================\n    const toLabeledValues = draftValues => {\n      const values = toArray(draftValues);\n      return values.map(val => {\n        if (isRawValue(val)) {\n          return {\n            value: val\n          };\n        }\n        return val;\n      });\n    };\n    const convert2LabelValues = draftValues => {\n      const values = toLabeledValues(draftValues);\n      return values.map(item => {\n        let {\n          label: rawLabel\n        } = item;\n        const {\n          value: rawValue,\n          halfChecked: rawHalfChecked\n        } = item;\n        let rawDisabled;\n        const entity = valueEntities.value.get(rawValue);\n        // Fill missing label & status\n        if (entity) {\n          rawLabel = rawLabel !== null && rawLabel !== void 0 ? rawLabel : getLabel(entity.node);\n          rawDisabled = entity.node.disabled;\n        }\n        return {\n          label: rawLabel,\n          value: rawValue,\n          halfChecked: rawHalfChecked,\n          disabled: rawDisabled\n        };\n      });\n    };\n    // =========================== Values ===========================\n    const [internalValue, setInternalValue] = useMergedState(props.defaultValue, {\n      value: toRef(props, 'value')\n    });\n    const rawMixedLabeledValues = computed(() => toLabeledValues(internalValue.value));\n    // Split value into full check and half check\n    const rawLabeledValues = shallowRef([]);\n    const rawHalfLabeledValues = shallowRef([]);\n    watchEffect(() => {\n      const fullCheckValues = [];\n      const halfCheckValues = [];\n      rawMixedLabeledValues.value.forEach(item => {\n        if (item.halfChecked) {\n          halfCheckValues.push(item);\n        } else {\n          fullCheckValues.push(item);\n        }\n      });\n      rawLabeledValues.value = fullCheckValues;\n      rawHalfLabeledValues.value = halfCheckValues;\n    });\n    // const [mergedValues] = useCache(rawLabeledValues);\n    const rawValues = computed(() => rawLabeledValues.value.map(item => item.value));\n    const {\n      maxLevel,\n      levelEntities\n    } = useMaxLevel(keyEntities);\n    // Convert value to key. Will fill missed keys for conduct check.\n    const [rawCheckedValues, rawHalfCheckedValues] = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities, maxLevel, levelEntities);\n    // Convert rawCheckedKeys to check strategy related values\n    const displayValues = computed(() => {\n      // Collect keys which need to show\n      const displayKeys = formatStrategyValues(rawCheckedValues.value, props.showCheckedStrategy, keyEntities.value, mergedFieldNames.value);\n      // Convert to value and filled with label\n      const values = displayKeys.map(key => {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = keyEntities.value[key]) === null || _a === void 0 ? void 0 : _a.node) === null || _b === void 0 ? void 0 : _b[mergedFieldNames.value.value]) !== null && _c !== void 0 ? _c : key;\n      });\n      // Back fill with origin label\n      const labeledValues = values.map(val => {\n        const targetItem = rawLabeledValues.value.find(item => item.value === val);\n        return {\n          value: val,\n          label: targetItem === null || targetItem === void 0 ? void 0 : targetItem.label\n        };\n      });\n      const rawDisplayValues = convert2LabelValues(labeledValues);\n      const firstVal = rawDisplayValues[0];\n      if (!mergedMultiple.value && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n        return [];\n      }\n      return rawDisplayValues.map(item => {\n        var _a;\n        return _extends(_extends({}, item), {\n          label: (_a = item.label) !== null && _a !== void 0 ? _a : item.value\n        });\n      });\n    });\n    const [cachedDisplayValues] = useCache(displayValues);\n    // =========================== Change ===========================\n    const triggerChange = (newRawValues, extra, source) => {\n      const labeledValues = convert2LabelValues(newRawValues);\n      setInternalValue(labeledValues);\n      // Clean up if needed\n      if (props.autoClearSearchValue) {\n        setSearchValue('');\n      }\n      // Generate rest parameters is costly, so only do it when necessary\n      if (props.onChange) {\n        let eventValues = newRawValues;\n        if (treeConduction.value) {\n          const formattedKeyList = formatStrategyValues(newRawValues, props.showCheckedStrategy, keyEntities.value, mergedFieldNames.value);\n          eventValues = formattedKeyList.map(key => {\n            const entity = valueEntities.value.get(key);\n            return entity ? entity.node[mergedFieldNames.value.value] : key;\n          });\n        }\n        const {\n          triggerValue,\n          selected\n        } = extra || {\n          triggerValue: undefined,\n          selected: undefined\n        };\n        let returnRawValues = eventValues;\n        // We need fill half check back\n        if (props.treeCheckStrictly) {\n          const halfValues = rawHalfLabeledValues.value.filter(item => !eventValues.includes(item.value));\n          returnRawValues = [...returnRawValues, ...halfValues];\n        }\n        const returnLabeledValues = convert2LabelValues(returnRawValues);\n        const additionalInfo = {\n          // [Legacy] Always return as array contains label & value\n          preValue: rawLabeledValues.value,\n          triggerValue\n        };\n        // [Legacy] Fill legacy data if user query.\n        // This is expansive that we only fill when user query\n        // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n        let showPosition = true;\n        if (props.treeCheckStrictly || source === 'selection' && !selected) {\n          showPosition = false;\n        }\n        fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData.value, showPosition, mergedFieldNames.value);\n        if (mergedCheckable.value) {\n          additionalInfo.checked = selected;\n        } else {\n          additionalInfo.selected = selected;\n        }\n        const returnValues = mergedLabelInValue.value ? returnLabeledValues : returnLabeledValues.map(item => item.value);\n        props.onChange(mergedMultiple.value ? returnValues : returnValues[0], mergedLabelInValue.value ? null : returnLabeledValues.map(item => item.label), additionalInfo);\n      }\n    };\n    // ========================== Options ===========================\n    /** Trigger by option list */\n    const onOptionSelect = (selectedKey, _ref2) => {\n      let {\n        selected,\n        source\n      } = _ref2;\n      var _a, _b, _c;\n      const keyEntitiesValue = toRaw(keyEntities.value);\n      const valueEntitiesValue = toRaw(valueEntities.value);\n      const entity = keyEntitiesValue[selectedKey];\n      const node = entity === null || entity === void 0 ? void 0 : entity.node;\n      const selectedValue = (_a = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value.value]) !== null && _a !== void 0 ? _a : selectedKey;\n      // Never be falsy but keep it safe\n      if (!mergedMultiple.value) {\n        // Single mode always set value\n        triggerChange([selectedValue], {\n          selected: true,\n          triggerValue: selectedValue\n        }, 'option');\n      } else {\n        let newRawValues = selected ? [...rawValues.value, selectedValue] : rawCheckedValues.value.filter(v => v !== selectedValue);\n        // Add keys if tree conduction\n        if (treeConduction.value) {\n          // Should keep missing values\n          const {\n            missingRawValues,\n            existRawValues\n          } = splitRawValues(newRawValues);\n          const keyList = existRawValues.map(val => valueEntitiesValue.get(val).key);\n          // Conduction by selected or not\n          let checkedKeys;\n          if (selected) {\n            ({\n              checkedKeys\n            } = conductCheck(keyList, true, keyEntitiesValue, maxLevel.value, levelEntities.value));\n          } else {\n            ({\n              checkedKeys\n            } = conductCheck(keyList, {\n              checked: false,\n              halfCheckedKeys: rawHalfCheckedValues.value\n            }, keyEntitiesValue, maxLevel.value, levelEntities.value));\n          }\n          // Fill back of keys\n          newRawValues = [...missingRawValues, ...checkedKeys.map(key => keyEntitiesValue[key].node[mergedFieldNames.value.value])];\n        }\n        triggerChange(newRawValues, {\n          selected,\n          triggerValue: selectedValue\n        }, source || 'option');\n      }\n      // Trigger select event\n      if (selected || !mergedMultiple.value) {\n        (_b = props.onSelect) === null || _b === void 0 ? void 0 : _b.call(props, selectedValue, fillLegacyProps(node));\n      } else {\n        (_c = props.onDeselect) === null || _c === void 0 ? void 0 : _c.call(props, selectedValue, fillLegacyProps(node));\n      }\n    };\n    // ========================== Dropdown ==========================\n    const onInternalDropdownVisibleChange = open => {\n      if (props.onDropdownVisibleChange) {\n        const legacyParam = {};\n        Object.defineProperty(legacyParam, 'documentClickClose', {\n          get() {\n            warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n            return false;\n          }\n        });\n        props.onDropdownVisibleChange(open, legacyParam);\n      }\n    };\n    // ====================== Display Change ========================\n    const onDisplayValuesChange = (newValues, info) => {\n      const newRawValues = newValues.map(item => item.value);\n      if (info.type === 'clear') {\n        triggerChange(newRawValues, {}, 'selection');\n        return;\n      }\n      // TreeSelect only have multiple mode which means display change only has remove\n      if (info.values.length) {\n        onOptionSelect(info.values[0].value, {\n          selected: false,\n          source: 'selection'\n        });\n      }\n    };\n    const {\n      treeNodeFilterProp,\n      // Data\n      loadData,\n      treeLoadedKeys,\n      onTreeLoad,\n      // Expanded\n      treeDefaultExpandAll,\n      treeExpandedKeys,\n      treeDefaultExpandedKeys,\n      onTreeExpand,\n      // Options\n      virtual,\n      listHeight,\n      listItemHeight,\n      // Tree\n      treeLine,\n      treeIcon,\n      showTreeIcon,\n      switcherIcon,\n      treeMotion,\n      customSlots,\n      dropdownMatchSelectWidth,\n      treeExpandAction\n    } = toRefs(props);\n    useProvideLegacySelectContext(toReactive({\n      checkable: mergedCheckable,\n      loadData,\n      treeLoadedKeys,\n      onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll,\n      treeExpandedKeys,\n      treeDefaultExpandedKeys,\n      onTreeExpand,\n      treeIcon,\n      treeMotion,\n      showTreeIcon,\n      switcherIcon,\n      treeLine,\n      treeNodeFilterProp,\n      keyEntities,\n      customSlots\n    }));\n    useProvideSelectContext(toReactive({\n      virtual,\n      listHeight,\n      listItemHeight,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect,\n      dropdownMatchSelectWidth,\n      treeExpandAction\n    }));\n    const selectRef = ref();\n    expose({\n      focus() {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      blur() {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.blur();\n      },\n      scrollTo(arg) {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo(arg);\n      }\n    });\n    return () => {\n      var _a;\n      const restProps = omit(props, ['id', 'prefixCls', 'customSlots',\n      // Value\n      'value', 'defaultValue', 'onChange', 'onSelect', 'onDeselect',\n      // Search\n      'searchValue', 'inputValue', 'onSearch', 'autoClearSearchValue', 'filterTreeNode', 'treeNodeFilterProp',\n      // Selector\n      'showCheckedStrategy', 'treeNodeLabelProp',\n      //  Mode\n      'multiple', 'treeCheckable', 'treeCheckStrictly', 'labelInValue',\n      // FieldNames\n      'fieldNames',\n      // Data\n      'treeDataSimpleMode', 'treeData', 'children', 'loadData', 'treeLoadedKeys', 'onTreeLoad',\n      // Expanded\n      'treeDefaultExpandAll', 'treeExpandedKeys', 'treeDefaultExpandedKeys', 'onTreeExpand',\n      // Options\n      'virtual', 'listHeight', 'listItemHeight', 'onDropdownVisibleChange',\n      // Tree\n      'treeLine', 'treeIcon', 'showTreeIcon', 'switcherIcon', 'treeMotion']);\n      return _createVNode(BaseSelect, _objectSpread(_objectSpread(_objectSpread({\n        \"ref\": selectRef\n      }, attrs), restProps), {}, {\n        \"id\": mergedId,\n        \"prefixCls\": props.prefixCls,\n        \"mode\": mergedMultiple.value ? 'multiple' : undefined,\n        \"displayValues\": cachedDisplayValues.value,\n        \"onDisplayValuesChange\": onDisplayValuesChange,\n        \"searchValue\": mergedSearchValue.value,\n        \"onSearch\": onInternalSearch,\n        \"OptionList\": OptionList,\n        \"emptyOptions\": !mergedTreeData.value.length,\n        \"onDropdownVisibleChange\": onInternalDropdownVisibleChange,\n        \"tagRender\": props.tagRender || slots.tagRender,\n        \"dropdownMatchSelectWidth\": (_a = props.dropdownMatchSelectWidth) !== null && _a !== void 0 ? _a : true\n      }), slots);\n    };\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}