{"ast":null,"code":"import _typeof from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport { warning } from '../../vc-util/warning';\nimport { toArray } from './valueUtil';\nfunction warningProps(props) {\n  var searchPlaceholder = props.searchPlaceholder,\n    treeCheckStrictly = props.treeCheckStrictly,\n    treeCheckable = props.treeCheckable,\n    labelInValue = props.labelInValue,\n    value = props.value,\n    multiple = props.multiple;\n  warning(!searchPlaceholder, '`searchPlaceholder` has been removed, please use `placeholder` instead');\n  if (treeCheckStrictly && labelInValue === false) {\n    warning(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\n  }\n  if (labelInValue || treeCheckStrictly) {\n    warning(toArray(value).every(function (val) {\n      return val && _typeof(val) === 'object' && 'value' in val;\n    }), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\n  }\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    warning(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\n  } else {\n    warning(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\n  }\n}\nexport default warningProps;","map":{"version":3,"names":["warning","toArray","warningProps","props","searchPlaceholder","treeCheckStrictly","treeCheckable","labelInValue","value","multiple","every","val","_typeof","Array","isArray"],"sources":["C:/Users/zhouy/WebstormProjects/lingo/node_modules/ant-design-vue/es/vc-tree-select/utils/warningPropsUtil.js"],"sourcesContent":["import { warning } from '../../vc-util/warning';\nimport { toArray } from './valueUtil';\nfunction warningProps(props) {\n  const {\n    searchPlaceholder,\n    treeCheckStrictly,\n    treeCheckable,\n    labelInValue,\n    value,\n    multiple\n  } = props;\n  warning(!searchPlaceholder, '`searchPlaceholder` has been removed, please use `placeholder` instead');\n  if (treeCheckStrictly && labelInValue === false) {\n    warning(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\n  }\n  if (labelInValue || treeCheckStrictly) {\n    warning(toArray(value).every(val => val && typeof val === 'object' && 'value' in val), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\n  }\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    warning(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\n  } else {\n    warning(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\n  }\n}\nexport default warningProps;"],"mappings":";;;;AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,YAAYA,CAACC,KAAK,EAAE;EAC3B,IACEC,iBAAiB,GAMfD,KAAK,CANPC,iBAAiB;IACjBC,iBAAiB,GAKfF,KAAK,CALPE,iBAAiB;IACjBC,aAAa,GAIXH,KAAK,CAJPG,aAAa;IACbC,YAAY,GAGVJ,KAAK,CAHPI,YAAY;IACZC,KAAK,GAEHL,KAAK,CAFPK,KAAK;IACLC,QAAQ,GACNN,KAAK,CADPM,QAAQ;EAEVT,OAAO,CAAC,CAACI,iBAAiB,EAAE,wEAAwE,CAAC;EACrG,IAAIC,iBAAiB,IAAIE,YAAY,KAAK,KAAK,EAAE;IAC/CP,OAAO,CAAC,KAAK,EAAE,8DAA8D,CAAC;EAChF;EACA,IAAIO,YAAY,IAAIF,iBAAiB,EAAE;IACrCL,OAAO,CAACC,OAAO,CAACO,KAAK,CAAC,CAACE,KAAK,CAAC,UAAAC,GAAG;MAAA,OAAIA,GAAG,IAAIC,OAAA,CAAOD,GAAG,MAAK,QAAQ,IAAI,OAAO,IAAIA,GAAG;IAAA,EAAC,EAAE,iKAAiK,CAAC;EAC3P;EACA,IAAIN,iBAAiB,IAAII,QAAQ,IAAIH,aAAa,EAAE;IAClDN,OAAO,CAAC,CAACQ,KAAK,IAAIK,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,EAAE,wEAAwE,CAAC;EACnH,CAAC,MAAM;IACLR,OAAO,CAAC,CAACa,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,EAAE,+DAA+D,CAAC;EACjG;AACF;AACA,eAAeN,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}