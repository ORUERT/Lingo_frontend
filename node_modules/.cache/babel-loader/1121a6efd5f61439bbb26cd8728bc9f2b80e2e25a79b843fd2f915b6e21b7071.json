{"ast":null,"code":"import _typeof from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _toConsumableArray from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { getPosition, isTreeNode } from '../util';\nimport { warning } from '../../vc-util/warning';\nimport { camelize, filterEmpty } from '../../_util/props-util';\nimport omit from '../../_util/omit';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref2 = fieldNames || {},\n    title = _ref2.title,\n    _title = _ref2._title,\n    key = _ref2.key,\n    children = _ref2.children;\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\n * Warning if TreeNode do not provides key\n */\nexport function warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\nexport function convertTreeToData(rootNodes) {\n  function dig() {\n    var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var treeNodes = filterEmpty(node);\n    return treeNodes.map(function (treeNode) {\n      var _a, _b, _c, _d;\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n      var slots = treeNode.children || {};\n      var key = treeNode.key;\n      var props = {};\n      for (var _i = 0, _Object$entries = Object.entries(treeNode.props); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          k = _Object$entries$_i[0],\n          v = _Object$entries$_i[1];\n        props[camelize(k)] = v;\n      }\n      var isLeaf = props.isLeaf,\n        checkable = props.checkable,\n        selectable = props.selectable,\n        disabled = props.disabled,\n        disableCheckbox = props.disableCheckbox;\n      // 默认值为 undefined\n      var newProps = {\n        isLeaf: isLeaf || isLeaf === '' || undefined,\n        checkable: checkable || checkable === '' || undefined,\n        selectable: selectable || selectable === '' || undefined,\n        disabled: disabled || disabled === '' || undefined,\n        disableCheckbox: disableCheckbox || disableCheckbox === '' || undefined\n      };\n      var slotsProps = _extends(_extends({}, props), newProps);\n      var _props$title = props.title,\n        title = _props$title === void 0 ? (_a = slots.title) === null || _a === void 0 ? void 0 : _a.call(slots, slotsProps) : _props$title,\n        _props$icon = props.icon,\n        icon = _props$icon === void 0 ? (_b = slots.icon) === null || _b === void 0 ? void 0 : _b.call(slots, slotsProps) : _props$icon,\n        _props$switcherIcon = props.switcherIcon,\n        switcherIcon = _props$switcherIcon === void 0 ? (_c = slots.switcherIcon) === null || _c === void 0 ? void 0 : _c.call(slots, slotsProps) : _props$switcherIcon,\n        rest = __rest(props, [\"title\", \"icon\", \"switcherIcon\"]);\n      var children = (_d = slots[\"default\"]) === null || _d === void 0 ? void 0 : _d.call(slots);\n      var dataNode = _extends(_extends(_extends({}, rest), {\n        title: title,\n        icon: icon,\n        switcherIcon: switcherIcon,\n        key: key,\n        isLeaf: isLeaf\n      }), newProps);\n      var parsedChildren = dig(children);\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n      return dataNode;\n    });\n  }\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n    fieldTitles = _fillFieldNames._title,\n    fieldKey = _fillFieldNames.key,\n    fieldChildren = _fillFieldNames.children;\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos);\n      // Pick matched title in field title list\n      var mergedTitle;\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      }\n      // Add FlattenDataNode into list\n      var flattenNode = _extends(_extends({}, omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren]))), {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode);\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n      return flattenNode;\n    });\n  }\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\nexport function traverseDataNodes(dataNodes, callback,\n// To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n  if (_typeof(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n  mergedConfig = mergedConfig || {};\n  // Init config\n  var _mergedConfig = mergedConfig,\n    childrenPropName = _mergedConfig.childrenPropName,\n    externalGetKey = _mergedConfig.externalGetKey,\n    fieldNames = _mergedConfig.fieldNames;\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n    fieldKey = _fillFieldNames2.key,\n    fieldChildren = _fillFieldNames2.children;\n  var mergeChildrenPropName = childrenPropName || fieldChildren;\n  // Get keys\n  var syntheticGetKey;\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  }\n  // Process\n  function processNode(node, index, parent, pathNodes) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0';\n    var connectNodes = node ? [].concat(_toConsumableArray(pathNodes), [node]) : [];\n    // Process node if is not root\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(data);\n    }\n    // Process children node\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\nexport function convertDataToEntities(dataNodes) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    initWrapper = _ref3.initWrapper,\n    processEntity = _ref3.processEntity,\n    onProcessFinished = _ref3.onProcessFinished,\n    externalGetKey = _ref3.externalGetKey,\n    childrenPropName = _ref3.childrenPropName,\n    fieldNames = _ref3.fieldNames;\n  var /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n      index = item.index,\n      pos = item.pos,\n      key = item.key,\n      parentPos = item.parentPos,\n      level = item.level,\n      nodes = item.nodes;\n    var entity = {\n      node: node,\n      nodes: nodes,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity;\n    // Fill children\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\nexport function getTreeNodeProps(key, _ref) {\n  var expandedKeysSet = _ref.expandedKeysSet,\n    selectedKeysSet = _ref.selectedKeysSet,\n    loadedKeysSet = _ref.loadedKeysSet,\n    loadingKeysSet = _ref.loadingKeysSet,\n    checkedKeysSet = _ref.checkedKeysSet,\n    halfCheckedKeysSet = _ref.halfCheckedKeysSet,\n    dragOverNodeKey = _ref.dragOverNodeKey,\n    dropPosition = _ref.dropPosition,\n    keyEntities = _ref.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeysSet.has(key),\n    selected: selectedKeysSet.has(key),\n    loaded: loadedKeysSet.has(key),\n    loading: loadingKeysSet.has(key),\n    checked: checkedKeysSet.has(key),\n    halfChecked: halfCheckedKeysSet.has(key),\n    pos: String(entity ? entity.pos : ''),\n    parent: entity.parent,\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n    expanded = props.expanded,\n    selected = props.selected,\n    checked = props.checked,\n    loaded = props.loaded,\n    loading = props.loading,\n    halfChecked = props.halfChecked,\n    dragOver = props.dragOver,\n    dragOverGapTop = props.dragOverGapTop,\n    dragOverGapBottom = props.dragOverGapBottom,\n    pos = props.pos,\n    active = props.active,\n    eventKey = props.eventKey;\n  var eventData = _extends(_extends({\n    dataRef: data\n  }, data), {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    eventKey: eventKey,\n    key: eventKey\n  });\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n  return eventData;\n}","map":{"version":3,"names":["_extends","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","getPosition","isTreeNode","warning","camelize","filterEmpty","omit","getKey","key","pos","undefined","fillFieldNames","fieldNames","_ref2","title","_title","children","mergedTitle","warningWithoutKey","treeData","keys","Map","dig","list","path","arguments","forEach","treeNode","concat","recordKey","String","has","set","convertTreeToData","rootNodes","node","treeNodes","map","_a","_b","_c","_d","slots","props","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","k","v","isLeaf","checkable","selectable","disabled","disableCheckbox","newProps","slotsProps","_props$title","_props$icon","icon","_props$switcherIcon","switcherIcon","rest","dataNode","parsedChildren","flattenTreeData","treeNodeList","expandedKeys","_fillFieldNames","fieldTitles","fieldKey","fieldChildren","expandedKeySet","Set","flattenList","parent","index","mergedKey","fieldTitle","flattenNode","_toConsumableArray","data","isStart","isEnd","push","traverseDataNodes","dataNodes","callback","config","mergedConfig","_typeof","externalGetKey","_mergedConfig","childrenPropName","_fillFieldNames2","mergeChildrenPropName","syntheticGetKey","processNode","pathNodes","connectNodes","parentPos","level","nodes","subNode","subIndex","convertDataToEntities","_ref3","initWrapper","processEntity","onProcessFinished","legacyExternalGetKey","mergedExternalGetKey","posEntities","keyEntities","wrapper","item","entity","getTreeNodeProps","_ref","expandedKeysSet","selectedKeysSet","loadedKeysSet","loadingKeysSet","checkedKeysSet","halfCheckedKeysSet","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","convertNodePropsToEventData","active","eventData","dataRef","defineProperty","get"],"sources":["C:/Users/zhouy/WebstormProjects/lingo/node_modules/ant-design-vue/es/vc-tree/utils/treeUtil.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { getPosition, isTreeNode } from '../util';\nimport { warning } from '../../vc-util/warning';\nimport { camelize, filterEmpty } from '../../_util/props-util';\nimport omit from '../../_util/omit';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  const {\n    title,\n    _title,\n    key,\n    children\n  } = fieldNames || {};\n  const mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\n * Warning if TreeNode do not provides key\n */\nexport function warningWithoutKey(treeData, fieldNames) {\n  const keys = new Map();\n  function dig(list) {\n    let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(treeNode => {\n      const key = treeNode[fieldNames.key];\n      const children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, `Tree node must have a certain key: [${path}${key}]`);\n      const recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, `Same 'key' exist in the Tree: ${recordKey}`);\n      keys.set(recordKey, true);\n      dig(children, `${path}${recordKey} > `);\n    });\n  }\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\nexport function convertTreeToData(rootNodes) {\n  function dig() {\n    let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    const treeNodes = filterEmpty(node);\n    return treeNodes.map(treeNode => {\n      var _a, _b, _c, _d;\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n      const slots = treeNode.children || {};\n      const key = treeNode.key;\n      const props = {};\n      for (const [k, v] of Object.entries(treeNode.props)) {\n        props[camelize(k)] = v;\n      }\n      const {\n        isLeaf,\n        checkable,\n        selectable,\n        disabled,\n        disableCheckbox\n      } = props;\n      // 默认值为 undefined\n      const newProps = {\n        isLeaf: isLeaf || isLeaf === '' || undefined,\n        checkable: checkable || checkable === '' || undefined,\n        selectable: selectable || selectable === '' || undefined,\n        disabled: disabled || disabled === '' || undefined,\n        disableCheckbox: disableCheckbox || disableCheckbox === '' || undefined\n      };\n      const slotsProps = _extends(_extends({}, props), newProps);\n      const {\n          title = (_a = slots.title) === null || _a === void 0 ? void 0 : _a.call(slots, slotsProps),\n          icon = (_b = slots.icon) === null || _b === void 0 ? void 0 : _b.call(slots, slotsProps),\n          switcherIcon = (_c = slots.switcherIcon) === null || _c === void 0 ? void 0 : _c.call(slots, slotsProps)\n        } = props,\n        rest = __rest(props, [\"title\", \"icon\", \"switcherIcon\"]);\n      const children = (_d = slots.default) === null || _d === void 0 ? void 0 : _d.call(slots);\n      const dataNode = _extends(_extends(_extends({}, rest), {\n        title,\n        icon,\n        switcherIcon,\n        key,\n        isLeaf\n      }), newProps);\n      const parsedChildren = dig(children);\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n      return dataNode;\n    });\n  }\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  const {\n    _title: fieldTitles,\n    key: fieldKey,\n    children: fieldChildren\n  } = fillFieldNames(fieldNames);\n  const expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  const flattenList = [];\n  function dig(list) {\n    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map((treeNode, index) => {\n      const pos = getPosition(parent ? parent.pos : '0', index);\n      const mergedKey = getKey(treeNode[fieldKey], pos);\n      // Pick matched title in field title list\n      let mergedTitle;\n      for (let i = 0; i < fieldTitles.length; i += 1) {\n        const fieldTitle = fieldTitles[i];\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      }\n      // Add FlattenDataNode into list\n      const flattenNode = _extends(_extends({}, omit(treeNode, [...fieldTitles, fieldKey, fieldChildren])), {\n        title: mergedTitle,\n        key: mergedKey,\n        parent,\n        pos,\n        children: null,\n        data: treeNode,\n        isStart: [...(parent ? parent.isStart : []), index === 0],\n        isEnd: [...(parent ? parent.isEnd : []), index === list.length - 1]\n      });\n      flattenList.push(flattenNode);\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n      return flattenNode;\n    });\n  }\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\nexport function traverseDataNodes(dataNodes, callback,\n// To avoid too many params, let use config instead of origin param\nconfig) {\n  let mergedConfig = {};\n  if (typeof config === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n  mergedConfig = mergedConfig || {};\n  // Init config\n  const {\n    childrenPropName,\n    externalGetKey,\n    fieldNames\n  } = mergedConfig;\n  const {\n    key: fieldKey,\n    children: fieldChildren\n  } = fillFieldNames(fieldNames);\n  const mergeChildrenPropName = childrenPropName || fieldChildren;\n  // Get keys\n  let syntheticGetKey;\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = node => node[externalGetKey];\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = node => externalGetKey(node);\n    }\n  } else {\n    syntheticGetKey = (node, pos) => getKey(node[fieldKey], pos);\n  }\n  // Process\n  function processNode(node, index, parent, pathNodes) {\n    const children = node ? node[mergeChildrenPropName] : dataNodes;\n    const pos = node ? getPosition(parent.pos, index) : '0';\n    const connectNodes = node ? [...pathNodes, node] : [];\n    // Process node if is not root\n    if (node) {\n      const key = syntheticGetKey(node, pos);\n      const data = {\n        node,\n        index,\n        pos,\n        key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(data);\n    }\n    // Process children node\n    if (children) {\n      children.forEach((subNode, subIndex) => {\n        processNode(subNode, subIndex, {\n          node,\n          pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\nexport function convertDataToEntities(dataNodes) {\n  let {\n    initWrapper,\n    processEntity,\n    onProcessFinished,\n    externalGetKey,\n    childrenPropName,\n    fieldNames\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  const mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  const posEntities = {};\n  const keyEntities = {};\n  let wrapper = {\n    posEntities,\n    keyEntities\n  };\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n  traverseDataNodes(dataNodes, item => {\n    const {\n      node,\n      index,\n      pos,\n      key,\n      parentPos,\n      level,\n      nodes\n    } = item;\n    const entity = {\n      node,\n      nodes,\n      index,\n      key,\n      pos,\n      level\n    };\n    const mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity;\n    // Fill children\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName,\n    fieldNames\n  });\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\nexport function getTreeNodeProps(key, _ref) {\n  let {\n    expandedKeysSet,\n    selectedKeysSet,\n    loadedKeysSet,\n    loadingKeysSet,\n    checkedKeysSet,\n    halfCheckedKeysSet,\n    dragOverNodeKey,\n    dropPosition,\n    keyEntities\n  } = _ref;\n  const entity = keyEntities[key];\n  const treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeysSet.has(key),\n    selected: selectedKeysSet.has(key),\n    loaded: loadedKeysSet.has(key),\n    loading: loadingKeysSet.has(key),\n    checked: checkedKeysSet.has(key),\n    halfChecked: halfCheckedKeysSet.has(key),\n    pos: String(entity ? entity.pos : ''),\n    parent: entity.parent,\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  const {\n    data,\n    expanded,\n    selected,\n    checked,\n    loaded,\n    loading,\n    halfChecked,\n    dragOver,\n    dragOverGapTop,\n    dragOverGapBottom,\n    pos,\n    active,\n    eventKey\n  } = props;\n  const eventData = _extends(_extends({\n    dataRef: data\n  }, data), {\n    expanded,\n    selected,\n    checked,\n    loaded,\n    loading,\n    halfChecked,\n    dragOver,\n    dragOverGapTop,\n    dragOverGapBottom,\n    pos,\n    active,\n    eventKey,\n    key: eventKey\n  });\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n  return eventData;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}