{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-namespace */\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\n'use strict';\n\nimport _createForOfIteratorHelper from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nvar qrcodegen;\n(function (qrcodegen) {\n  /*---- QR Code symbol class ----*/\n  /*\n   * A QR Code symbol, which is a type of two-dimension barcode.\n   * Invented by Denso Wave and described in the ISO/IEC 18004 standard.\n   * Instances of this class represent an immutable square grid of dark and light cells.\n   * The class provides static factory functions to create a QR Code from text or binary data.\n   * The class covers the QR Code Model 2 specification, supporting all versions (sizes)\n   * from 1 to 40, all 4 error correction levels, and 4 character encoding modes.\n   *\n   * Ways to create a QR Code object:\n   * - High level: Take the payload data and call QrCode.encodeText() or QrCode.encodeBinary().\n   * - Mid level: Custom-make the list of segments and call QrCode.encodeSegments().\n   * - Low level: Custom-make the array of data codeword bytes (including\n   *   segment headers and final padding, excluding error correction codewords),\n   *   supply the appropriate version number, and call the QrCode() constructor.\n   * (Note that all ways require supplying the desired error correction level.)\n   */\n  var QrCode = /*#__PURE__*/function () {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    function QrCode(\n    // The version number of this QR Code, which is between 1 and 40 (inclusive).\n    // This determines the size of this barcode.\n    version,\n    // The error correction level used in this QR Code.\n    errorCorrectionLevel, dataCodewords, msk) {\n      _classCallCheck(this, QrCode);\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      // The modules of this QR Code (false = light, true = dark).\n      // Immutable after constructor finishes. Accessed through getModule().\n      this.modules = [];\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n      this.isFunction = [];\n      // Check scalar arguments\n      if (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION) throw new RangeError('Version value out of range');\n      if (msk < -1 || msk > 7) throw new RangeError('Mask value out of range');\n      this.size = version * 4 + 17;\n      // Initialize both grids to be size*size arrays of Boolean false\n      var row = [];\n      for (var i = 0; i < this.size; i++) row.push(false);\n      for (var _i = 0; _i < this.size; _i++) {\n        this.modules.push(row.slice()); // Initially all light\n        this.isFunction.push(row.slice());\n      }\n      // Compute ECC, draw modules\n      this.drawFunctionPatterns();\n      var allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      // Do masking\n      if (msk == -1) {\n        // Automatically choose best mask\n        var minPenalty = 1000000000;\n        for (var _i2 = 0; _i2 < 8; _i2++) {\n          this.applyMask(_i2);\n          this.drawFormatBits(_i2);\n          var penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = _i2;\n            minPenalty = penalty;\n          }\n          this.applyMask(_i2); // Undoes the mask due to XOR\n        }\n      }\n\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk); // Apply the final choice of mask\n      this.drawFormatBits(msk); // Overwrite old format bits\n      this.isFunction = [];\n    }\n    /*-- Accessor methods --*/\n    // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    _createClass(QrCode, [{\n      key: \"getModule\",\n      value: function getModule(x, y) {\n        return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n      }\n      // Modified to expose modules for easy access\n    }, {\n      key: \"getModules\",\n      value: function getModules() {\n        return this.modules;\n      }\n      /*-- Private helper methods for constructor: Drawing function modules --*/\n      // Reads this object's version field, and draws and marks all function modules.\n    }, {\n      key: \"drawFunctionPatterns\",\n      value: function drawFunctionPatterns() {\n        // Draw horizontal and vertical timing patterns\n        for (var i = 0; i < this.size; i++) {\n          this.setFunctionModule(6, i, i % 2 == 0);\n          this.setFunctionModule(i, 6, i % 2 == 0);\n        }\n        // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)\n        this.drawFinderPattern(3, 3);\n        this.drawFinderPattern(this.size - 4, 3);\n        this.drawFinderPattern(3, this.size - 4);\n        // Draw numerous alignment patterns\n        var alignPatPos = this.getAlignmentPatternPositions();\n        var numAlign = alignPatPos.length;\n        for (var _i3 = 0; _i3 < numAlign; _i3++) {\n          for (var j = 0; j < numAlign; j++) {\n            // Don't draw on the three finder corners\n            if (!(_i3 == 0 && j == 0 || _i3 == 0 && j == numAlign - 1 || _i3 == numAlign - 1 && j == 0)) this.drawAlignmentPattern(alignPatPos[_i3], alignPatPos[j]);\n          }\n        }\n        // Draw configuration data\n        this.drawFormatBits(0); // Dummy mask value; overwritten later in the constructor\n        this.drawVersion();\n      }\n      // Draws two copies of the format bits (with its own error correction code)\n      // based on the given mask and this object's error correction level field.\n    }, {\n      key: \"drawFormatBits\",\n      value: function drawFormatBits(mask) {\n        // Calculate error correction code and pack bits\n        var data = this.errorCorrectionLevel.formatBits << 3 | mask; // errCorrLvl is uint2, mask is uint3\n        var rem = data;\n        for (var i = 0; i < 10; i++) rem = rem << 1 ^ (rem >>> 9) * 0x537;\n        var bits = (data << 10 | rem) ^ 0x5412; // uint15\n        assert(bits >>> 15 == 0);\n        // Draw first copy\n        for (var _i4 = 0; _i4 <= 5; _i4++) this.setFunctionModule(8, _i4, getBit(bits, _i4));\n        this.setFunctionModule(8, 7, getBit(bits, 6));\n        this.setFunctionModule(8, 8, getBit(bits, 7));\n        this.setFunctionModule(7, 8, getBit(bits, 8));\n        for (var _i5 = 9; _i5 < 15; _i5++) this.setFunctionModule(14 - _i5, 8, getBit(bits, _i5));\n        // Draw second copy\n        for (var _i6 = 0; _i6 < 8; _i6++) this.setFunctionModule(this.size - 1 - _i6, 8, getBit(bits, _i6));\n        for (var _i7 = 8; _i7 < 15; _i7++) this.setFunctionModule(8, this.size - 15 + _i7, getBit(bits, _i7));\n        this.setFunctionModule(8, this.size - 8, true); // Always dark\n      }\n      // Draws two copies of the version bits (with its own error correction code),\n      // based on this object's version field, iff 7 <= version <= 40.\n    }, {\n      key: \"drawVersion\",\n      value: function drawVersion() {\n        if (this.version < 7) return;\n        // Calculate error correction code and pack bits\n        var rem = this.version; // version is uint6, in the range [7, 40]\n        for (var i = 0; i < 12; i++) rem = rem << 1 ^ (rem >>> 11) * 0x1f25;\n        var bits = this.version << 12 | rem; // uint18\n        assert(bits >>> 18 == 0);\n        // Draw two copies\n        for (var _i8 = 0; _i8 < 18; _i8++) {\n          var color = getBit(bits, _i8);\n          var a = this.size - 11 + _i8 % 3;\n          var b = Math.floor(_i8 / 3);\n          this.setFunctionModule(a, b, color);\n          this.setFunctionModule(b, a, color);\n        }\n      }\n      // Draws a 9*9 finder pattern including the border separator,\n      // with the center module at (x, y). Modules can be out of bounds.\n    }, {\n      key: \"drawFinderPattern\",\n      value: function drawFinderPattern(x, y) {\n        for (var dy = -4; dy <= 4; dy++) {\n          for (var dx = -4; dx <= 4; dx++) {\n            var dist = Math.max(Math.abs(dx), Math.abs(dy)); // Chebyshev/infinity norm\n            var xx = x + dx;\n            var yy = y + dy;\n            if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size) this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n          }\n        }\n      }\n      // Draws a 5*5 alignment pattern, with the center module\n      // at (x, y). All modules must be in bounds.\n    }, {\n      key: \"drawAlignmentPattern\",\n      value: function drawAlignmentPattern(x, y) {\n        for (var dy = -2; dy <= 2; dy++) {\n          for (var dx = -2; dx <= 2; dx++) this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n        }\n      }\n      // Sets the color of a module and marks it as a function module.\n      // Only used by the constructor. Coordinates must be in bounds.\n    }, {\n      key: \"setFunctionModule\",\n      value: function setFunctionModule(x, y, isDark) {\n        this.modules[y][x] = isDark;\n        this.isFunction[y][x] = true;\n      }\n      /*-- Private helper methods for constructor: Codewords and masking --*/\n      // Returns a new byte string representing the given data with the appropriate error correction\n      // codewords appended to it, based on this object's version and error correction level.\n    }, {\n      key: \"addEccAndInterleave\",\n      value: function addEccAndInterleave(data) {\n        var ver = this.version;\n        var ecl = this.errorCorrectionLevel;\n        if (data.length != QrCode.getNumDataCodewords(ver, ecl)) throw new RangeError('Invalid argument');\n        // Calculate parameter numbers\n        var numBlocks = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n        var blockEccLen = QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n        var rawCodewords = Math.floor(QrCode.getNumRawDataModules(ver) / 8);\n        var numShortBlocks = numBlocks - rawCodewords % numBlocks;\n        var shortBlockLen = Math.floor(rawCodewords / numBlocks);\n        // Split data into blocks and append ECC to each block\n        var blocks = [];\n        var rsDiv = QrCode.reedSolomonComputeDivisor(blockEccLen);\n        for (var i = 0, k = 0; i < numBlocks; i++) {\n          var dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n          k += dat.length;\n          var ecc = QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n          if (i < numShortBlocks) dat.push(0);\n          blocks.push(dat.concat(ecc));\n        }\n        // Interleave (not concatenate) the bytes from every block into a single sequence\n        var result = [];\n        var _loop = function _loop(_i9) {\n          blocks.forEach(function (block, j) {\n            // Skip the padding byte in short blocks\n            if (_i9 != shortBlockLen - blockEccLen || j >= numShortBlocks) result.push(block[_i9]);\n          });\n        };\n        for (var _i9 = 0; _i9 < blocks[0].length; _i9++) {\n          _loop(_i9);\n        }\n        assert(result.length == rawCodewords);\n        return result;\n      }\n      // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n      // data area of this QR Code. Function modules need to be marked off before this is called.\n    }, {\n      key: \"drawCodewords\",\n      value: function drawCodewords(data) {\n        if (data.length != Math.floor(QrCode.getNumRawDataModules(this.version) / 8)) throw new RangeError('Invalid argument');\n        var i = 0; // Bit index into the data\n        // Do the funny zigzag scan\n        for (var right = this.size - 1; right >= 1; right -= 2) {\n          // Index of right column in each column pair\n          if (right == 6) right = 5;\n          for (var vert = 0; vert < this.size; vert++) {\n            // Vertical counter\n            for (var j = 0; j < 2; j++) {\n              var x = right - j; // Actual x coordinate\n              var upward = (right + 1 & 2) == 0;\n              var y = upward ? this.size - 1 - vert : vert; // Actual y coordinate\n              if (!this.isFunction[y][x] && i < data.length * 8) {\n                this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n                i++;\n              }\n              // If this QR Code has any remainder bits (0 to 7), they were assigned as\n              // 0/false/light by the constructor and are left unchanged by this method\n            }\n          }\n        }\n\n        assert(i == data.length * 8);\n      }\n      // XORs the codeword modules in this QR Code with the given mask pattern.\n      // The function modules must be marked and the codeword bits must be drawn\n      // before masking. Due to the arithmetic of XOR, calling applyMask() with\n      // the same mask value a second time will undo the mask. A final well-formed\n      // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    }, {\n      key: \"applyMask\",\n      value: function applyMask(mask) {\n        if (mask < 0 || mask > 7) throw new RangeError('Mask value out of range');\n        for (var y = 0; y < this.size; y++) {\n          for (var x = 0; x < this.size; x++) {\n            var invert = void 0;\n            switch (mask) {\n              case 0:\n                invert = (x + y) % 2 == 0;\n                break;\n              case 1:\n                invert = y % 2 == 0;\n                break;\n              case 2:\n                invert = x % 3 == 0;\n                break;\n              case 3:\n                invert = (x + y) % 3 == 0;\n                break;\n              case 4:\n                invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n                break;\n              case 5:\n                invert = x * y % 2 + x * y % 3 == 0;\n                break;\n              case 6:\n                invert = (x * y % 2 + x * y % 3) % 2 == 0;\n                break;\n              case 7:\n                invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n                break;\n              default:\n                throw new Error('Unreachable');\n            }\n            if (!this.isFunction[y][x] && invert) this.modules[y][x] = !this.modules[y][x];\n          }\n        }\n      }\n      // Calculates and returns the penalty score based on state of this QR Code's current modules.\n      // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    }, {\n      key: \"getPenaltyScore\",\n      value: function getPenaltyScore() {\n        var result = 0;\n        // Adjacent modules in row having same color, and finder-like patterns\n        for (var y = 0; y < this.size; y++) {\n          var runColor = false;\n          var runX = 0;\n          var runHistory = [0, 0, 0, 0, 0, 0, 0];\n          for (var x = 0; x < this.size; x++) {\n            if (this.modules[y][x] == runColor) {\n              runX++;\n              if (runX == 5) result += QrCode.PENALTY_N1;else if (runX > 5) result++;\n            } else {\n              this.finderPenaltyAddHistory(runX, runHistory);\n              if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\n              runColor = this.modules[y][x];\n              runX = 1;\n            }\n          }\n          result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * QrCode.PENALTY_N3;\n        }\n        // Adjacent modules in column having same color, and finder-like patterns\n        for (var _x = 0; _x < this.size; _x++) {\n          var _runColor = false;\n          var runY = 0;\n          var _runHistory = [0, 0, 0, 0, 0, 0, 0];\n          for (var _y = 0; _y < this.size; _y++) {\n            if (this.modules[_y][_x] == _runColor) {\n              runY++;\n              if (runY == 5) result += QrCode.PENALTY_N1;else if (runY > 5) result++;\n            } else {\n              this.finderPenaltyAddHistory(runY, _runHistory);\n              if (!_runColor) result += this.finderPenaltyCountPatterns(_runHistory) * QrCode.PENALTY_N3;\n              _runColor = this.modules[_y][_x];\n              runY = 1;\n            }\n          }\n          result += this.finderPenaltyTerminateAndCount(_runColor, runY, _runHistory) * QrCode.PENALTY_N3;\n        }\n        // 2*2 blocks of modules having same color\n        for (var _y2 = 0; _y2 < this.size - 1; _y2++) {\n          for (var _x2 = 0; _x2 < this.size - 1; _x2++) {\n            var color = this.modules[_y2][_x2];\n            if (color == this.modules[_y2][_x2 + 1] && color == this.modules[_y2 + 1][_x2] && color == this.modules[_y2 + 1][_x2 + 1]) result += QrCode.PENALTY_N2;\n          }\n        }\n        // Balance of dark and light modules\n        var dark = 0;\n        var _iterator = _createForOfIteratorHelper(this.modules),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var row = _step.value;\n            dark = row.reduce(function (sum, color) {\n              return sum + (color ? 1 : 0);\n            }, dark);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        var total = this.size * this.size; // Note that size is odd, so dark/total != 1/2\n        // Compute the smallest integer k >= 0 such that (45-5k)% <= dark/total <= (55+5k)%\n        var k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n        assert(0 <= k && k <= 9);\n        result += k * QrCode.PENALTY_N4;\n        assert(0 <= result && result <= 2568888); // Non-tight upper bound based on default values of PENALTY_N1, ..., N4\n        return result;\n      }\n      /*-- Private helper functions --*/\n      // Returns an ascending list of positions of alignment patterns for this version number.\n      // Each position is in the range [0,177), and are used on both the x and y axes.\n      // This could be implemented as lookup table of 40 variable-length lists of integers.\n    }, {\n      key: \"getAlignmentPatternPositions\",\n      value: function getAlignmentPatternPositions() {\n        if (this.version == 1) return [];else {\n          var numAlign = Math.floor(this.version / 7) + 2;\n          var step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n          var result = [6];\n          for (var pos = this.size - 7; result.length < numAlign; pos -= step) result.splice(1, 0, pos);\n          return result;\n        }\n      }\n      // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n      // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n      // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n    }, {\n      key: \"finderPenaltyCountPatterns\",\n      value:\n      // Can only be called immediately after a light run is added, and\n      // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n      function finderPenaltyCountPatterns(runHistory) {\n        var n = runHistory[1];\n        assert(n <= this.size * 3);\n        var core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n        return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n      }\n      // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    }, {\n      key: \"finderPenaltyTerminateAndCount\",\n      value: function finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n        if (currentRunColor) {\n          // Terminate dark run\n          this.finderPenaltyAddHistory(currentRunLength, runHistory);\n          currentRunLength = 0;\n        }\n        currentRunLength += this.size; // Add light border to final run\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        return this.finderPenaltyCountPatterns(runHistory);\n      }\n      // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    }, {\n      key: \"finderPenaltyAddHistory\",\n      value: function finderPenaltyAddHistory(currentRunLength, runHistory) {\n        if (runHistory[0] == 0) currentRunLength += this.size; // Add light border to initial run\n        runHistory.pop();\n        runHistory.unshift(currentRunLength);\n      }\n    }], [{\n      key: \"encodeText\",\n      value: /*-- Static factory functions (high level) --*/\n      // Returns a QR Code representing the given Unicode text string at the given error correction level.\n      // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n      // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n      // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n      // ecl argument if it can be done without increasing the version.\n      function encodeText(text, ecl) {\n        var segs = qrcodegen.QrSegment.makeSegments(text);\n        return QrCode.encodeSegments(segs, ecl);\n      }\n      // Returns a QR Code representing the given binary data at the given error correction level.\n      // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n      // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n      // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n    }, {\n      key: \"encodeBinary\",\n      value: function encodeBinary(data, ecl) {\n        var seg = qrcodegen.QrSegment.makeBytes(data);\n        return QrCode.encodeSegments([seg], ecl);\n      }\n      /*-- Static factory functions (mid level) --*/\n      // Returns a QR Code representing the given segments with the given encoding parameters.\n      // The smallest possible QR Code version within the given range is automatically\n      // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n      // may be higher than the ecl argument if it can be done without increasing the\n      // version. The mask number is either between 0 to 7 (inclusive) to force that\n      // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n      // This function allows the user to create a custom sequence of segments that switches\n      // between modes (such as alphanumeric and byte) to encode text in less space.\n      // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n    }, {\n      key: \"encodeSegments\",\n      value: function encodeSegments(segs, ecl) {\n        var minVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n        var maxVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 40;\n        var mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n        var boostEcl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n        if (!(QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= QrCode.MAX_VERSION) || mask < -1 || mask > 7) throw new RangeError('Invalid value');\n        // Find the minimal version number to use\n        var version;\n        var dataUsedBits;\n        for (version = minVersion;; version++) {\n          var _dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8; // Number of data bits available\n          var usedBits = QrSegment.getTotalBits(segs, version);\n          if (usedBits <= _dataCapacityBits) {\n            dataUsedBits = usedBits;\n            break; // This version number is found to be suitable\n          }\n\n          if (version >= maxVersion)\n            // All versions in the range could not fit the given data\n            throw new RangeError('Data too long');\n        }\n        // Increase the error correction level while the data still fits in the current version number\n        for (var _i10 = 0, _arr = [QrCode.Ecc.MEDIUM, QrCode.Ecc.QUARTILE, QrCode.Ecc.HIGH]; _i10 < _arr.length; _i10++) {\n          var newEcl = _arr[_i10];\n          // From low to high\n          if (boostEcl && dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8) ecl = newEcl;\n        }\n        // Concatenate all segments to create the data bit string\n        var bb = [];\n        var _iterator2 = _createForOfIteratorHelper(segs),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var seg = _step2.value;\n            appendBits(seg.mode.modeBits, 4, bb);\n            appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n            var _iterator3 = _createForOfIteratorHelper(seg.getData()),\n              _step3;\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var b = _step3.value;\n                bb.push(b);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        assert(bb.length == dataUsedBits);\n        // Add terminator and pad up to a byte if applicable\n        var dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8;\n        assert(bb.length <= dataCapacityBits);\n        appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n        appendBits(0, (8 - bb.length % 8) % 8, bb);\n        assert(bb.length % 8 == 0);\n        // Pad with alternating bytes until data capacity is reached\n        for (var padByte = 0xec; bb.length < dataCapacityBits; padByte ^= 0xec ^ 0x11) appendBits(padByte, 8, bb);\n        // Pack bits into bytes in big endian\n        var dataCodewords = [];\n        while (dataCodewords.length * 8 < bb.length) dataCodewords.push(0);\n        bb.forEach(function (b, i) {\n          return dataCodewords[i >>> 3] |= b << 7 - (i & 7);\n        });\n        // Create the QR Code object\n        return new QrCode(version, ecl, dataCodewords, mask);\n      }\n    }, {\n      key: \"getNumRawDataModules\",\n      value: function getNumRawDataModules(ver) {\n        if (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION) throw new RangeError('Version number out of range');\n        var result = (16 * ver + 128) * ver + 64;\n        if (ver >= 2) {\n          var numAlign = Math.floor(ver / 7) + 2;\n          result -= (25 * numAlign - 10) * numAlign - 55;\n          if (ver >= 7) result -= 36;\n        }\n        assert(208 <= result && result <= 29648);\n        return result;\n      }\n      // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n      // QR Code of the given version number and error correction level, with remainder bits discarded.\n      // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n    }, {\n      key: \"getNumDataCodewords\",\n      value: function getNumDataCodewords(ver, ecl) {\n        return Math.floor(QrCode.getNumRawDataModules(ver) / 8) - QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      }\n      // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n      // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n    }, {\n      key: \"reedSolomonComputeDivisor\",\n      value: function reedSolomonComputeDivisor(degree) {\n        if (degree < 1 || degree > 255) throw new RangeError('Degree out of range');\n        // Polynomial coefficients are stored from highest to lowest power, excluding the leading term which is always 1.\n        // For example the polynomial x^3 + 255x^2 + 8x + 93 is stored as the uint8 array [255, 8, 93].\n        var result = [];\n        for (var i = 0; i < degree - 1; i++) result.push(0);\n        result.push(1); // Start off with the monomial x^0\n        // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),\n        // and drop the highest monomial term which is always 1x^degree.\n        // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).\n        var root = 1;\n        for (var _i11 = 0; _i11 < degree; _i11++) {\n          // Multiply the current product by (x - r^i)\n          for (var j = 0; j < result.length; j++) {\n            result[j] = QrCode.reedSolomonMultiply(result[j], root);\n            if (j + 1 < result.length) result[j] ^= result[j + 1];\n          }\n          root = QrCode.reedSolomonMultiply(root, 0x02);\n        }\n        return result;\n      }\n      // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n    }, {\n      key: \"reedSolomonComputeRemainder\",\n      value: function reedSolomonComputeRemainder(data, divisor) {\n        var result = divisor.map(function (_) {\n          return 0;\n        });\n        var _iterator4 = _createForOfIteratorHelper(data),\n          _step4;\n        try {\n          var _loop2 = function _loop2() {\n            var b = _step4.value;\n            // Polynomial division\n            var factor = b ^ result.shift();\n            result.push(0);\n            divisor.forEach(function (coef, i) {\n              return result[i] ^= QrCode.reedSolomonMultiply(coef, factor);\n            });\n          };\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            _loop2();\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        return result;\n      }\n      // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n      // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n    }, {\n      key: \"reedSolomonMultiply\",\n      value: function reedSolomonMultiply(x, y) {\n        if (x >>> 8 != 0 || y >>> 8 != 0) throw new RangeError('Byte out of range');\n        // Russian peasant multiplication\n        var z = 0;\n        for (var i = 7; i >= 0; i--) {\n          z = z << 1 ^ (z >>> 7) * 0x11d;\n          z ^= (y >>> i & 1) * x;\n        }\n        assert(z >>> 8 == 0);\n        return z;\n      }\n    }]);\n    return QrCode;\n  }();\n  /*-- Constants and tables --*/\n  // The minimum version number supported in the QR Code Model 2 standard.\n  QrCode.MIN_VERSION = 1;\n  // The maximum version number supported in the QR Code Model 2 standard.\n  QrCode.MAX_VERSION = 40;\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30] // High\n  ];\n\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25], [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49], [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68], [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81] // High\n  ];\n\n  qrcodegen.QrCode = QrCode;\n  // Appends the given number of low-order bits of the given value\n  // to the given buffer. Requires 0 <= len <= 31 and 0 <= val < 2^len.\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0) throw new RangeError('Value out of range');\n    for (var i = len - 1; i >= 0; i-- // Append bit by bit\n    ) bb.push(val >>> i & 1);\n  }\n  // Returns true iff the i'th bit of x is set to 1.\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  // Throws an exception if the given condition is false.\n  function assert(cond) {\n    if (!cond) throw new Error('Assertion error');\n  }\n  /*---- Data segment class ----*/\n  /*\n   * A segment of character/binary/control data in a QR Code symbol.\n   * Instances of this class are immutable.\n   * The mid-level way to create a segment is to take the payload data\n   * and call a static factory function such as QrSegment.makeNumeric().\n   * The low-level way to create a segment is to custom-make the bit buffer\n   * and call the QrSegment() constructor with appropriate values.\n   * This segment class imposes no length restrictions, but QR Codes have restrictions.\n   * Even in the most favorable conditions, a QR Code can only hold 7089 characters of data.\n   * Any segment longer than this is meaningless for the purpose of generating QR Codes.\n   */\n  var QrSegment = /*#__PURE__*/function () {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    function QrSegment(\n    // The mode indicator of this segment.\n    mode,\n    // The length of this segment's unencoded data. Measured in characters for\n    // numeric/alphanumeric/kanji mode, bytes for byte mode, and 0 for ECI mode.\n    // Always zero or positive. Not the same as the data's bit length.\n    numChars,\n    // The data bits of this segment. Accessed through getData().\n    bitData) {\n      _classCallCheck(this, QrSegment);\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0) throw new RangeError('Invalid argument');\n      this.bitData = bitData.slice(); // Make defensive copy\n    }\n    /*-- Methods --*/\n    // Returns a new copy of the data bits of this segment.\n    _createClass(QrSegment, [{\n      key: \"getData\",\n      value: function getData() {\n        return this.bitData.slice(); // Make defensive copy\n      }\n      // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n      // the given version. The result is infinity if a segment has too many characters to fit its length field.\n    }], [{\n      key: \"makeBytes\",\n      value: /*-- Static factory functions (mid level) --*/\n      // Returns a segment representing the given binary data encoded in\n      // byte mode. All input byte arrays are acceptable. Any text string\n      // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n      function makeBytes(data) {\n        var bb = [];\n        var _iterator5 = _createForOfIteratorHelper(data),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var b = _step5.value;\n            appendBits(b, 8, bb);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n        return new QrSegment(QrSegment.Mode.BYTE, data.length, bb);\n      }\n      // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n    }, {\n      key: \"makeNumeric\",\n      value: function makeNumeric(digits) {\n        if (!QrSegment.isNumeric(digits)) throw new RangeError('String contains non-numeric characters');\n        var bb = [];\n        for (var i = 0; i < digits.length;) {\n          // Consume up to 3 digits per iteration\n          var n = Math.min(digits.length - i, 3);\n          appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n          i += n;\n        }\n        return new QrSegment(QrSegment.Mode.NUMERIC, digits.length, bb);\n      }\n      // Returns a segment representing the given text string encoded in alphanumeric mode.\n      // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n      // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    }, {\n      key: \"makeAlphanumeric\",\n      value: function makeAlphanumeric(text) {\n        if (!QrSegment.isAlphanumeric(text)) throw new RangeError('String contains unencodable characters in alphanumeric mode');\n        var bb = [];\n        var i;\n        for (i = 0; i + 2 <= text.length; i += 2) {\n          // Process groups of 2\n          var temp = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n          temp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n          appendBits(temp, 11, bb);\n        }\n        if (i < text.length)\n          // 1 character remaining\n          appendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n        return new QrSegment(QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n      }\n      // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n      // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n    }, {\n      key: \"makeSegments\",\n      value: function makeSegments(text) {\n        // Select the most efficient segment encoding automatically\n        if (text == '') return [];else if (QrSegment.isNumeric(text)) return [QrSegment.makeNumeric(text)];else if (QrSegment.isAlphanumeric(text)) return [QrSegment.makeAlphanumeric(text)];else return [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))];\n      }\n      // Returns a segment representing an Extended Channel Interpretation\n      // (ECI) designator with the given assignment value.\n    }, {\n      key: \"makeEci\",\n      value: function makeEci(assignVal) {\n        var bb = [];\n        if (assignVal < 0) throw new RangeError('ECI assignment value out of range');else if (assignVal < 1 << 7) appendBits(assignVal, 8, bb);else if (assignVal < 1 << 14) {\n          appendBits(2, 2, bb);\n          appendBits(assignVal, 14, bb);\n        } else if (assignVal < 1000000) {\n          appendBits(6, 3, bb);\n          appendBits(assignVal, 21, bb);\n        } else throw new RangeError('ECI assignment value out of range');\n        return new QrSegment(QrSegment.Mode.ECI, 0, bb);\n      }\n      // Tests whether the given string can be encoded as a segment in numeric mode.\n      // A string is encodable iff each character is in the range 0 to 9.\n    }, {\n      key: \"isNumeric\",\n      value: function isNumeric(text) {\n        return QrSegment.NUMERIC_REGEX.test(text);\n      }\n      // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n      // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n      // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    }, {\n      key: \"isAlphanumeric\",\n      value: function isAlphanumeric(text) {\n        return QrSegment.ALPHANUMERIC_REGEX.test(text);\n      }\n    }, {\n      key: \"getTotalBits\",\n      value: function getTotalBits(segs, version) {\n        var result = 0;\n        var _iterator6 = _createForOfIteratorHelper(segs),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var seg = _step6.value;\n            var ccbits = seg.mode.numCharCountBits(version);\n            if (seg.numChars >= 1 << ccbits) return Infinity; // The segment's length doesn't fit the field's bit width\n            result += 4 + ccbits + seg.bitData.length;\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n        return result;\n      }\n      // Returns a new array of bytes representing the given string encoded in UTF-8.\n    }, {\n      key: \"toUtf8ByteArray\",\n      value: function toUtf8ByteArray(str) {\n        str = encodeURI(str);\n        var result = [];\n        for (var i = 0; i < str.length; i++) {\n          if (str.charAt(i) != '%') result.push(str.charCodeAt(i));else {\n            result.push(parseInt(str.substring(i + 1, i + 3), 16));\n            i += 2;\n          }\n        }\n        return result;\n      }\n    }]);\n    return QrSegment;\n  }();\n  /*-- Constants --*/\n  // Describes precisely all strings that are encodable in numeric mode.\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  QrSegment.ALPHANUMERIC_CHARSET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';\n  qrcodegen.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n/*---- Public helper enumeration ----*/\n(function (qrcodegen) {\n  var QrCode;\n  (function (QrCode) {\n    /*\n     * The error correction level in a QR Code symbol. Immutable.\n     */\n    var Ecc = /*#__PURE__*/_createClass( /*-- Constructor and fields --*/\n    function Ecc(\n    // In the range 0 to 3 (unsigned 2-bit integer).\n    ordinal,\n    // (Package-private) In the range 0 to 3 (unsigned 2-bit integer).\n    formatBits) {\n      _classCallCheck(this, Ecc);\n      this.ordinal = ordinal;\n      this.formatBits = formatBits;\n    });\n    /*-- Constants --*/\n    Ecc.LOW = new Ecc(0, 1); // The QR Code can tolerate about  7% erroneous codewords\n    Ecc.MEDIUM = new Ecc(1, 0); // The QR Code can tolerate about 15% erroneous codewords\n    Ecc.QUARTILE = new Ecc(2, 3); // The QR Code can tolerate about 25% erroneous codewords\n    Ecc.HIGH = new Ecc(3, 2); // The QR Code can tolerate about 30% erroneous codewords\n    QrCode.Ecc = Ecc;\n  })(QrCode = qrcodegen.QrCode || (qrcodegen.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n/*---- Public helper enumeration ----*/\n(function (qrcodegen) {\n  var QrSegment;\n  (function (QrSegment) {\n    /*\n     * Describes how a segment's data bits are interpreted. Immutable.\n     */\n    var Mode = /*#__PURE__*/function () {\n      /*-- Constructor and fields --*/\n      function Mode(\n      // The mode indicator bits, which is a uint4 value (range 0 to 15).\n      modeBits,\n      // Number of character count bits for three different version ranges.\n      numBitsCharCount) {\n        _classCallCheck(this, Mode);\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      /*-- Method --*/\n      // (Package-private) Returns the bit width of the character count field for a segment in\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n      _createClass(Mode, [{\n        key: \"numCharCountBits\",\n        value: function numCharCountBits(ver) {\n          return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n        }\n      }]);\n      return Mode;\n    }();\n    /*-- Constants --*/\n    Mode.NUMERIC = new Mode(0x1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new Mode(0x2, [9, 11, 13]);\n    Mode.BYTE = new Mode(0x4, [8, 16, 16]);\n    Mode.KANJI = new Mode(0x8, [8, 10, 12]);\n    Mode.ECI = new Mode(0x7, [0, 0, 0]);\n    QrSegment.Mode = Mode;\n  })(QrSegment = qrcodegen.QrSegment || (qrcodegen.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\n// Modification to export for actual use\nexport default qrcodegen;","map":{"version":3,"names":["_createForOfIteratorHelper","_classCallCheck","_createClass","qrcodegen","QrCode","version","errorCorrectionLevel","dataCodewords","msk","modules","isFunction","MIN_VERSION","MAX_VERSION","RangeError","size","row","i","push","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","key","value","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","length","j","drawAlignmentPattern","drawVersion","data","formatBits","rem","bits","getBit","color","a","b","Math","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","ecl","getNumDataCodewords","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","_loop","_i9","forEach","block","right","vert","upward","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","_iterator","_step","s","n","done","reduce","sum","err","e","f","total","ceil","PENALTY_N4","step","pos","splice","core","currentRunColor","currentRunLength","pop","unshift","encodeText","text","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","seg","makeBytes","minVersion","arguments","undefined","maxVersion","boostEcl","dataUsedBits","dataCapacityBits","usedBits","getTotalBits","_i10","_arr","Ecc","MEDIUM","QUARTILE","HIGH","newEcl","bb","_iterator2","_step2","appendBits","mode","modeBits","numChars","numCharCountBits","_iterator3","getData","_step3","min","padByte","degree","root","reedSolomonMultiply","divisor","map","_","_iterator4","_step4","_loop2","factor","shift","coef","z","val","len","cond","bitData","_iterator5","_step5","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substring","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","indexOf","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","_iterator6","_step6","ccbits","Infinity","str","encodeURI","charCodeAt","LOW","numBitsCharCount","KANJI"],"sources":["C:/Users/zhouy/WebstormProjects/lingo/node_modules/ant-design-vue/es/qrcode/qrcodegen.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-namespace */\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\n'use strict';\n\nvar qrcodegen;\n(function (qrcodegen) {\n  /*---- QR Code symbol class ----*/\n  /*\n   * A QR Code symbol, which is a type of two-dimension barcode.\n   * Invented by Denso Wave and described in the ISO/IEC 18004 standard.\n   * Instances of this class represent an immutable square grid of dark and light cells.\n   * The class provides static factory functions to create a QR Code from text or binary data.\n   * The class covers the QR Code Model 2 specification, supporting all versions (sizes)\n   * from 1 to 40, all 4 error correction levels, and 4 character encoding modes.\n   *\n   * Ways to create a QR Code object:\n   * - High level: Take the payload data and call QrCode.encodeText() or QrCode.encodeBinary().\n   * - Mid level: Custom-make the list of segments and call QrCode.encodeSegments().\n   * - Low level: Custom-make the array of data codeword bytes (including\n   *   segment headers and final padding, excluding error correction codewords),\n   *   supply the appropriate version number, and call the QrCode() constructor.\n   * (Note that all ways require supplying the desired error correction level.)\n   */\n  class QrCode {\n    /*-- Static factory functions (high level) --*/\n    // Returns a QR Code representing the given Unicode text string at the given error correction level.\n    // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n    // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n    // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n    // ecl argument if it can be done without increasing the version.\n    static encodeText(text, ecl) {\n      const segs = qrcodegen.QrSegment.makeSegments(text);\n      return QrCode.encodeSegments(segs, ecl);\n    }\n    // Returns a QR Code representing the given binary data at the given error correction level.\n    // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n    // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n    // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen.QrSegment.makeBytes(data);\n      return QrCode.encodeSegments([seg], ecl);\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a QR Code representing the given segments with the given encoding parameters.\n    // The smallest possible QR Code version within the given range is automatically\n    // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n    // may be higher than the ecl argument if it can be done without increasing the\n    // version. The mask number is either between 0 to 7 (inclusive) to force that\n    // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n    // This function allows the user to create a custom sequence of segments that switches\n    // between modes (such as alphanumeric and byte) to encode text in less space.\n    // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n    static encodeSegments(segs, ecl) {\n      let minVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let maxVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 40;\n      let mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n      let boostEcl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n      if (!(QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= QrCode.MAX_VERSION) || mask < -1 || mask > 7) throw new RangeError('Invalid value');\n      // Find the minimal version number to use\n      let version;\n      let dataUsedBits;\n      for (version = minVersion;; version++) {\n        const dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8; // Number of data bits available\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits) {\n          dataUsedBits = usedBits;\n          break; // This version number is found to be suitable\n        }\n\n        if (version >= maxVersion)\n          // All versions in the range could not fit the given data\n          throw new RangeError('Data too long');\n      }\n      // Increase the error correction level while the data still fits in the current version number\n      for (const newEcl of [QrCode.Ecc.MEDIUM, QrCode.Ecc.QUARTILE, QrCode.Ecc.HIGH]) {\n        // From low to high\n        if (boostEcl && dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8) ecl = newEcl;\n      }\n      // Concatenate all segments to create the data bit string\n      const bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData()) bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      // Add terminator and pad up to a byte if applicable\n      const dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      // Pad with alternating bytes until data capacity is reached\n      for (let padByte = 0xec; bb.length < dataCapacityBits; padByte ^= 0xec ^ 0x11) appendBits(padByte, 8, bb);\n      // Pack bits into bytes in big endian\n      const dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length) dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      // Create the QR Code object\n      return new QrCode(version, ecl, dataCodewords, mask);\n    }\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    constructor(\n    // The version number of this QR Code, which is between 1 and 40 (inclusive).\n    // This determines the size of this barcode.\n    version,\n    // The error correction level used in this QR Code.\n    errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      // The modules of this QR Code (false = light, true = dark).\n      // Immutable after constructor finishes. Accessed through getModule().\n      this.modules = [];\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n      this.isFunction = [];\n      // Check scalar arguments\n      if (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION) throw new RangeError('Version value out of range');\n      if (msk < -1 || msk > 7) throw new RangeError('Mask value out of range');\n      this.size = version * 4 + 17;\n      // Initialize both grids to be size*size arrays of Boolean false\n      const row = [];\n      for (let i = 0; i < this.size; i++) row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice()); // Initially all light\n        this.isFunction.push(row.slice());\n      }\n      // Compute ECC, draw modules\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      // Do masking\n      if (msk == -1) {\n        // Automatically choose best mask\n        let minPenalty = 1000000000;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i); // Undoes the mask due to XOR\n        }\n      }\n\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk); // Apply the final choice of mask\n      this.drawFormatBits(msk); // Overwrite old format bits\n      this.isFunction = [];\n    }\n    /*-- Accessor methods --*/\n    // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    // Modified to expose modules for easy access\n    getModules() {\n      return this.modules;\n    }\n    /*-- Private helper methods for constructor: Drawing function modules --*/\n    // Reads this object's version field, and draws and marks all function modules.\n    drawFunctionPatterns() {\n      // Draw horizontal and vertical timing patterns\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      // Draw numerous alignment patterns\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          // Don't draw on the three finder corners\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0)) this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      // Draw configuration data\n      this.drawFormatBits(0); // Dummy mask value; overwritten later in the constructor\n      this.drawVersion();\n    }\n    // Draws two copies of the format bits (with its own error correction code)\n    // based on the given mask and this object's error correction level field.\n    drawFormatBits(mask) {\n      // Calculate error correction code and pack bits\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask; // errCorrLvl is uint2, mask is uint3\n      let rem = data;\n      for (let i = 0; i < 10; i++) rem = rem << 1 ^ (rem >>> 9) * 0x537;\n      const bits = (data << 10 | rem) ^ 0x5412; // uint15\n      assert(bits >>> 15 == 0);\n      // Draw first copy\n      for (let i = 0; i <= 5; i++) this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++) this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      // Draw second copy\n      for (let i = 0; i < 8; i++) this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++) this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true); // Always dark\n    }\n    // Draws two copies of the version bits (with its own error correction code),\n    // based on this object's version field, iff 7 <= version <= 40.\n    drawVersion() {\n      if (this.version < 7) return;\n      // Calculate error correction code and pack bits\n      let rem = this.version; // version is uint6, in the range [7, 40]\n      for (let i = 0; i < 12; i++) rem = rem << 1 ^ (rem >>> 11) * 0x1f25;\n      const bits = this.version << 12 | rem; // uint18\n      assert(bits >>> 18 == 0);\n      // Draw two copies\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    // Draws a 9*9 finder pattern including the border separator,\n    // with the center module at (x, y). Modules can be out of bounds.\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy)); // Chebyshev/infinity norm\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size) this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    // Draws a 5*5 alignment pattern, with the center module\n    // at (x, y). All modules must be in bounds.\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++) this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    // Sets the color of a module and marks it as a function module.\n    // Only used by the constructor. Coordinates must be in bounds.\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    /*-- Private helper methods for constructor: Codewords and masking --*/\n    // Returns a new byte string representing the given data with the appropriate error correction\n    // codewords appended to it, based on this object's version and error correction level.\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != QrCode.getNumDataCodewords(ver, ecl)) throw new RangeError('Invalid argument');\n      // Calculate parameter numbers\n      const numBlocks = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      // Split data into blocks and append ECC to each block\n      const blocks = [];\n      const rsDiv = QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        const dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks) dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      // Interleave (not concatenate) the bytes from every block into a single sequence\n      const result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          // Skip the padding byte in short blocks\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks) result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n    // data area of this QR Code. Function modules need to be marked off before this is called.\n    drawCodewords(data) {\n      if (data.length != Math.floor(QrCode.getNumRawDataModules(this.version) / 8)) throw new RangeError('Invalid argument');\n      let i = 0; // Bit index into the data\n      // Do the funny zigzag scan\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        // Index of right column in each column pair\n        if (right == 6) right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          // Vertical counter\n          for (let j = 0; j < 2; j++) {\n            const x = right - j; // Actual x coordinate\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert; // Actual y coordinate\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n            // If this QR Code has any remainder bits (0 to 7), they were assigned as\n            // 0/false/light by the constructor and are left unchanged by this method\n          }\n        }\n      }\n\n      assert(i == data.length * 8);\n    }\n    // XORs the codeword modules in this QR Code with the given mask pattern.\n    // The function modules must be marked and the codeword bits must be drawn\n    // before masking. Due to the arithmetic of XOR, calling applyMask() with\n    // the same mask value a second time will undo the mask. A final well-formed\n    // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    applyMask(mask) {\n      if (mask < 0 || mask > 7) throw new RangeError('Mask value out of range');\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error('Unreachable');\n          }\n          if (!this.isFunction[y][x] && invert) this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    // Calculates and returns the penalty score based on state of this QR Code's current modules.\n    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    getPenaltyScore() {\n      let result = 0;\n      // Adjacent modules in row having same color, and finder-like patterns\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        const runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5) result += QrCode.PENALTY_N1;else if (runX > 5) result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * QrCode.PENALTY_N3;\n      }\n      // Adjacent modules in column having same color, and finder-like patterns\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        const runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5) result += QrCode.PENALTY_N1;else if (runY > 5) result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * QrCode.PENALTY_N3;\n      }\n      // 2*2 blocks of modules having same color\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1]) result += QrCode.PENALTY_N2;\n        }\n      }\n      // Balance of dark and light modules\n      let dark = 0;\n      for (const row of this.modules) dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size; // Note that size is odd, so dark/total != 1/2\n      // Compute the smallest integer k >= 0 such that (45-5k)% <= dark/total <= (55+5k)%\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888); // Non-tight upper bound based on default values of PENALTY_N1, ..., N4\n      return result;\n    }\n    /*-- Private helper functions --*/\n    // Returns an ascending list of positions of alignment patterns for this version number.\n    // Each position is in the range [0,177), and are used on both the x and y axes.\n    // This could be implemented as lookup table of 40 variable-length lists of integers.\n    getAlignmentPatternPositions() {\n      if (this.version == 1) return [];else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        const result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step) result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n    // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n    // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n    static getNumRawDataModules(ver) {\n      if (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION) throw new RangeError('Version number out of range');\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7) result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n    // QR Code of the given version number and error correction level, with remainder bits discarded.\n    // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(QrCode.getNumRawDataModules(ver) / 8) - QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n    // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255) throw new RangeError('Degree out of range');\n      // Polynomial coefficients are stored from highest to lowest power, excluding the leading term which is always 1.\n      // For example the polynomial x^3 + 255x^2 + 8x + 93 is stored as the uint8 array [255, 8, 93].\n      const result = [];\n      for (let i = 0; i < degree - 1; i++) result.push(0);\n      result.push(1); // Start off with the monomial x^0\n      // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),\n      // and drop the highest monomial term which is always 1x^degree.\n      // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        // Multiply the current product by (x - r^i)\n        for (let j = 0; j < result.length; j++) {\n          result[j] = QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length) result[j] ^= result[j + 1];\n        }\n        root = QrCode.reedSolomonMultiply(root, 0x02);\n      }\n      return result;\n    }\n    // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n    static reedSolomonComputeRemainder(data, divisor) {\n      const result = divisor.map(_ => 0);\n      for (const b of data) {\n        // Polynomial division\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n    // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0) throw new RangeError('Byte out of range');\n      // Russian peasant multiplication\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 0x11d;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    // Can only be called immediately after a light run is added, and\n    // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        // Terminate dark run\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size; // Add light border to final run\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0) currentRunLength += this.size; // Add light border to initial run\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  }\n  /*-- Constants and tables --*/\n  // The minimum version number supported in the QR Code Model 2 standard.\n  QrCode.MIN_VERSION = 1;\n  // The maximum version number supported in the QR Code Model 2 standard.\n  QrCode.MAX_VERSION = 40;\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30] // High\n  ];\n\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25], [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49], [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68], [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81] // High\n  ];\n\n  qrcodegen.QrCode = QrCode;\n  // Appends the given number of low-order bits of the given value\n  // to the given buffer. Requires 0 <= len <= 31 and 0 <= val < 2^len.\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0) throw new RangeError('Value out of range');\n    for (let i = len - 1; i >= 0; i-- // Append bit by bit\n    ) bb.push(val >>> i & 1);\n  }\n  // Returns true iff the i'th bit of x is set to 1.\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  // Throws an exception if the given condition is false.\n  function assert(cond) {\n    if (!cond) throw new Error('Assertion error');\n  }\n  /*---- Data segment class ----*/\n  /*\n   * A segment of character/binary/control data in a QR Code symbol.\n   * Instances of this class are immutable.\n   * The mid-level way to create a segment is to take the payload data\n   * and call a static factory function such as QrSegment.makeNumeric().\n   * The low-level way to create a segment is to custom-make the bit buffer\n   * and call the QrSegment() constructor with appropriate values.\n   * This segment class imposes no length restrictions, but QR Codes have restrictions.\n   * Even in the most favorable conditions, a QR Code can only hold 7089 characters of data.\n   * Any segment longer than this is meaningless for the purpose of generating QR Codes.\n   */\n  class QrSegment {\n    /*-- Static factory functions (mid level) --*/\n    // Returns a segment representing the given binary data encoded in\n    // byte mode. All input byte arrays are acceptable. Any text string\n    // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n    static makeBytes(data) {\n      const bb = [];\n      for (const b of data) appendBits(b, 8, bb);\n      return new QrSegment(QrSegment.Mode.BYTE, data.length, bb);\n    }\n    // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n    static makeNumeric(digits) {\n      if (!QrSegment.isNumeric(digits)) throw new RangeError('String contains non-numeric characters');\n      const bb = [];\n      for (let i = 0; i < digits.length;) {\n        // Consume up to 3 digits per iteration\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new QrSegment(QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    // Returns a segment representing the given text string encoded in alphanumeric mode.\n    // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n    // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static makeAlphanumeric(text) {\n      if (!QrSegment.isAlphanumeric(text)) throw new RangeError('String contains unencodable characters in alphanumeric mode');\n      const bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        // Process groups of 2\n        let temp = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        // 1 character remaining\n        appendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new QrSegment(QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n    // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n    static makeSegments(text) {\n      // Select the most efficient segment encoding automatically\n      if (text == '') return [];else if (QrSegment.isNumeric(text)) return [QrSegment.makeNumeric(text)];else if (QrSegment.isAlphanumeric(text)) return [QrSegment.makeAlphanumeric(text)];else return [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))];\n    }\n    // Returns a segment representing an Extended Channel Interpretation\n    // (ECI) designator with the given assignment value.\n    static makeEci(assignVal) {\n      const bb = [];\n      if (assignVal < 0) throw new RangeError('ECI assignment value out of range');else if (assignVal < 1 << 7) appendBits(assignVal, 8, bb);else if (assignVal < 1 << 14) {\n        appendBits(0b10, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1000000) {\n        appendBits(0b110, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else throw new RangeError('ECI assignment value out of range');\n      return new QrSegment(QrSegment.Mode.ECI, 0, bb);\n    }\n    // Tests whether the given string can be encoded as a segment in numeric mode.\n    // A string is encodable iff each character is in the range 0 to 9.\n    static isNumeric(text) {\n      return QrSegment.NUMERIC_REGEX.test(text);\n    }\n    // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n    // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n    // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static isAlphanumeric(text) {\n      return QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    constructor(\n    // The mode indicator of this segment.\n    mode,\n    // The length of this segment's unencoded data. Measured in characters for\n    // numeric/alphanumeric/kanji mode, bytes for byte mode, and 0 for ECI mode.\n    // Always zero or positive. Not the same as the data's bit length.\n    numChars,\n    // The data bits of this segment. Accessed through getData().\n    bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0) throw new RangeError('Invalid argument');\n      this.bitData = bitData.slice(); // Make defensive copy\n    }\n    /*-- Methods --*/\n    // Returns a new copy of the data bits of this segment.\n    getData() {\n      return this.bitData.slice(); // Make defensive copy\n    }\n    // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n    // the given version. The result is infinity if a segment has too many characters to fit its length field.\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits) return Infinity; // The segment's length doesn't fit the field's bit width\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    // Returns a new array of bytes representing the given string encoded in UTF-8.\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      const result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != '%') result.push(str.charCodeAt(i));else {\n          result.push(parseInt(str.substring(i + 1, i + 3), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  }\n  /*-- Constants --*/\n  // Describes precisely all strings that are encodable in numeric mode.\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  QrSegment.ALPHANUMERIC_CHARSET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';\n  qrcodegen.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n/*---- Public helper enumeration ----*/\n(function (qrcodegen) {\n  var QrCode;\n  (function (QrCode) {\n    /*\n     * The error correction level in a QR Code symbol. Immutable.\n     */\n    class Ecc {\n      /*-- Constructor and fields --*/\n      constructor(\n      // In the range 0 to 3 (unsigned 2-bit integer).\n      ordinal,\n      // (Package-private) In the range 0 to 3 (unsigned 2-bit integer).\n      formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    }\n    /*-- Constants --*/\n    Ecc.LOW = new Ecc(0, 1); // The QR Code can tolerate about  7% erroneous codewords\n    Ecc.MEDIUM = new Ecc(1, 0); // The QR Code can tolerate about 15% erroneous codewords\n    Ecc.QUARTILE = new Ecc(2, 3); // The QR Code can tolerate about 25% erroneous codewords\n    Ecc.HIGH = new Ecc(3, 2); // The QR Code can tolerate about 30% erroneous codewords\n    QrCode.Ecc = Ecc;\n  })(QrCode = qrcodegen.QrCode || (qrcodegen.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n/*---- Public helper enumeration ----*/\n(function (qrcodegen) {\n  var QrSegment;\n  (function (QrSegment) {\n    /*\n     * Describes how a segment's data bits are interpreted. Immutable.\n     */\n    class Mode {\n      /*-- Constructor and fields --*/\n      constructor(\n      // The mode indicator bits, which is a uint4 value (range 0 to 15).\n      modeBits,\n      // Number of character count bits for three different version ranges.\n      numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      /*-- Method --*/\n      // (Package-private) Returns the bit width of the character count field for a segment in\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    }\n    /*-- Constants --*/\n    Mode.NUMERIC = new Mode(0x1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new Mode(0x2, [9, 11, 13]);\n    Mode.BYTE = new Mode(0x4, [8, 16, 16]);\n    Mode.KANJI = new Mode(0x8, [8, 10, 12]);\n    Mode.ECI = new Mode(0x7, [0, 0, 0]);\n    QrSegment.Mode = Mode;\n  })(QrSegment = qrcodegen.QrSegment || (qrcodegen.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\n// Modification to export for actual use\nexport default qrcodegen;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAAC,OAAAA,0BAAA;AAAA,OAAAC,eAAA;AAAA,OAAAC,YAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEb,IAAIC,SAAS;AACb,CAAC,UAAUA,SAAS,EAAE;EACpB;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAfE,IAgBMC,MAAM;IA8EV;IACA;IACA;IACA;IACA;IACA,SAAAA;IACA;IACA;IACAC,OAAO;IACP;IACAC,oBAAoB,EAAEC,aAAa,EAAEC,GAAG,EAAE;MAAAP,eAAA,OAAAG,MAAA;MACxC,IAAI,CAACC,OAAO,GAAGA,OAAO;MACtB,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;MAChD;MACA;MACA,IAAI,CAACG,OAAO,GAAG,EAAE;MACjB;MACA,IAAI,CAACC,UAAU,GAAG,EAAE;MACpB;MACA,IAAIL,OAAO,GAAGD,MAAM,CAACO,WAAW,IAAIN,OAAO,GAAGD,MAAM,CAACQ,WAAW,EAAE,MAAM,IAAIC,UAAU,CAAC,4BAA4B,CAAC;MACpH,IAAIL,GAAG,GAAG,CAAC,CAAC,IAAIA,GAAG,GAAG,CAAC,EAAE,MAAM,IAAIK,UAAU,CAAC,yBAAyB,CAAC;MACxE,IAAI,CAACC,IAAI,GAAGT,OAAO,GAAG,CAAC,GAAG,EAAE;MAC5B;MACA,IAAMU,GAAG,GAAG,EAAE;MACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACF,IAAI,EAAEE,CAAC,EAAE,EAAED,GAAG,CAACE,IAAI,CAAC,KAAK,CAAC;MACnD,KAAK,IAAID,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG,IAAI,CAACF,IAAI,EAAEE,EAAC,EAAE,EAAE;QAClC,IAAI,CAACP,OAAO,CAACQ,IAAI,CAACF,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAChC,IAAI,CAACR,UAAU,CAACO,IAAI,CAACF,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC;MACnC;MACA;MACA,IAAI,CAACC,oBAAoB,CAAC,CAAC;MAC3B,IAAMC,YAAY,GAAG,IAAI,CAACC,mBAAmB,CAACd,aAAa,CAAC;MAC5D,IAAI,CAACe,aAAa,CAACF,YAAY,CAAC;MAChC;MACA,IAAIZ,GAAG,IAAI,CAAC,CAAC,EAAE;QACb;QACA,IAAIe,UAAU,GAAG,UAAU;QAC3B,KAAK,IAAIP,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,CAAC,EAAEA,GAAC,EAAE,EAAE;UAC1B,IAAI,CAACQ,SAAS,CAACR,GAAC,CAAC;UACjB,IAAI,CAACS,cAAc,CAACT,GAAC,CAAC;UACtB,IAAMU,OAAO,GAAG,IAAI,CAACC,eAAe,CAAC,CAAC;UACtC,IAAID,OAAO,GAAGH,UAAU,EAAE;YACxBf,GAAG,GAAGQ,GAAC;YACPO,UAAU,GAAGG,OAAO;UACtB;UACA,IAAI,CAACF,SAAS,CAACR,GAAC,CAAC,CAAC,CAAC;QACrB;MACF;;MAEAY,MAAM,CAAC,CAAC,IAAIpB,GAAG,IAAIA,GAAG,IAAI,CAAC,CAAC;MAC5B,IAAI,CAACqB,IAAI,GAAGrB,GAAG;MACf,IAAI,CAACgB,SAAS,CAAChB,GAAG,CAAC,CAAC,CAAC;MACrB,IAAI,CAACiB,cAAc,CAACjB,GAAG,CAAC,CAAC,CAAC;MAC1B,IAAI,CAACE,UAAU,GAAG,EAAE;IACtB;IACA;IACA;IACA;IACA;IAAAR,YAAA,CAAAE,MAAA;MAAA0B,GAAA;MAAAC,KAAA,EACA,SAAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;QACd,OAAO,CAAC,IAAID,CAAC,IAAIA,CAAC,GAAG,IAAI,CAACnB,IAAI,IAAI,CAAC,IAAIoB,CAAC,IAAIA,CAAC,GAAG,IAAI,CAACpB,IAAI,IAAI,IAAI,CAACL,OAAO,CAACyB,CAAC,CAAC,CAACD,CAAC,CAAC;MACjF;MACA;IAAA;MAAAH,GAAA;MAAAC,KAAA,EACA,SAAAI,WAAA,EAAa;QACX,OAAO,IAAI,CAAC1B,OAAO;MACrB;MACA;MACA;IAAA;MAAAqB,GAAA;MAAAC,KAAA,EACA,SAAAZ,qBAAA,EAAuB;QACrB;QACA,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACF,IAAI,EAAEE,CAAC,EAAE,EAAE;UAClC,IAAI,CAACoB,iBAAiB,CAAC,CAAC,EAAEpB,CAAC,EAAEA,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;UACxC,IAAI,CAACoB,iBAAiB,CAACpB,CAAC,EAAE,CAAC,EAAEA,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1C;QACA;QACA,IAAI,CAACqB,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC;QAC5B,IAAI,CAACA,iBAAiB,CAAC,IAAI,CAACvB,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC;QACxC,IAAI,CAACuB,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAACvB,IAAI,GAAG,CAAC,CAAC;QACxC;QACA,IAAMwB,WAAW,GAAG,IAAI,CAACC,4BAA4B,CAAC,CAAC;QACvD,IAAMC,QAAQ,GAAGF,WAAW,CAACG,MAAM;QACnC,KAAK,IAAIzB,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGwB,QAAQ,EAAExB,GAAC,EAAE,EAAE;UACjC,KAAK,IAAI0B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;YACjC;YACA,IAAI,EAAE1B,GAAC,IAAI,CAAC,IAAI0B,CAAC,IAAI,CAAC,IAAI1B,GAAC,IAAI,CAAC,IAAI0B,CAAC,IAAIF,QAAQ,GAAG,CAAC,IAAIxB,GAAC,IAAIwB,QAAQ,GAAG,CAAC,IAAIE,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAACC,oBAAoB,CAACL,WAAW,CAACtB,GAAC,CAAC,EAAEsB,WAAW,CAACI,CAAC,CAAC,CAAC;UAClJ;QACF;QACA;QACA,IAAI,CAACjB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;QACxB,IAAI,CAACmB,WAAW,CAAC,CAAC;MACpB;MACA;MACA;IAAA;MAAAd,GAAA;MAAAC,KAAA,EACA,SAAAN,eAAeI,IAAI,EAAE;QACnB;QACA,IAAMgB,IAAI,GAAG,IAAI,CAACvC,oBAAoB,CAACwC,UAAU,IAAI,CAAC,GAAGjB,IAAI,CAAC,CAAC;QAC/D,IAAIkB,GAAG,GAAGF,IAAI;QACd,KAAK,IAAI7B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE+B,GAAG,GAAGA,GAAG,IAAI,CAAC,GAAG,CAACA,GAAG,KAAK,CAAC,IAAI,KAAK;QACjE,IAAMC,IAAI,GAAG,CAACH,IAAI,IAAI,EAAE,GAAGE,GAAG,IAAI,MAAM,CAAC,CAAC;QAC1CnB,MAAM,CAACoB,IAAI,KAAK,EAAE,IAAI,CAAC,CAAC;QACxB;QACA,KAAK,IAAIhC,GAAC,GAAG,CAAC,EAAEA,GAAC,IAAI,CAAC,EAAEA,GAAC,EAAE,EAAE,IAAI,CAACoB,iBAAiB,CAAC,CAAC,EAAEpB,GAAC,EAAEiC,MAAM,CAACD,IAAI,EAAEhC,GAAC,CAAC,CAAC;QAC1E,IAAI,CAACoB,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAEa,MAAM,CAACD,IAAI,EAAE,CAAC,CAAC,CAAC;QAC7C,IAAI,CAACZ,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAEa,MAAM,CAACD,IAAI,EAAE,CAAC,CAAC,CAAC;QAC7C,IAAI,CAACZ,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAEa,MAAM,CAACD,IAAI,EAAE,CAAC,CAAC,CAAC;QAC7C,KAAK,IAAIhC,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,EAAE,EAAEA,GAAC,EAAE,EAAE,IAAI,CAACoB,iBAAiB,CAAC,EAAE,GAAGpB,GAAC,EAAE,CAAC,EAAEiC,MAAM,CAACD,IAAI,EAAEhC,GAAC,CAAC,CAAC;QAC/E;QACA,KAAK,IAAIA,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,CAAC,EAAEA,GAAC,EAAE,EAAE,IAAI,CAACoB,iBAAiB,CAAC,IAAI,CAACtB,IAAI,GAAG,CAAC,GAAGE,GAAC,EAAE,CAAC,EAAEiC,MAAM,CAACD,IAAI,EAAEhC,GAAC,CAAC,CAAC;QACzF,KAAK,IAAIA,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,EAAE,EAAEA,GAAC,EAAE,EAAE,IAAI,CAACoB,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAACtB,IAAI,GAAG,EAAE,GAAGE,GAAC,EAAEiC,MAAM,CAACD,IAAI,EAAEhC,GAAC,CAAC,CAAC;QAC3F,IAAI,CAACoB,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAACtB,IAAI,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MAClD;MACA;MACA;IAAA;MAAAgB,GAAA;MAAAC,KAAA,EACA,SAAAa,YAAA,EAAc;QACZ,IAAI,IAAI,CAACvC,OAAO,GAAG,CAAC,EAAE;QACtB;QACA,IAAI0C,GAAG,GAAG,IAAI,CAAC1C,OAAO,CAAC,CAAC;QACxB,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE+B,GAAG,GAAGA,GAAG,IAAI,CAAC,GAAG,CAACA,GAAG,KAAK,EAAE,IAAI,MAAM;QACnE,IAAMC,IAAI,GAAG,IAAI,CAAC3C,OAAO,IAAI,EAAE,GAAG0C,GAAG,CAAC,CAAC;QACvCnB,MAAM,CAACoB,IAAI,KAAK,EAAE,IAAI,CAAC,CAAC;QACxB;QACA,KAAK,IAAIhC,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,EAAE,EAAEA,GAAC,EAAE,EAAE;UAC3B,IAAMkC,KAAK,GAAGD,MAAM,CAACD,IAAI,EAAEhC,GAAC,CAAC;UAC7B,IAAMmC,CAAC,GAAG,IAAI,CAACrC,IAAI,GAAG,EAAE,GAAGE,GAAC,GAAG,CAAC;UAChC,IAAMoC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACtC,GAAC,GAAG,CAAC,CAAC;UAC3B,IAAI,CAACoB,iBAAiB,CAACe,CAAC,EAAEC,CAAC,EAAEF,KAAK,CAAC;UACnC,IAAI,CAACd,iBAAiB,CAACgB,CAAC,EAAED,CAAC,EAAED,KAAK,CAAC;QACrC;MACF;MACA;MACA;IAAA;MAAApB,GAAA;MAAAC,KAAA,EACA,SAAAM,kBAAkBJ,CAAC,EAAEC,CAAC,EAAE;QACtB,KAAK,IAAIqB,EAAE,GAAG,CAAC,CAAC,EAAEA,EAAE,IAAI,CAAC,EAAEA,EAAE,EAAE,EAAE;UAC/B,KAAK,IAAIC,EAAE,GAAG,CAAC,CAAC,EAAEA,EAAE,IAAI,CAAC,EAAEA,EAAE,EAAE,EAAE;YAC/B,IAAMC,IAAI,GAAGJ,IAAI,CAACK,GAAG,CAACL,IAAI,CAACM,GAAG,CAACH,EAAE,CAAC,EAAEH,IAAI,CAACM,GAAG,CAACJ,EAAE,CAAC,CAAC,CAAC,CAAC;YACnD,IAAMK,EAAE,GAAG3B,CAAC,GAAGuB,EAAE;YACjB,IAAMK,EAAE,GAAG3B,CAAC,GAAGqB,EAAE;YACjB,IAAI,CAAC,IAAIK,EAAE,IAAIA,EAAE,GAAG,IAAI,CAAC9C,IAAI,IAAI,CAAC,IAAI+C,EAAE,IAAIA,EAAE,GAAG,IAAI,CAAC/C,IAAI,EAAE,IAAI,CAACsB,iBAAiB,CAACwB,EAAE,EAAEC,EAAE,EAAEJ,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,CAAC,CAAC;UACpH;QACF;MACF;MACA;MACA;IAAA;MAAA3B,GAAA;MAAAC,KAAA,EACA,SAAAY,qBAAqBV,CAAC,EAAEC,CAAC,EAAE;QACzB,KAAK,IAAIqB,EAAE,GAAG,CAAC,CAAC,EAAEA,EAAE,IAAI,CAAC,EAAEA,EAAE,EAAE,EAAE;UAC/B,KAAK,IAAIC,EAAE,GAAG,CAAC,CAAC,EAAEA,EAAE,IAAI,CAAC,EAAEA,EAAE,EAAE,EAAE,IAAI,CAACpB,iBAAiB,CAACH,CAAC,GAAGuB,EAAE,EAAEtB,CAAC,GAAGqB,EAAE,EAAEF,IAAI,CAACK,GAAG,CAACL,IAAI,CAACM,GAAG,CAACH,EAAE,CAAC,EAAEH,IAAI,CAACM,GAAG,CAACJ,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;QACpH;MACF;MACA;MACA;IAAA;MAAAzB,GAAA;MAAAC,KAAA,EACA,SAAAK,kBAAkBH,CAAC,EAAEC,CAAC,EAAE4B,MAAM,EAAE;QAC9B,IAAI,CAACrD,OAAO,CAACyB,CAAC,CAAC,CAACD,CAAC,CAAC,GAAG6B,MAAM;QAC3B,IAAI,CAACpD,UAAU,CAACwB,CAAC,CAAC,CAACD,CAAC,CAAC,GAAG,IAAI;MAC9B;MACA;MACA;MACA;IAAA;MAAAH,GAAA;MAAAC,KAAA,EACA,SAAAV,oBAAoBwB,IAAI,EAAE;QACxB,IAAMkB,GAAG,GAAG,IAAI,CAAC1D,OAAO;QACxB,IAAM2D,GAAG,GAAG,IAAI,CAAC1D,oBAAoB;QACrC,IAAIuC,IAAI,CAACJ,MAAM,IAAIrC,MAAM,CAAC6D,mBAAmB,CAACF,GAAG,EAAEC,GAAG,CAAC,EAAE,MAAM,IAAInD,UAAU,CAAC,kBAAkB,CAAC;QACjG;QACA,IAAMqD,SAAS,GAAG9D,MAAM,CAAC+D,2BAA2B,CAACH,GAAG,CAACI,OAAO,CAAC,CAACL,GAAG,CAAC;QACtE,IAAMM,WAAW,GAAGjE,MAAM,CAACkE,uBAAuB,CAACN,GAAG,CAACI,OAAO,CAAC,CAACL,GAAG,CAAC;QACpE,IAAMQ,YAAY,GAAGlB,IAAI,CAACC,KAAK,CAAClD,MAAM,CAACoE,oBAAoB,CAACT,GAAG,CAAC,GAAG,CAAC,CAAC;QACrE,IAAMU,cAAc,GAAGP,SAAS,GAAGK,YAAY,GAAGL,SAAS;QAC3D,IAAMQ,aAAa,GAAGrB,IAAI,CAACC,KAAK,CAACiB,YAAY,GAAGL,SAAS,CAAC;QAC1D;QACA,IAAMS,MAAM,GAAG,EAAE;QACjB,IAAMC,KAAK,GAAGxE,MAAM,CAACyE,yBAAyB,CAACR,WAAW,CAAC;QAC3D,KAAK,IAAIrD,CAAC,GAAG,CAAC,EAAE8D,CAAC,GAAG,CAAC,EAAE9D,CAAC,GAAGkD,SAAS,EAAElD,CAAC,EAAE,EAAE;UACzC,IAAM+D,GAAG,GAAGlC,IAAI,CAAC3B,KAAK,CAAC4D,CAAC,EAAEA,CAAC,GAAGJ,aAAa,GAAGL,WAAW,IAAIrD,CAAC,GAAGyD,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;UACzFK,CAAC,IAAIC,GAAG,CAACtC,MAAM;UACf,IAAMuC,GAAG,GAAG5E,MAAM,CAAC6E,2BAA2B,CAACF,GAAG,EAAEH,KAAK,CAAC;UAC1D,IAAI5D,CAAC,GAAGyD,cAAc,EAAEM,GAAG,CAAC9D,IAAI,CAAC,CAAC,CAAC;UACnC0D,MAAM,CAAC1D,IAAI,CAAC8D,GAAG,CAACG,MAAM,CAACF,GAAG,CAAC,CAAC;QAC9B;QACA;QACA,IAAMG,MAAM,GAAG,EAAE;QAAC,IAAAC,KAAA,YAAAA,MAAAC,GAAA,EACyB;UACzCV,MAAM,CAACW,OAAO,CAAC,UAACC,KAAK,EAAE7C,CAAC,EAAK;YAC3B;YACA,IAAI1B,GAAC,IAAI0D,aAAa,GAAGL,WAAW,IAAI3B,CAAC,IAAI+B,cAAc,EAAEU,MAAM,CAAClE,IAAI,CAACsE,KAAK,CAACvE,GAAC,CAAC,CAAC;UACpF,CAAC,CAAC;QACJ,CAAC;QALD,KAAK,IAAIA,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG2D,MAAM,CAAC,CAAC,CAAC,CAAClC,MAAM,EAAEzB,GAAC,EAAE;UAAAoE,KAAA,CAAAC,GAAA;QAAA;QAMzCzD,MAAM,CAACuD,MAAM,CAAC1C,MAAM,IAAI8B,YAAY,CAAC;QACrC,OAAOY,MAAM;MACf;MACA;MACA;IAAA;MAAArD,GAAA;MAAAC,KAAA,EACA,SAAAT,cAAcuB,IAAI,EAAE;QAClB,IAAIA,IAAI,CAACJ,MAAM,IAAIY,IAAI,CAACC,KAAK,CAAClD,MAAM,CAACoE,oBAAoB,CAAC,IAAI,CAACnE,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,IAAIQ,UAAU,CAAC,kBAAkB,CAAC;QACtH,IAAIG,CAAC,GAAG,CAAC,CAAC,CAAC;QACX;QACA,KAAK,IAAIwE,KAAK,GAAG,IAAI,CAAC1E,IAAI,GAAG,CAAC,EAAE0E,KAAK,IAAI,CAAC,EAAEA,KAAK,IAAI,CAAC,EAAE;UACtD;UACA,IAAIA,KAAK,IAAI,CAAC,EAAEA,KAAK,GAAG,CAAC;UACzB,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAG,IAAI,CAAC3E,IAAI,EAAE2E,IAAI,EAAE,EAAE;YAC3C;YACA,KAAK,IAAI/C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;cAC1B,IAAMT,CAAC,GAAGuD,KAAK,GAAG9C,CAAC,CAAC,CAAC;cACrB,IAAMgD,MAAM,GAAG,CAACF,KAAK,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC;cACnC,IAAMtD,CAAC,GAAGwD,MAAM,GAAG,IAAI,CAAC5E,IAAI,GAAG,CAAC,GAAG2E,IAAI,GAAGA,IAAI,CAAC,CAAC;cAChD,IAAI,CAAC,IAAI,CAAC/E,UAAU,CAACwB,CAAC,CAAC,CAACD,CAAC,CAAC,IAAIjB,CAAC,GAAG6B,IAAI,CAACJ,MAAM,GAAG,CAAC,EAAE;gBACjD,IAAI,CAAChC,OAAO,CAACyB,CAAC,CAAC,CAACD,CAAC,CAAC,GAAGgB,MAAM,CAACJ,IAAI,CAAC7B,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAIA,CAAC,GAAG,CAAC,CAAC,CAAC;gBACvDA,CAAC,EAAE;cACL;cACA;cACA;YACF;UACF;QACF;;QAEAY,MAAM,CAACZ,CAAC,IAAI6B,IAAI,CAACJ,MAAM,GAAG,CAAC,CAAC;MAC9B;MACA;MACA;MACA;MACA;MACA;IAAA;MAAAX,GAAA;MAAAC,KAAA,EACA,SAAAP,UAAUK,IAAI,EAAE;QACd,IAAIA,IAAI,GAAG,CAAC,IAAIA,IAAI,GAAG,CAAC,EAAE,MAAM,IAAIhB,UAAU,CAAC,yBAAyB,CAAC;QACzE,KAAK,IAAIqB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACpB,IAAI,EAAEoB,CAAC,EAAE,EAAE;UAClC,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACnB,IAAI,EAAEmB,CAAC,EAAE,EAAE;YAClC,IAAI0D,MAAM;YACV,QAAQ9D,IAAI;cACV,KAAK,CAAC;gBACJ8D,MAAM,GAAG,CAAC1D,CAAC,GAAGC,CAAC,IAAI,CAAC,IAAI,CAAC;gBACzB;cACF,KAAK,CAAC;gBACJyD,MAAM,GAAGzD,CAAC,GAAG,CAAC,IAAI,CAAC;gBACnB;cACF,KAAK,CAAC;gBACJyD,MAAM,GAAG1D,CAAC,GAAG,CAAC,IAAI,CAAC;gBACnB;cACF,KAAK,CAAC;gBACJ0D,MAAM,GAAG,CAAC1D,CAAC,GAAGC,CAAC,IAAI,CAAC,IAAI,CAAC;gBACzB;cACF,KAAK,CAAC;gBACJyD,MAAM,GAAG,CAACtC,IAAI,CAACC,KAAK,CAACrB,CAAC,GAAG,CAAC,CAAC,GAAGoB,IAAI,CAACC,KAAK,CAACpB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;gBACzD;cACF,KAAK,CAAC;gBACJyD,MAAM,GAAG1D,CAAC,GAAGC,CAAC,GAAG,CAAC,GAAGD,CAAC,GAAGC,CAAC,GAAG,CAAC,IAAI,CAAC;gBACnC;cACF,KAAK,CAAC;gBACJyD,MAAM,GAAG,CAAC1D,CAAC,GAAGC,CAAC,GAAG,CAAC,GAAGD,CAAC,GAAGC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;gBACzC;cACF,KAAK,CAAC;gBACJyD,MAAM,GAAG,CAAC,CAAC1D,CAAC,GAAGC,CAAC,IAAI,CAAC,GAAGD,CAAC,GAAGC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;gBAC3C;cACF;gBACE,MAAM,IAAI0D,KAAK,CAAC,aAAa,CAAC;YAClC;YACA,IAAI,CAAC,IAAI,CAAClF,UAAU,CAACwB,CAAC,CAAC,CAACD,CAAC,CAAC,IAAI0D,MAAM,EAAE,IAAI,CAAClF,OAAO,CAACyB,CAAC,CAAC,CAACD,CAAC,CAAC,GAAG,CAAC,IAAI,CAACxB,OAAO,CAACyB,CAAC,CAAC,CAACD,CAAC,CAAC;UAChF;QACF;MACF;MACA;MACA;IAAA;MAAAH,GAAA;MAAAC,KAAA,EACA,SAAAJ,gBAAA,EAAkB;QAChB,IAAIwD,MAAM,GAAG,CAAC;QACd;QACA,KAAK,IAAIjD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACpB,IAAI,EAAEoB,CAAC,EAAE,EAAE;UAClC,IAAI2D,QAAQ,GAAG,KAAK;UACpB,IAAIC,IAAI,GAAG,CAAC;UACZ,IAAMC,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UACxC,KAAK,IAAI9D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACnB,IAAI,EAAEmB,CAAC,EAAE,EAAE;YAClC,IAAI,IAAI,CAACxB,OAAO,CAACyB,CAAC,CAAC,CAACD,CAAC,CAAC,IAAI4D,QAAQ,EAAE;cAClCC,IAAI,EAAE;cACN,IAAIA,IAAI,IAAI,CAAC,EAAEX,MAAM,IAAI/E,MAAM,CAAC4F,UAAU,CAAC,KAAK,IAAIF,IAAI,GAAG,CAAC,EAAEX,MAAM,EAAE;YACxE,CAAC,MAAM;cACL,IAAI,CAACc,uBAAuB,CAACH,IAAI,EAAEC,UAAU,CAAC;cAC9C,IAAI,CAACF,QAAQ,EAAEV,MAAM,IAAI,IAAI,CAACe,0BAA0B,CAACH,UAAU,CAAC,GAAG3F,MAAM,CAAC+F,UAAU;cACxFN,QAAQ,GAAG,IAAI,CAACpF,OAAO,CAACyB,CAAC,CAAC,CAACD,CAAC,CAAC;cAC7B6D,IAAI,GAAG,CAAC;YACV;UACF;UACAX,MAAM,IAAI,IAAI,CAACiB,8BAA8B,CAACP,QAAQ,EAAEC,IAAI,EAAEC,UAAU,CAAC,GAAG3F,MAAM,CAAC+F,UAAU;QAC/F;QACA;QACA,KAAK,IAAIlE,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG,IAAI,CAACnB,IAAI,EAAEmB,EAAC,EAAE,EAAE;UAClC,IAAI4D,SAAQ,GAAG,KAAK;UACpB,IAAIQ,IAAI,GAAG,CAAC;UACZ,IAAMN,WAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UACxC,KAAK,IAAI7D,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG,IAAI,CAACpB,IAAI,EAAEoB,EAAC,EAAE,EAAE;YAClC,IAAI,IAAI,CAACzB,OAAO,CAACyB,EAAC,CAAC,CAACD,EAAC,CAAC,IAAI4D,SAAQ,EAAE;cAClCQ,IAAI,EAAE;cACN,IAAIA,IAAI,IAAI,CAAC,EAAElB,MAAM,IAAI/E,MAAM,CAAC4F,UAAU,CAAC,KAAK,IAAIK,IAAI,GAAG,CAAC,EAAElB,MAAM,EAAE;YACxE,CAAC,MAAM;cACL,IAAI,CAACc,uBAAuB,CAACI,IAAI,EAAEN,WAAU,CAAC;cAC9C,IAAI,CAACF,SAAQ,EAAEV,MAAM,IAAI,IAAI,CAACe,0BAA0B,CAACH,WAAU,CAAC,GAAG3F,MAAM,CAAC+F,UAAU;cACxFN,SAAQ,GAAG,IAAI,CAACpF,OAAO,CAACyB,EAAC,CAAC,CAACD,EAAC,CAAC;cAC7BoE,IAAI,GAAG,CAAC;YACV;UACF;UACAlB,MAAM,IAAI,IAAI,CAACiB,8BAA8B,CAACP,SAAQ,EAAEQ,IAAI,EAAEN,WAAU,CAAC,GAAG3F,MAAM,CAAC+F,UAAU;QAC/F;QACA;QACA,KAAK,IAAIjE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,IAAI,CAACpB,IAAI,GAAG,CAAC,EAAEoB,GAAC,EAAE,EAAE;UACtC,KAAK,IAAID,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,IAAI,CAACnB,IAAI,GAAG,CAAC,EAAEmB,GAAC,EAAE,EAAE;YACtC,IAAMiB,KAAK,GAAG,IAAI,CAACzC,OAAO,CAACyB,GAAC,CAAC,CAACD,GAAC,CAAC;YAChC,IAAIiB,KAAK,IAAI,IAAI,CAACzC,OAAO,CAACyB,GAAC,CAAC,CAACD,GAAC,GAAG,CAAC,CAAC,IAAIiB,KAAK,IAAI,IAAI,CAACzC,OAAO,CAACyB,GAAC,GAAG,CAAC,CAAC,CAACD,GAAC,CAAC,IAAIiB,KAAK,IAAI,IAAI,CAACzC,OAAO,CAACyB,GAAC,GAAG,CAAC,CAAC,CAACD,GAAC,GAAG,CAAC,CAAC,EAAEkD,MAAM,IAAI/E,MAAM,CAACkG,UAAU;UAC5I;QACF;QACA;QACA,IAAIC,IAAI,GAAG,CAAC;QAAC,IAAAC,SAAA,GAAAxG,0BAAA,CACK,IAAI,CAACS,OAAO;UAAAgG,KAAA;QAAA;UAA9B,KAAAD,SAAA,CAAAE,CAAA,MAAAD,KAAA,GAAAD,SAAA,CAAAG,CAAA,IAAAC,IAAA,GAAgC;YAAA,IAArB7F,GAAG,GAAA0F,KAAA,CAAA1E,KAAA;YAAkBwE,IAAI,GAAGxF,GAAG,CAAC8F,MAAM,CAAC,UAACC,GAAG,EAAE5D,KAAK;cAAA,OAAK4D,GAAG,IAAI5D,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;YAAA,GAAEqD,IAAI,CAAC;UAAA;QAAC,SAAAQ,GAAA;UAAAP,SAAA,CAAAQ,CAAA,CAAAD,GAAA;QAAA;UAAAP,SAAA,CAAAS,CAAA;QAAA;QAC/F,IAAMC,KAAK,GAAG,IAAI,CAACpG,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC,CAAC;QACrC;QACA,IAAMgE,CAAC,GAAGzB,IAAI,CAAC8D,IAAI,CAAC9D,IAAI,CAACM,GAAG,CAAC4C,IAAI,GAAG,EAAE,GAAGW,KAAK,GAAG,EAAE,CAAC,GAAGA,KAAK,CAAC,GAAG,CAAC;QACjEtF,MAAM,CAAC,CAAC,IAAIkD,CAAC,IAAIA,CAAC,IAAI,CAAC,CAAC;QACxBK,MAAM,IAAIL,CAAC,GAAG1E,MAAM,CAACgH,UAAU;QAC/BxF,MAAM,CAAC,CAAC,IAAIuD,MAAM,IAAIA,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC;QAC1C,OAAOA,MAAM;MACf;MACA;MACA;MACA;MACA;IAAA;MAAArD,GAAA;MAAAC,KAAA,EACA,SAAAQ,6BAAA,EAA+B;QAC7B,IAAI,IAAI,CAAClC,OAAO,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,KAAK;UACpC,IAAMmC,QAAQ,GAAGa,IAAI,CAACC,KAAK,CAAC,IAAI,CAACjD,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC;UACjD,IAAMgH,IAAI,GAAG,IAAI,CAAChH,OAAO,IAAI,EAAE,GAAG,EAAE,GAAGgD,IAAI,CAAC8D,IAAI,CAAC,CAAC,IAAI,CAAC9G,OAAO,GAAG,CAAC,GAAG,CAAC,KAAKmC,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;UACjG,IAAM2C,MAAM,GAAG,CAAC,CAAC,CAAC;UAClB,KAAK,IAAImC,GAAG,GAAG,IAAI,CAACxG,IAAI,GAAG,CAAC,EAAEqE,MAAM,CAAC1C,MAAM,GAAGD,QAAQ,EAAE8E,GAAG,IAAID,IAAI,EAAElC,MAAM,CAACoC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAED,GAAG,CAAC;UAC7F,OAAOnC,MAAM;QACf;MACF;MACA;MACA;MACA;IAAA;MAAArD,GAAA;MAAAC,KAAA;MAiEA;MACA;MACA,SAAAmE,2BAA2BH,UAAU,EAAE;QACrC,IAAMY,CAAC,GAAGZ,UAAU,CAAC,CAAC,CAAC;QACvBnE,MAAM,CAAC+E,CAAC,IAAI,IAAI,CAAC7F,IAAI,GAAG,CAAC,CAAC;QAC1B,IAAM0G,IAAI,GAAGb,CAAC,GAAG,CAAC,IAAIZ,UAAU,CAAC,CAAC,CAAC,IAAIY,CAAC,IAAIZ,UAAU,CAAC,CAAC,CAAC,IAAIY,CAAC,GAAG,CAAC,IAAIZ,UAAU,CAAC,CAAC,CAAC,IAAIY,CAAC,IAAIZ,UAAU,CAAC,CAAC,CAAC,IAAIY,CAAC;QAC9G,OAAO,CAACa,IAAI,IAAIzB,UAAU,CAAC,CAAC,CAAC,IAAIY,CAAC,GAAG,CAAC,IAAIZ,UAAU,CAAC,CAAC,CAAC,IAAIY,CAAC,GAAG,CAAC,GAAG,CAAC,KAAKa,IAAI,IAAIzB,UAAU,CAAC,CAAC,CAAC,IAAIY,CAAC,GAAG,CAAC,IAAIZ,UAAU,CAAC,CAAC,CAAC,IAAIY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MACxI;MACA;IAAA;MAAA7E,GAAA;MAAAC,KAAA,EACA,SAAAqE,+BAA+BqB,eAAe,EAAEC,gBAAgB,EAAE3B,UAAU,EAAE;QAC5E,IAAI0B,eAAe,EAAE;UACnB;UACA,IAAI,CAACxB,uBAAuB,CAACyB,gBAAgB,EAAE3B,UAAU,CAAC;UAC1D2B,gBAAgB,GAAG,CAAC;QACtB;QACAA,gBAAgB,IAAI,IAAI,CAAC5G,IAAI,CAAC,CAAC;QAC/B,IAAI,CAACmF,uBAAuB,CAACyB,gBAAgB,EAAE3B,UAAU,CAAC;QAC1D,OAAO,IAAI,CAACG,0BAA0B,CAACH,UAAU,CAAC;MACpD;MACA;IAAA;MAAAjE,GAAA;MAAAC,KAAA,EACA,SAAAkE,wBAAwByB,gBAAgB,EAAE3B,UAAU,EAAE;QACpD,IAAIA,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE2B,gBAAgB,IAAI,IAAI,CAAC5G,IAAI,CAAC,CAAC;QACvDiF,UAAU,CAAC4B,GAAG,CAAC,CAAC;QAChB5B,UAAU,CAAC6B,OAAO,CAACF,gBAAgB,CAAC;MACtC;IAAC;MAAA5F,GAAA;MAAAC,KAAA,EAhfD;MACA;MACA;MACA;MACA;MACA;MACA,SAAA8F,WAAkBC,IAAI,EAAE9D,GAAG,EAAE;QAC3B,IAAM+D,IAAI,GAAG5H,SAAS,CAAC6H,SAAS,CAACC,YAAY,CAACH,IAAI,CAAC;QACnD,OAAO1H,MAAM,CAAC8H,cAAc,CAACH,IAAI,EAAE/D,GAAG,CAAC;MACzC;MACA;MACA;MACA;MACA;IAAA;MAAAlC,GAAA;MAAAC,KAAA,EACA,SAAAoG,aAAoBtF,IAAI,EAAEmB,GAAG,EAAE;QAC7B,IAAMoE,GAAG,GAAGjI,SAAS,CAAC6H,SAAS,CAACK,SAAS,CAACxF,IAAI,CAAC;QAC/C,OAAOzC,MAAM,CAAC8H,cAAc,CAAC,CAACE,GAAG,CAAC,EAAEpE,GAAG,CAAC;MAC1C;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA;MAAAlC,GAAA;MAAAC,KAAA,EACA,SAAAmG,eAAsBH,IAAI,EAAE/D,GAAG,EAAE;QAC/B,IAAIsE,UAAU,GAAGC,SAAS,CAAC9F,MAAM,GAAG,CAAC,IAAI8F,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;QACtF,IAAIE,UAAU,GAAGF,SAAS,CAAC9F,MAAM,GAAG,CAAC,IAAI8F,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;QACvF,IAAI1G,IAAI,GAAG0G,SAAS,CAAC9F,MAAM,GAAG,CAAC,IAAI8F,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACjF,IAAIG,QAAQ,GAAGH,SAAS,CAAC9F,MAAM,GAAG,CAAC,IAAI8F,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;QACvF,IAAI,EAAEnI,MAAM,CAACO,WAAW,IAAI2H,UAAU,IAAIA,UAAU,IAAIG,UAAU,IAAIA,UAAU,IAAIrI,MAAM,CAACQ,WAAW,CAAC,IAAIiB,IAAI,GAAG,CAAC,CAAC,IAAIA,IAAI,GAAG,CAAC,EAAE,MAAM,IAAIhB,UAAU,CAAC,eAAe,CAAC;QACvK;QACA,IAAIR,OAAO;QACX,IAAIsI,YAAY;QAChB,KAAKtI,OAAO,GAAGiI,UAAU,GAAGjI,OAAO,EAAE,EAAE;UACrC,IAAMuI,iBAAgB,GAAGxI,MAAM,CAAC6D,mBAAmB,CAAC5D,OAAO,EAAE2D,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;UACvE,IAAM6E,QAAQ,GAAGb,SAAS,CAACc,YAAY,CAACf,IAAI,EAAE1H,OAAO,CAAC;UACtD,IAAIwI,QAAQ,IAAID,iBAAgB,EAAE;YAChCD,YAAY,GAAGE,QAAQ;YACvB,MAAM,CAAC;UACT;;UAEA,IAAIxI,OAAO,IAAIoI,UAAU;YACvB;YACA,MAAM,IAAI5H,UAAU,CAAC,eAAe,CAAC;QACzC;QACA;QACA,SAAAkI,IAAA,MAAAC,IAAA,GAAqB,CAAC5I,MAAM,CAAC6I,GAAG,CAACC,MAAM,EAAE9I,MAAM,CAAC6I,GAAG,CAACE,QAAQ,EAAE/I,MAAM,CAAC6I,GAAG,CAACG,IAAI,CAAC,EAAAL,IAAA,GAAAC,IAAA,CAAAvG,MAAA,EAAAsG,IAAA,IAAE;UAA3E,IAAMM,MAAM,GAAAL,IAAA,CAAAD,IAAA;UACf;UACA,IAAIL,QAAQ,IAAIC,YAAY,IAAIvI,MAAM,CAAC6D,mBAAmB,CAAC5D,OAAO,EAAEgJ,MAAM,CAAC,GAAG,CAAC,EAAErF,GAAG,GAAGqF,MAAM;QAC/F;QACA;QACA,IAAMC,EAAE,GAAG,EAAE;QAAC,IAAAC,UAAA,GAAAvJ,0BAAA,CACI+H,IAAI;UAAAyB,MAAA;QAAA;UAAtB,KAAAD,UAAA,CAAA7C,CAAA,MAAA8C,MAAA,GAAAD,UAAA,CAAA5C,CAAA,IAAAC,IAAA,GAAwB;YAAA,IAAbwB,GAAG,GAAAoB,MAAA,CAAAzH,KAAA;YACZ0H,UAAU,CAACrB,GAAG,CAACsB,IAAI,CAACC,QAAQ,EAAE,CAAC,EAAEL,EAAE,CAAC;YACpCG,UAAU,CAACrB,GAAG,CAACwB,QAAQ,EAAExB,GAAG,CAACsB,IAAI,CAACG,gBAAgB,CAACxJ,OAAO,CAAC,EAAEiJ,EAAE,CAAC;YAAC,IAAAQ,UAAA,GAAA9J,0BAAA,CACjDoI,GAAG,CAAC2B,OAAO,CAAC,CAAC;cAAAC,MAAA;YAAA;cAA7B,KAAAF,UAAA,CAAApD,CAAA,MAAAsD,MAAA,GAAAF,UAAA,CAAAnD,CAAA,IAAAC,IAAA,GAA+B;gBAAA,IAApBxD,CAAC,GAAA4G,MAAA,CAAAjI,KAAA;gBAAmBuH,EAAE,CAACrI,IAAI,CAACmC,CAAC,CAAC;cAAA;YAAC,SAAA2D,GAAA;cAAA+C,UAAA,CAAA9C,CAAA,CAAAD,GAAA;YAAA;cAAA+C,UAAA,CAAA7C,CAAA;YAAA;UAC5C;QAAC,SAAAF,GAAA;UAAAwC,UAAA,CAAAvC,CAAA,CAAAD,GAAA;QAAA;UAAAwC,UAAA,CAAAtC,CAAA;QAAA;QACDrF,MAAM,CAAC0H,EAAE,CAAC7G,MAAM,IAAIkG,YAAY,CAAC;QACjC;QACA,IAAMC,gBAAgB,GAAGxI,MAAM,CAAC6D,mBAAmB,CAAC5D,OAAO,EAAE2D,GAAG,CAAC,GAAG,CAAC;QACrEpC,MAAM,CAAC0H,EAAE,CAAC7G,MAAM,IAAImG,gBAAgB,CAAC;QACrCa,UAAU,CAAC,CAAC,EAAEpG,IAAI,CAAC4G,GAAG,CAAC,CAAC,EAAErB,gBAAgB,GAAGU,EAAE,CAAC7G,MAAM,CAAC,EAAE6G,EAAE,CAAC;QAC5DG,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGH,EAAE,CAAC7G,MAAM,GAAG,CAAC,IAAI,CAAC,EAAE6G,EAAE,CAAC;QAC1C1H,MAAM,CAAC0H,EAAE,CAAC7G,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1B;QACA,KAAK,IAAIyH,OAAO,GAAG,IAAI,EAAEZ,EAAE,CAAC7G,MAAM,GAAGmG,gBAAgB,EAAEsB,OAAO,IAAI,IAAI,GAAG,IAAI,EAAET,UAAU,CAACS,OAAO,EAAE,CAAC,EAAEZ,EAAE,CAAC;QACzG;QACA,IAAM/I,aAAa,GAAG,EAAE;QACxB,OAAOA,aAAa,CAACkC,MAAM,GAAG,CAAC,GAAG6G,EAAE,CAAC7G,MAAM,EAAElC,aAAa,CAACU,IAAI,CAAC,CAAC,CAAC;QAClEqI,EAAE,CAAChE,OAAO,CAAC,UAAClC,CAAC,EAAEpC,CAAC;UAAA,OAAKT,aAAa,CAACS,CAAC,KAAK,CAAC,CAAC,IAAIoC,CAAC,IAAI,CAAC,IAAIpC,CAAC,GAAG,CAAC,CAAC;QAAA,EAAC;QAChE;QACA,OAAO,IAAIZ,MAAM,CAACC,OAAO,EAAE2D,GAAG,EAAEzD,aAAa,EAAEsB,IAAI,CAAC;MACtD;IAAC;MAAAC,GAAA;MAAAC,KAAA,EA4UD,SAAAyC,qBAA4BT,GAAG,EAAE;QAC/B,IAAIA,GAAG,GAAG3D,MAAM,CAACO,WAAW,IAAIoD,GAAG,GAAG3D,MAAM,CAACQ,WAAW,EAAE,MAAM,IAAIC,UAAU,CAAC,6BAA6B,CAAC;QAC7G,IAAIsE,MAAM,GAAG,CAAC,EAAE,GAAGpB,GAAG,GAAG,GAAG,IAAIA,GAAG,GAAG,EAAE;QACxC,IAAIA,GAAG,IAAI,CAAC,EAAE;UACZ,IAAMvB,QAAQ,GAAGa,IAAI,CAACC,KAAK,CAACS,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;UACxCoB,MAAM,IAAI,CAAC,EAAE,GAAG3C,QAAQ,GAAG,EAAE,IAAIA,QAAQ,GAAG,EAAE;UAC9C,IAAIuB,GAAG,IAAI,CAAC,EAAEoB,MAAM,IAAI,EAAE;QAC5B;QACAvD,MAAM,CAAC,GAAG,IAAIuD,MAAM,IAAIA,MAAM,IAAI,KAAK,CAAC;QACxC,OAAOA,MAAM;MACf;MACA;MACA;MACA;IAAA;MAAArD,GAAA;MAAAC,KAAA,EACA,SAAAkC,oBAA2BF,GAAG,EAAEC,GAAG,EAAE;QACnC,OAAOX,IAAI,CAACC,KAAK,CAAClD,MAAM,CAACoE,oBAAoB,CAACT,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG3D,MAAM,CAACkE,uBAAuB,CAACN,GAAG,CAACI,OAAO,CAAC,CAACL,GAAG,CAAC,GAAG3D,MAAM,CAAC+D,2BAA2B,CAACH,GAAG,CAACI,OAAO,CAAC,CAACL,GAAG,CAAC;MACnK;MACA;MACA;IAAA;MAAAjC,GAAA;MAAAC,KAAA,EACA,SAAA8C,0BAAiCsF,MAAM,EAAE;QACvC,IAAIA,MAAM,GAAG,CAAC,IAAIA,MAAM,GAAG,GAAG,EAAE,MAAM,IAAItJ,UAAU,CAAC,qBAAqB,CAAC;QAC3E;QACA;QACA,IAAMsE,MAAM,GAAG,EAAE;QACjB,KAAK,IAAInE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmJ,MAAM,GAAG,CAAC,EAAEnJ,CAAC,EAAE,EAAEmE,MAAM,CAAClE,IAAI,CAAC,CAAC,CAAC;QACnDkE,MAAM,CAAClE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAChB;QACA;QACA;QACA,IAAImJ,IAAI,GAAG,CAAC;QACZ,KAAK,IAAIpJ,IAAC,GAAG,CAAC,EAAEA,IAAC,GAAGmJ,MAAM,EAAEnJ,IAAC,EAAE,EAAE;UAC/B;UACA,KAAK,IAAI0B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyC,MAAM,CAAC1C,MAAM,EAAEC,CAAC,EAAE,EAAE;YACtCyC,MAAM,CAACzC,CAAC,CAAC,GAAGtC,MAAM,CAACiK,mBAAmB,CAAClF,MAAM,CAACzC,CAAC,CAAC,EAAE0H,IAAI,CAAC;YACvD,IAAI1H,CAAC,GAAG,CAAC,GAAGyC,MAAM,CAAC1C,MAAM,EAAE0C,MAAM,CAACzC,CAAC,CAAC,IAAIyC,MAAM,CAACzC,CAAC,GAAG,CAAC,CAAC;UACvD;UACA0H,IAAI,GAAGhK,MAAM,CAACiK,mBAAmB,CAACD,IAAI,EAAE,IAAI,CAAC;QAC/C;QACA,OAAOjF,MAAM;MACf;MACA;IAAA;MAAArD,GAAA;MAAAC,KAAA,EACA,SAAAkD,4BAAmCpC,IAAI,EAAEyH,OAAO,EAAE;QAChD,IAAMnF,MAAM,GAAGmF,OAAO,CAACC,GAAG,CAAC,UAAAC,CAAC;UAAA,OAAI,CAAC;QAAA,EAAC;QAAC,IAAAC,UAAA,GAAAzK,0BAAA,CACnB6C,IAAI;UAAA6H,MAAA;QAAA;UAAA,IAAAC,MAAA,YAAAA,OAAA,EAAE;YAAA,IAAXvH,CAAC,GAAAsH,MAAA,CAAA3I,KAAA;YACV;YACA,IAAM6I,MAAM,GAAGxH,CAAC,GAAG+B,MAAM,CAAC0F,KAAK,CAAC,CAAC;YACjC1F,MAAM,CAAClE,IAAI,CAAC,CAAC,CAAC;YACdqJ,OAAO,CAAChF,OAAO,CAAC,UAACwF,IAAI,EAAE9J,CAAC;cAAA,OAAKmE,MAAM,CAACnE,CAAC,CAAC,IAAIZ,MAAM,CAACiK,mBAAmB,CAACS,IAAI,EAAEF,MAAM,CAAC;YAAA,EAAC;UACrF,CAAC;UALD,KAAAH,UAAA,CAAA/D,CAAA,MAAAgE,MAAA,GAAAD,UAAA,CAAA9D,CAAA,IAAAC,IAAA;YAAA+D,MAAA;UAAA;QAKC,SAAA5D,GAAA;UAAA0D,UAAA,CAAAzD,CAAA,CAAAD,GAAA;QAAA;UAAA0D,UAAA,CAAAxD,CAAA;QAAA;QACD,OAAO9B,MAAM;MACf;MACA;MACA;IAAA;MAAArD,GAAA;MAAAC,KAAA,EACA,SAAAsI,oBAA2BpI,CAAC,EAAEC,CAAC,EAAE;QAC/B,IAAID,CAAC,KAAK,CAAC,IAAI,CAAC,IAAIC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,IAAIrB,UAAU,CAAC,mBAAmB,CAAC;QAC3E;QACA,IAAIkK,CAAC,GAAG,CAAC;QACT,KAAK,IAAI/J,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC3B+J,CAAC,GAAGA,CAAC,IAAI,CAAC,GAAG,CAACA,CAAC,KAAK,CAAC,IAAI,KAAK;UAC9BA,CAAC,IAAI,CAAC7I,CAAC,KAAKlB,CAAC,GAAG,CAAC,IAAIiB,CAAC;QACxB;QACAL,MAAM,CAACmJ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACpB,OAAOA,CAAC;MACV;IAAC;IAAA,OAAA3K,MAAA;EAAA;EA2BH;EACA;EACAA,MAAM,CAACO,WAAW,GAAG,CAAC;EACtB;EACAP,MAAM,CAACQ,WAAW,GAAG,EAAE;EACvB;EACAR,MAAM,CAAC4F,UAAU,GAAG,CAAC;EACrB5F,MAAM,CAACkG,UAAU,GAAG,CAAC;EACrBlG,MAAM,CAAC+F,UAAU,GAAG,EAAE;EACtB/F,MAAM,CAACgH,UAAU,GAAG,EAAE;EACtBhH,MAAM,CAACkE,uBAAuB,GAAG;EACjrpB;;EAEDlE,MAAM,CAAC+D,2BAA2B,GAAG;EACrlB;;EAEDhE,SAAS,CAACC,MAAM,GAAGA,MAAM;EACzB;EACA;EACA,SAASqJ,UAAUA,CAACuB,GAAG,EAAEC,GAAG,EAAE3B,EAAE,EAAE;IAChC,IAAI2B,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAG,EAAE,IAAID,GAAG,KAAKC,GAAG,IAAI,CAAC,EAAE,MAAM,IAAIpK,UAAU,CAAC,oBAAoB,CAAC;IACvF,KAAK,IAAIG,CAAC,GAAGiK,GAAG,GAAG,CAAC,EAAEjK,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,CAAC;IAAA,EAChCsI,EAAE,CAACrI,IAAI,CAAC+J,GAAG,KAAKhK,CAAC,GAAG,CAAC,CAAC;EAC1B;EACA;EACA,SAASiC,MAAMA,CAAChB,CAAC,EAAEjB,CAAC,EAAE;IACpB,OAAO,CAACiB,CAAC,KAAKjB,CAAC,GAAG,CAAC,KAAK,CAAC;EAC3B;EACA;EACA,SAASY,MAAMA,CAACsJ,IAAI,EAAE;IACpB,IAAI,CAACA,IAAI,EAAE,MAAM,IAAItF,KAAK,CAAC,iBAAiB,CAAC;EAC/C;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVE,IAWMoC,SAAS;IAsEb;IACA;IACA;IACA;IACA,SAAAA;IACA;IACA0B,IAAI;IACJ;IACA;IACA;IACAE,QAAQ;IACR;IACAuB,OAAO,EAAE;MAAAlL,eAAA,OAAA+H,SAAA;MACP,IAAI,CAAC0B,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACE,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAACuB,OAAO,GAAGA,OAAO;MACtB,IAAIvB,QAAQ,GAAG,CAAC,EAAE,MAAM,IAAI/I,UAAU,CAAC,kBAAkB,CAAC;MAC1D,IAAI,CAACsK,OAAO,GAAGA,OAAO,CAACjK,KAAK,CAAC,CAAC,CAAC,CAAC;IAClC;IACA;IACA;IAAAhB,YAAA,CAAA8H,SAAA;MAAAlG,GAAA;MAAAC,KAAA,EACA,SAAAgI,QAAA,EAAU;QACR,OAAO,IAAI,CAACoB,OAAO,CAACjK,KAAK,CAAC,CAAC,CAAC,CAAC;MAC/B;MACA;MACA;IAAA;MAAAY,GAAA;MAAAC,KAAA,EA9FA;MACA;MACA;MACA;MACA,SAAAsG,UAAiBxF,IAAI,EAAE;QACrB,IAAMyG,EAAE,GAAG,EAAE;QAAC,IAAA8B,UAAA,GAAApL,0BAAA,CACE6C,IAAI;UAAAwI,MAAA;QAAA;UAApB,KAAAD,UAAA,CAAA1E,CAAA,MAAA2E,MAAA,GAAAD,UAAA,CAAAzE,CAAA,IAAAC,IAAA,GAAsB;YAAA,IAAXxD,CAAC,GAAAiI,MAAA,CAAAtJ,KAAA;YAAU0H,UAAU,CAACrG,CAAC,EAAE,CAAC,EAAEkG,EAAE,CAAC;UAAA;QAAC,SAAAvC,GAAA;UAAAqE,UAAA,CAAApE,CAAA,CAAAD,GAAA;QAAA;UAAAqE,UAAA,CAAAnE,CAAA;QAAA;QAC3C,OAAO,IAAIe,SAAS,CAACA,SAAS,CAACsD,IAAI,CAACC,IAAI,EAAE1I,IAAI,CAACJ,MAAM,EAAE6G,EAAE,CAAC;MAC5D;MACA;IAAA;MAAAxH,GAAA;MAAAC,KAAA,EACA,SAAAyJ,YAAmBC,MAAM,EAAE;QACzB,IAAI,CAACzD,SAAS,CAAC0D,SAAS,CAACD,MAAM,CAAC,EAAE,MAAM,IAAI5K,UAAU,CAAC,wCAAwC,CAAC;QAChG,IAAMyI,EAAE,GAAG,EAAE;QACb,KAAK,IAAItI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyK,MAAM,CAAChJ,MAAM,GAAG;UAClC;UACA,IAAMkE,CAAC,GAAGtD,IAAI,CAAC4G,GAAG,CAACwB,MAAM,CAAChJ,MAAM,GAAGzB,CAAC,EAAE,CAAC,CAAC;UACxCyI,UAAU,CAACkC,QAAQ,CAACF,MAAM,CAACG,SAAS,CAAC5K,CAAC,EAAEA,CAAC,GAAG2F,CAAC,CAAC,EAAE,EAAE,CAAC,EAAEA,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE2C,EAAE,CAAC;UACnEtI,CAAC,IAAI2F,CAAC;QACR;QACA,OAAO,IAAIqB,SAAS,CAACA,SAAS,CAACsD,IAAI,CAACO,OAAO,EAAEJ,MAAM,CAAChJ,MAAM,EAAE6G,EAAE,CAAC;MACjE;MACA;MACA;MACA;IAAA;MAAAxH,GAAA;MAAAC,KAAA,EACA,SAAA+J,iBAAwBhE,IAAI,EAAE;QAC5B,IAAI,CAACE,SAAS,CAAC+D,cAAc,CAACjE,IAAI,CAAC,EAAE,MAAM,IAAIjH,UAAU,CAAC,6DAA6D,CAAC;QACxH,IAAMyI,EAAE,GAAG,EAAE;QACb,IAAItI,CAAC;QACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,IAAI8G,IAAI,CAACrF,MAAM,EAAEzB,CAAC,IAAI,CAAC,EAAE;UACxC;UACA,IAAIgL,IAAI,GAAGhE,SAAS,CAACiE,oBAAoB,CAACC,OAAO,CAACpE,IAAI,CAACqE,MAAM,CAACnL,CAAC,CAAC,CAAC,GAAG,EAAE;UACtEgL,IAAI,IAAIhE,SAAS,CAACiE,oBAAoB,CAACC,OAAO,CAACpE,IAAI,CAACqE,MAAM,CAACnL,CAAC,GAAG,CAAC,CAAC,CAAC;UAClEyI,UAAU,CAACuC,IAAI,EAAE,EAAE,EAAE1C,EAAE,CAAC;QAC1B;QACA,IAAItI,CAAC,GAAG8G,IAAI,CAACrF,MAAM;UACjB;UACAgH,UAAU,CAACzB,SAAS,CAACiE,oBAAoB,CAACC,OAAO,CAACpE,IAAI,CAACqE,MAAM,CAACnL,CAAC,CAAC,CAAC,EAAE,CAAC,EAAEsI,EAAE,CAAC;QAC3E,OAAO,IAAItB,SAAS,CAACA,SAAS,CAACsD,IAAI,CAACc,YAAY,EAAEtE,IAAI,CAACrF,MAAM,EAAE6G,EAAE,CAAC;MACpE;MACA;MACA;IAAA;MAAAxH,GAAA;MAAAC,KAAA,EACA,SAAAkG,aAAoBH,IAAI,EAAE;QACxB;QACA,IAAIA,IAAI,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC,KAAK,IAAIE,SAAS,CAAC0D,SAAS,CAAC5D,IAAI,CAAC,EAAE,OAAO,CAACE,SAAS,CAACwD,WAAW,CAAC1D,IAAI,CAAC,CAAC,CAAC,KAAK,IAAIE,SAAS,CAAC+D,cAAc,CAACjE,IAAI,CAAC,EAAE,OAAO,CAACE,SAAS,CAAC8D,gBAAgB,CAAChE,IAAI,CAAC,CAAC,CAAC,KAAK,OAAO,CAACE,SAAS,CAACK,SAAS,CAACL,SAAS,CAACqE,eAAe,CAACvE,IAAI,CAAC,CAAC,CAAC;MAC1P;MACA;MACA;IAAA;MAAAhG,GAAA;MAAAC,KAAA,EACA,SAAAuK,QAAeC,SAAS,EAAE;QACxB,IAAMjD,EAAE,GAAG,EAAE;QACb,IAAIiD,SAAS,GAAG,CAAC,EAAE,MAAM,IAAI1L,UAAU,CAAC,mCAAmC,CAAC,CAAC,KAAK,IAAI0L,SAAS,GAAG,CAAC,IAAI,CAAC,EAAE9C,UAAU,CAAC8C,SAAS,EAAE,CAAC,EAAEjD,EAAE,CAAC,CAAC,KAAK,IAAIiD,SAAS,GAAG,CAAC,IAAI,EAAE,EAAE;UACnK9C,UAAU,CAAC,CAAI,EAAE,CAAC,EAAEH,EAAE,CAAC;UACvBG,UAAU,CAAC8C,SAAS,EAAE,EAAE,EAAEjD,EAAE,CAAC;QAC/B,CAAC,MAAM,IAAIiD,SAAS,GAAG,OAAO,EAAE;UAC9B9C,UAAU,CAAC,CAAK,EAAE,CAAC,EAAEH,EAAE,CAAC;UACxBG,UAAU,CAAC8C,SAAS,EAAE,EAAE,EAAEjD,EAAE,CAAC;QAC/B,CAAC,MAAM,MAAM,IAAIzI,UAAU,CAAC,mCAAmC,CAAC;QAChE,OAAO,IAAImH,SAAS,CAACA,SAAS,CAACsD,IAAI,CAACkB,GAAG,EAAE,CAAC,EAAElD,EAAE,CAAC;MACjD;MACA;MACA;IAAA;MAAAxH,GAAA;MAAAC,KAAA,EACA,SAAA2J,UAAiB5D,IAAI,EAAE;QACrB,OAAOE,SAAS,CAACyE,aAAa,CAACC,IAAI,CAAC5E,IAAI,CAAC;MAC3C;MACA;MACA;MACA;IAAA;MAAAhG,GAAA;MAAAC,KAAA,EACA,SAAAgK,eAAsBjE,IAAI,EAAE;QAC1B,OAAOE,SAAS,CAAC2E,kBAAkB,CAACD,IAAI,CAAC5E,IAAI,CAAC;MAChD;IAAC;MAAAhG,GAAA;MAAAC,KAAA,EA2BD,SAAA+G,aAAoBf,IAAI,EAAE1H,OAAO,EAAE;QACjC,IAAI8E,MAAM,GAAG,CAAC;QAAC,IAAAyH,UAAA,GAAA5M,0BAAA,CACG+H,IAAI;UAAA8E,MAAA;QAAA;UAAtB,KAAAD,UAAA,CAAAlG,CAAA,MAAAmG,MAAA,GAAAD,UAAA,CAAAjG,CAAA,IAAAC,IAAA,GAAwB;YAAA,IAAbwB,GAAG,GAAAyE,MAAA,CAAA9K,KAAA;YACZ,IAAM+K,MAAM,GAAG1E,GAAG,CAACsB,IAAI,CAACG,gBAAgB,CAACxJ,OAAO,CAAC;YACjD,IAAI+H,GAAG,CAACwB,QAAQ,IAAI,CAAC,IAAIkD,MAAM,EAAE,OAAOC,QAAQ,CAAC,CAAC;YAClD5H,MAAM,IAAI,CAAC,GAAG2H,MAAM,GAAG1E,GAAG,CAAC+C,OAAO,CAAC1I,MAAM;UAC3C;QAAC,SAAAsE,GAAA;UAAA6F,UAAA,CAAA5F,CAAA,CAAAD,GAAA;QAAA;UAAA6F,UAAA,CAAA3F,CAAA;QAAA;QACD,OAAO9B,MAAM;MACf;MACA;IAAA;MAAArD,GAAA;MAAAC,KAAA,EACA,SAAAsK,gBAAuBW,GAAG,EAAE;QAC1BA,GAAG,GAAGC,SAAS,CAACD,GAAG,CAAC;QACpB,IAAM7H,MAAM,GAAG,EAAE;QACjB,KAAK,IAAInE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgM,GAAG,CAACvK,MAAM,EAAEzB,CAAC,EAAE,EAAE;UACnC,IAAIgM,GAAG,CAACb,MAAM,CAACnL,CAAC,CAAC,IAAI,GAAG,EAAEmE,MAAM,CAAClE,IAAI,CAAC+L,GAAG,CAACE,UAAU,CAAClM,CAAC,CAAC,CAAC,CAAC,KAAK;YAC5DmE,MAAM,CAAClE,IAAI,CAAC0K,QAAQ,CAACqB,GAAG,CAACpB,SAAS,CAAC5K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACtDA,CAAC,IAAI,CAAC;UACR;QACF;QACA,OAAOmE,MAAM;MACf;IAAC;IAAA,OAAA6C,SAAA;EAAA;EAEH;EACA;EACAA,SAAS,CAACyE,aAAa,GAAG,UAAU;EACpC;EACAzE,SAAS,CAAC2E,kBAAkB,GAAG,uBAAuB;EACtD;EACA;EACA3E,SAAS,CAACiE,oBAAoB,GAAG,+CAA+C;EAChF9L,SAAS,CAAC6H,SAAS,GAAGA,SAAS;AACjC,CAAC,EAAE7H,SAAS,KAAKA,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;AACjC;AACA,CAAC,UAAUA,SAAS,EAAE;EACpB,IAAIC,MAAM;EACV,CAAC,UAAUA,MAAM,EAAE;IACjB;AACJ;AACA;IAFI,IAGM6I,GAAG,gBAAA/I,YAAA,EACP;IACA,SAAA+I;IACA;IACA7E,OAAO;IACP;IACAtB,UAAU,EAAE;MAAA7C,eAAA,OAAAgJ,GAAA;MACV,IAAI,CAAC7E,OAAO,GAAGA,OAAO;MACtB,IAAI,CAACtB,UAAU,GAAGA,UAAU;IAC9B,CAAC;IAEH;IACAmG,GAAG,CAACkE,GAAG,GAAG,IAAIlE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACzBA,GAAG,CAACC,MAAM,GAAG,IAAID,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5BA,GAAG,CAACE,QAAQ,GAAG,IAAIF,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9BA,GAAG,CAACG,IAAI,GAAG,IAAIH,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1B7I,MAAM,CAAC6I,GAAG,GAAGA,GAAG;EAClB,CAAC,EAAE7I,MAAM,GAAGD,SAAS,CAACC,MAAM,KAAKD,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC,EAAED,SAAS,KAAKA,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;AACjC;AACA,CAAC,UAAUA,SAAS,EAAE;EACpB,IAAI6H,SAAS;EACb,CAAC,UAAUA,SAAS,EAAE;IACpB;AACJ;AACA;IAFI,IAGMsD,IAAI;MACR;MACA,SAAAA;MACA;MACA3B,QAAQ;MACR;MACAyD,gBAAgB,EAAE;QAAAnN,eAAA,OAAAqL,IAAA;QAChB,IAAI,CAAC3B,QAAQ,GAAGA,QAAQ;QACxB,IAAI,CAACyD,gBAAgB,GAAGA,gBAAgB;MAC1C;MACA;MACA;MACA;MAAAlN,YAAA,CAAAoL,IAAA;QAAAxJ,GAAA;QAAAC,KAAA,EACA,SAAA8H,iBAAiB9F,GAAG,EAAE;UACpB,OAAO,IAAI,CAACqJ,gBAAgB,CAAC/J,IAAI,CAACC,KAAK,CAAC,CAACS,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;QAC1D;MAAC;MAAA,OAAAuH,IAAA;IAAA;IAEH;IACAA,IAAI,CAACO,OAAO,GAAG,IAAIP,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC1CA,IAAI,CAACc,YAAY,GAAG,IAAId,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC9CA,IAAI,CAACC,IAAI,GAAG,IAAID,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACtCA,IAAI,CAAC+B,KAAK,GAAG,IAAI/B,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACvCA,IAAI,CAACkB,GAAG,GAAG,IAAIlB,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACnCtD,SAAS,CAACsD,IAAI,GAAGA,IAAI;EACvB,CAAC,EAAEtD,SAAS,GAAG7H,SAAS,CAAC6H,SAAS,KAAK7H,SAAS,CAAC6H,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;AACnE,CAAC,EAAE7H,SAAS,KAAKA,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;AACjC;AACA,eAAeA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}