{"ast":null,"code":"import _toConsumableArray from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _toArray from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { warning } from '../../vc-util/warning';\nfunction getKey(data, index) {\n  var key = data.key;\n  var value;\n  if ('value' in data) {\n    value = data.value;\n  }\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  if (value !== undefined) {\n    return value;\n  }\n  return \"rc-index-key-\".concat(index);\n}\nexport function fillFieldNames(fieldNames, childrenAsData) {\n  var _ref2 = fieldNames || {},\n    label = _ref2.label,\n    value = _ref2.value,\n    options = _ref2.options;\n  return {\n    label: label || (childrenAsData ? 'children' : 'label'),\n    value: value || 'value',\n    options: options || 'options'\n  };\n}\n/**\n * Flat options into flatten list.\n * We use `optionOnly` here is aim to avoid user use nested option group.\n * Here is simply set `key` to the index if not provided.\n */\nexport function flattenOptions(options) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    fieldNames = _ref3.fieldNames,\n    childrenAsData = _ref3.childrenAsData;\n  var flattenList = [];\n  var _fillFieldNames = fillFieldNames(fieldNames, false),\n    fieldLabel = _fillFieldNames.label,\n    fieldValue = _fillFieldNames.value,\n    fieldOptions = _fillFieldNames.options;\n  function dig(list, isGroupOption) {\n    list.forEach(function (data) {\n      var label = data[fieldLabel];\n      if (isGroupOption || !(fieldOptions in data)) {\n        var value = data[fieldValue];\n        // Option\n        flattenList.push({\n          key: getKey(data, flattenList.length),\n          groupOption: isGroupOption,\n          data: data,\n          label: label,\n          value: value\n        });\n      } else {\n        var grpLabel = label;\n        if (grpLabel === undefined && childrenAsData) {\n          grpLabel = data.label;\n        }\n        // Option Group\n        flattenList.push({\n          key: getKey(data, flattenList.length),\n          group: true,\n          data: data,\n          label: grpLabel\n        });\n        dig(data[fieldOptions], true);\n      }\n    });\n  }\n  dig(options, false);\n  return flattenList;\n}\n/**\n * Inject `props` into `option` for legacy usage\n */\nexport function injectPropsWithOption(option) {\n  var newOption = _extends({}, option);\n  if (!('props' in newOption)) {\n    Object.defineProperty(newOption, 'props', {\n      get: function get() {\n        warning(false, 'Return type is option instead of Option instance. Please read value directly instead of reading from `props`.');\n        return newOption;\n      }\n    });\n  }\n  return newOption;\n}\nexport function getSeparatedContent(text, tokens) {\n  if (!tokens || !tokens.length) {\n    return null;\n  }\n  var match = false;\n  function separate(str, _ref) {\n    var _ref4 = _toArray(_ref),\n      token = _ref4[0],\n      restTokens = _ref4.slice(1);\n    if (!token) {\n      return [str];\n    }\n    var list = str.split(token);\n    match = match || list.length > 1;\n    return list.reduce(function (prevList, unitStr) {\n      return [].concat(_toConsumableArray(prevList), _toConsumableArray(separate(unitStr, restTokens)));\n    }, []).filter(function (unit) {\n      return unit;\n    });\n  }\n  var list = separate(text, tokens);\n  return match ? list : null;\n}","map":{"version":3,"names":["_extends","warning","getKey","data","index","key","value","undefined","concat","fillFieldNames","fieldNames","childrenAsData","_ref2","label","options","flattenOptions","_ref3","arguments","length","flattenList","_fillFieldNames","fieldLabel","fieldValue","fieldOptions","dig","list","isGroupOption","forEach","push","groupOption","grpLabel","group","injectPropsWithOption","option","newOption","Object","defineProperty","get","getSeparatedContent","text","tokens","match","separate","str","_ref","_ref4","_toArray","token","restTokens","slice","split","reduce","prevList","unitStr","_toConsumableArray","filter","unit"],"sources":["C:/Users/zhouy/WebstormProjects/lingo/node_modules/ant-design-vue/es/vc-select/utils/valueUtil.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { warning } from '../../vc-util/warning';\nfunction getKey(data, index) {\n  const {\n    key\n  } = data;\n  let value;\n  if ('value' in data) {\n    ({\n      value\n    } = data);\n  }\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  if (value !== undefined) {\n    return value;\n  }\n  return `rc-index-key-${index}`;\n}\nexport function fillFieldNames(fieldNames, childrenAsData) {\n  const {\n    label,\n    value,\n    options\n  } = fieldNames || {};\n  return {\n    label: label || (childrenAsData ? 'children' : 'label'),\n    value: value || 'value',\n    options: options || 'options'\n  };\n}\n/**\n * Flat options into flatten list.\n * We use `optionOnly` here is aim to avoid user use nested option group.\n * Here is simply set `key` to the index if not provided.\n */\nexport function flattenOptions(options) {\n  let {\n    fieldNames,\n    childrenAsData\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const flattenList = [];\n  const {\n    label: fieldLabel,\n    value: fieldValue,\n    options: fieldOptions\n  } = fillFieldNames(fieldNames, false);\n  function dig(list, isGroupOption) {\n    list.forEach(data => {\n      const label = data[fieldLabel];\n      if (isGroupOption || !(fieldOptions in data)) {\n        const value = data[fieldValue];\n        // Option\n        flattenList.push({\n          key: getKey(data, flattenList.length),\n          groupOption: isGroupOption,\n          data,\n          label,\n          value\n        });\n      } else {\n        let grpLabel = label;\n        if (grpLabel === undefined && childrenAsData) {\n          grpLabel = data.label;\n        }\n        // Option Group\n        flattenList.push({\n          key: getKey(data, flattenList.length),\n          group: true,\n          data,\n          label: grpLabel\n        });\n        dig(data[fieldOptions], true);\n      }\n    });\n  }\n  dig(options, false);\n  return flattenList;\n}\n/**\n * Inject `props` into `option` for legacy usage\n */\nexport function injectPropsWithOption(option) {\n  const newOption = _extends({}, option);\n  if (!('props' in newOption)) {\n    Object.defineProperty(newOption, 'props', {\n      get() {\n        warning(false, 'Return type is option instead of Option instance. Please read value directly instead of reading from `props`.');\n        return newOption;\n      }\n    });\n  }\n  return newOption;\n}\nexport function getSeparatedContent(text, tokens) {\n  if (!tokens || !tokens.length) {\n    return null;\n  }\n  let match = false;\n  function separate(str, _ref) {\n    let [token, ...restTokens] = _ref;\n    if (!token) {\n      return [str];\n    }\n    const list = str.split(token);\n    match = match || list.length > 1;\n    return list.reduce((prevList, unitStr) => [...prevList, ...separate(unitStr, restTokens)], []).filter(unit => unit);\n  }\n  const list = separate(text, tokens);\n  return match ? list : null;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}