{"ast":null,"code":"import _defineProperty from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toArray from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _slicedToArray from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _typeof from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.fixed.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nimport DownOutlined from \"@ant-design/icons-vue/es/icons/DownOutlined\";\nimport { INTERNAL_COL_DEFINE } from '../../vc-table';\nimport { arrAdd, arrDel } from '../../vc-tree/util';\nimport { conductCheck } from '../../vc-tree/utils/conductUtil';\nimport { convertDataToEntities } from '../../vc-tree/utils/treeUtil';\nimport devWarning from '../../vc-util/devWarning';\nimport useMergedState from '../../_util/hooks/useMergedState';\nimport useState from '../../_util/hooks/useState';\nimport { watchEffect, computed, shallowRef } from 'vue';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Menu from '../../menu';\nimport Radio from '../../radio';\nimport useMaxLevel from '../../vc-tree/useMaxLevel';\n// TODO: warning if use ajax!!!\nexport var SELECTION_COLUMN = {};\nexport var SELECTION_ALL = 'SELECT_ALL';\nexport var SELECTION_INVERT = 'SELECT_INVERT';\nexport var SELECTION_NONE = 'SELECT_NONE';\nvar EMPTY_LIST = [];\nfunction flattenData(childrenColumnName, data) {\n  var list = [];\n  (data || []).forEach(function (record) {\n    list.push(record);\n    if (record && _typeof(record) === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n}\nexport default function useSelection(rowSelectionRef, configRef) {\n  var mergedRowSelection = computed(function () {\n    var temp = rowSelectionRef.value || {};\n    var _temp$checkStrictly = temp.checkStrictly,\n      checkStrictly = _temp$checkStrictly === void 0 ? true : _temp$checkStrictly;\n    return _extends(_extends({}, temp), {\n      checkStrictly: checkStrictly\n    });\n  });\n  // ========================= Keys =========================\n  var _useMergedState = useMergedState(mergedRowSelection.value.selectedRowKeys || mergedRowSelection.value.defaultSelectedRowKeys || EMPTY_LIST, {\n      value: computed(function () {\n        return mergedRowSelection.value.selectedRowKeys;\n      })\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    mergedSelectedKeys = _useMergedState2[0],\n    setMergedSelectedKeys = _useMergedState2[1];\n  // ======================== Caches ========================\n  var preserveRecordsRef = shallowRef(new Map());\n  var updatePreserveRecordsCache = function updatePreserveRecordsCache(keys) {\n    if (mergedRowSelection.value.preserveSelectedRowKeys) {\n      var newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(function (key) {\n        var record = configRef.getRecordByKey(key);\n        if (!record && preserveRecordsRef.value.has(key)) {\n          record = preserveRecordsRef.value.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.value = newCache;\n    }\n  };\n  watchEffect(function () {\n    updatePreserveRecordsCache(mergedSelectedKeys.value);\n  });\n  var keyEntities = computed(function () {\n    return mergedRowSelection.value.checkStrictly ? null : convertDataToEntities(configRef.data.value, {\n      externalGetKey: configRef.getRowKey.value,\n      childrenPropName: configRef.childrenColumnName.value\n    }).keyEntities;\n  });\n  // Get flatten data\n  var flattedData = computed(function () {\n    return flattenData(configRef.childrenColumnName.value, configRef.pageData.value);\n  });\n  // Get all checkbox props\n  var checkboxPropsMap = computed(function () {\n    var map = new Map();\n    var getRowKey = configRef.getRowKey.value;\n    var getCheckboxProps = mergedRowSelection.value.getCheckboxProps;\n    flattedData.value.forEach(function (record, index) {\n      var key = getRowKey(record, index);\n      var checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      if (process.env.NODE_ENV !== 'production' && ('checked' in checkboxProps || 'defaultChecked' in checkboxProps)) {\n        devWarning(false, 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n      }\n    });\n    return map;\n  });\n  var _useMaxLevel = useMaxLevel(keyEntities),\n    maxLevel = _useMaxLevel.maxLevel,\n    levelEntities = _useMaxLevel.levelEntities;\n  var isCheckboxDisabled = function isCheckboxDisabled(r) {\n    var _a;\n    return !!((_a = checkboxPropsMap.value.get(configRef.getRowKey.value(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  };\n  var selectKeysState = computed(function () {\n    if (mergedRowSelection.value.checkStrictly) {\n      return [mergedSelectedKeys.value || [], []];\n    }\n    var _conductCheck = conductCheck(mergedSelectedKeys.value, true, keyEntities.value, maxLevel.value, levelEntities.value, isCheckboxDisabled),\n      checkedKeys = _conductCheck.checkedKeys,\n      halfCheckedKeys = _conductCheck.halfCheckedKeys;\n    return [checkedKeys || [], halfCheckedKeys];\n  });\n  var derivedSelectedKeys = computed(function () {\n    return selectKeysState.value[0];\n  });\n  var derivedHalfSelectedKeys = computed(function () {\n    return selectKeysState.value[1];\n  });\n  var derivedSelectedKeySet = computed(function () {\n    var keys = mergedRowSelection.value.type === 'radio' ? derivedSelectedKeys.value.slice(0, 1) : derivedSelectedKeys.value;\n    return new Set(keys);\n  });\n  var derivedHalfSelectedKeySet = computed(function () {\n    return mergedRowSelection.value.type === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys.value);\n  });\n  // Save last selected key to enable range selection\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    lastSelectedKey = _useState2[0],\n    setLastSelectedKey = _useState2[1];\n  // // Reset if rowSelection reset\n  // we use computed to reset, donot need setMergedSelectedKeys again like react\n  // https://github.com/vueComponent/ant-design-vue/issues/4885\n  // watchEffect(() => {\n  //   if (!rowSelectionRef.value) {\n  //     setMergedSelectedKeys([]);\n  //   }\n  // });\n  var setSelectedKeys = function setSelectedKeys(keys) {\n    var availableKeys;\n    var records;\n    updatePreserveRecordsCache(keys);\n    var _mergedRowSelection$v = mergedRowSelection.value,\n      preserveSelectedRowKeys = _mergedRowSelection$v.preserveSelectedRowKeys,\n      onSelectionChange = _mergedRowSelection$v.onChange;\n    var getRecordByKey = configRef.getRecordByKey;\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(function (key) {\n        return preserveRecordsRef.value.get(key);\n      });\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records);\n  };\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  var triggerSingleSelection = function triggerSingleSelection(key, selected, keys, event) {\n    var onSelect = mergedRowSelection.value.onSelect;\n    var _ref8 = configRef || {},\n      getRecordByKey = _ref8.getRecordByKey;\n    if (onSelect) {\n      var rows = keys.map(function (k) {\n        return getRecordByKey(k);\n      });\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys);\n  };\n  var mergedSelections = computed(function () {\n    var _mergedRowSelection$v2 = mergedRowSelection.value,\n      onSelectInvert = _mergedRowSelection$v2.onSelectInvert,\n      onSelectNone = _mergedRowSelection$v2.onSelectNone,\n      selections = _mergedRowSelection$v2.selections,\n      hideSelectAll = _mergedRowSelection$v2.hideSelectAll;\n    var data = configRef.data,\n      pageData = configRef.pageData,\n      getRowKey = configRef.getRowKey,\n      tableLocale = configRef.locale;\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    var selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(function (selection) {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.value.selectionAll,\n          onSelect: function onSelect() {\n            setSelectedKeys(data.value.map(function (record, index) {\n              return getRowKey.value(record, index);\n            }).filter(function (key) {\n              var checkProps = checkboxPropsMap.value.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.value.has(key);\n            }));\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.value.selectInvert,\n          onSelect: function onSelect() {\n            var keySet = new Set(derivedSelectedKeySet.value);\n            pageData.value.forEach(function (record, index) {\n              var key = getRowKey.value(record, index);\n              var checkProps = checkboxPropsMap.value.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet[\"delete\"](key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            var keys = Array.from(keySet);\n            if (onSelectInvert) {\n              devWarning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.');\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys);\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.value.selectNone,\n          onSelect: function onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet.value).filter(function (key) {\n              var checkProps = checkboxPropsMap.value.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }));\n          }\n        };\n      }\n      return selection;\n    });\n  });\n  var flattedDataLength = computed(function () {\n    return flattedData.value.length;\n  });\n  // ======================= Columns ========================\n  var transformColumns = function transformColumns(columns) {\n    var _a;\n    var _mergedRowSelection$v3 = mergedRowSelection.value,\n      onSelectAll = _mergedRowSelection$v3.onSelectAll,\n      onSelectMultiple = _mergedRowSelection$v3.onSelectMultiple,\n      selectionColWidth = _mergedRowSelection$v3.columnWidth,\n      selectionType = _mergedRowSelection$v3.type,\n      fixed = _mergedRowSelection$v3.fixed,\n      customizeRenderCell = _mergedRowSelection$v3.renderCell,\n      hideSelectAll = _mergedRowSelection$v3.hideSelectAll,\n      checkStrictly = _mergedRowSelection$v3.checkStrictly;\n    var prefixCls = configRef.prefixCls,\n      getRecordByKey = configRef.getRecordByKey,\n      getRowKey = configRef.getRowKey,\n      expandType = configRef.expandType,\n      getPopupContainer = configRef.getPopupContainer;\n    if (!rowSelectionRef.value) {\n      if (process.env.NODE_ENV !== 'production') {\n        devWarning(!columns.includes(SELECTION_COLUMN), 'Table', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.');\n      }\n      return columns.filter(function (col) {\n        return col !== SELECTION_COLUMN;\n      });\n    }\n    // Support selection\n    var cloneColumns = columns.slice();\n    var keySet = new Set(derivedSelectedKeySet.value);\n    // Record key only need check with enabled\n    var recordKeys = flattedData.value.map(getRowKey.value).filter(function (key) {\n      return !checkboxPropsMap.value.get(key).disabled;\n    });\n    var checkedCurrentAll = recordKeys.every(function (key) {\n      return keySet.has(key);\n    });\n    var checkedCurrentSome = recordKeys.some(function (key) {\n      return keySet.has(key);\n    });\n    var onSelectAllChange = function onSelectAllChange() {\n      var changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(function (key) {\n          keySet[\"delete\"](key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(function (key) {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      var keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(function (k) {\n        return getRecordByKey(k);\n      }), changeKeys.map(function (k) {\n        return getRecordByKey(k);\n      }));\n      setSelectedKeys(keys);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    var title;\n    if (selectionType !== 'radio') {\n      var customizeSelections;\n      if (mergedSelections.value) {\n        var menu = _createVNode(Menu, {\n          \"getPopupContainer\": getPopupContainer.value\n        }, {\n          \"default\": function _default() {\n            return [mergedSelections.value.map(function (selection, index) {\n              var key = selection.key,\n                text = selection.text,\n                onSelectionClick = selection.onSelect;\n              return _createVNode(Menu.Item, {\n                \"key\": key || index,\n                \"onClick\": function onClick() {\n                  onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n                }\n              }, {\n                \"default\": function _default() {\n                  return [text];\n                }\n              });\n            })];\n          }\n        });\n        customizeSelections = _createVNode(\"div\", {\n          \"class\": \"\".concat(prefixCls.value, \"-selection-extra\")\n        }, [_createVNode(Dropdown, {\n          \"overlay\": menu,\n          \"getPopupContainer\": getPopupContainer.value\n        }, {\n          \"default\": function _default() {\n            return [_createVNode(\"span\", null, [_createVNode(DownOutlined, null, null)])];\n          }\n        })]);\n      }\n      var allDisabledData = flattedData.value.map(function (record, index) {\n        var key = getRowKey.value(record, index);\n        var checkboxProps = checkboxPropsMap.value.get(key) || {};\n        return _extends({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(function (_ref) {\n        var disabled = _ref.disabled;\n        return disabled;\n      });\n      var allDisabled = !!allDisabledData.length && allDisabledData.length === flattedDataLength.value;\n      var allDisabledAndChecked = allDisabled && allDisabledData.every(function (_ref2) {\n        var checked = _ref2.checked;\n        return checked;\n      });\n      var allDisabledSomeChecked = allDisabled && allDisabledData.some(function (_ref3) {\n        var checked = _ref3.checked;\n        return checked;\n      });\n      title = !hideSelectAll && _createVNode(\"div\", {\n        \"class\": \"\".concat(prefixCls.value, \"-selection\")\n      }, [_createVNode(Checkbox, {\n        \"checked\": !allDisabled ? !!flattedDataLength.value && checkedCurrentAll : allDisabledAndChecked,\n        \"indeterminate\": !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        \"onChange\": onSelectAllChange,\n        \"disabled\": flattedDataLength.value === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        \"skipGroup\": true\n      }, null), customizeSelections]);\n    }\n    // Body Cell\n    var renderCell;\n    if (selectionType === 'radio') {\n      renderCell = function renderCell(_ref4) {\n        var record = _ref4.record,\n          index = _ref4.index;\n        var key = getRowKey.value(record, index);\n        var checked = keySet.has(key);\n        return {\n          node: _createVNode(Radio, _objectSpread(_objectSpread({}, checkboxPropsMap.value.get(key)), {}, {\n            \"checked\": checked,\n            \"onClick\": function onClick(e) {\n              return e.stopPropagation();\n            },\n            \"onChange\": function onChange(event) {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          }), null),\n          checked: checked\n        };\n      };\n    } else {\n      renderCell = function renderCell(_ref5) {\n        var record = _ref5.record,\n          index = _ref5.index;\n        var _a;\n        var key = getRowKey.value(record, index);\n        var checked = keySet.has(key);\n        var indeterminate = derivedHalfSelectedKeySet.value.has(key);\n        var checkboxProps = checkboxPropsMap.value.get(key);\n        var mergedIndeterminate;\n        if (expandType.value === 'nest') {\n          mergedIndeterminate = indeterminate;\n          devWarning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.');\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: _createVNode(Checkbox, _objectSpread(_objectSpread({}, checkboxProps), {}, {\n            \"indeterminate\": mergedIndeterminate,\n            \"checked\": checked,\n            \"skipGroup\": true,\n            \"onClick\": function onClick(e) {\n              return e.stopPropagation();\n            },\n            \"onChange\": function onChange(_ref6) {\n              var nativeEvent = _ref6.nativeEvent;\n              var shiftKey = nativeEvent.shiftKey;\n              var startIndex = -1;\n              var endIndex = -1;\n              // Get range of this\n              if (shiftKey && checkStrictly) {\n                var pointKeys = new Set([lastSelectedKey.value, key]);\n                recordKeys.some(function (recordKey, recordIndex) {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n                  return false;\n                });\n              }\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                var rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                var changedKeys = [];\n                if (checked) {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet[\"delete\"](recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n                var keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }), changedKeys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }));\n                setSelectedKeys(keys);\n              } else {\n                // Single record selected\n                var originCheckedKeys = derivedSelectedKeys.value;\n                if (checkStrictly) {\n                  var checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  var result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities.value, maxLevel.value, levelEntities.value, isCheckboxDisabled);\n                  var _checkedKeys = result.checkedKeys,\n                    halfCheckedKeys = result.halfCheckedKeys;\n                  var nextCheckedKeys = _checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    var tempKeySet = new Set(_checkedKeys);\n                    tempKeySet[\"delete\"](key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys: halfCheckedKeys\n                    }, keyEntities.value, maxLevel.value, levelEntities.value, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              setLastSelectedKey(key);\n            }\n          }), null),\n          checked: checked\n        };\n      };\n    }\n    var renderSelectionCell = function renderSelectionCell(_ref7) {\n      var record = _ref7.record,\n        index = _ref7.index;\n      var _renderCell = renderCell({\n          record: record,\n          index: index\n        }),\n        node = _renderCell.node,\n        checked = _renderCell.checked;\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(function (col) {\n        var _a;\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        var _cloneColumns = cloneColumns,\n          _cloneColumns2 = _toArray(_cloneColumns),\n          expandColumn = _cloneColumns2[0],\n          restColumns = _cloneColumns2.slice(1);\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    }\n    // Deduplicate selection column\n    var selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    if (process.env.NODE_ENV !== 'production' && cloneColumns.filter(function (col) {\n      return col === SELECTION_COLUMN;\n    }).length > 1) {\n      devWarning(false, 'Table', 'Multiple `SELECTION_COLUMN` exist in `columns`.');\n    }\n    cloneColumns = cloneColumns.filter(function (column, index) {\n      return column !== SELECTION_COLUMN || index === selectionColumnIndex;\n    });\n    // Fixed column logic\n    var prevCol = cloneColumns[selectionColumnIndex - 1];\n    var nextCol = cloneColumns[selectionColumnIndex + 1];\n    var mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    // Replace with real selection column\n    var selectionColumn = _defineProperty({\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: \"\".concat(prefixCls.value, \"-selection-column\"),\n      title: mergedRowSelection.value.columnTitle || title,\n      customRender: renderSelectionCell\n    }, INTERNAL_COL_DEFINE, {\n      \"class\": \"\".concat(prefixCls.value, \"-selection-col\")\n    });\n    return cloneColumns.map(function (col) {\n      return col === SELECTION_COLUMN ? selectionColumn : col;\n    });\n  };\n  return [transformColumns, derivedSelectedKeySet];\n}","map":{"version":3,"names":["_objectSpread","_extends","createVNode","_createVNode","DownOutlined","INTERNAL_COL_DEFINE","arrAdd","arrDel","conductCheck","convertDataToEntities","devWarning","useMergedState","useState","watchEffect","computed","shallowRef","Checkbox","Dropdown","Menu","Radio","useMaxLevel","SELECTION_COLUMN","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","EMPTY_LIST","flattenData","childrenColumnName","data","list","forEach","record","push","_typeof","concat","_toConsumableArray","useSelection","rowSelectionRef","configRef","mergedRowSelection","temp","value","_temp$checkStrictly","checkStrictly","_useMergedState","selectedRowKeys","defaultSelectedRowKeys","_useMergedState2","_slicedToArray","mergedSelectedKeys","setMergedSelectedKeys","preserveRecordsRef","Map","updatePreserveRecordsCache","keys","preserveSelectedRowKeys","newCache","key","getRecordByKey","has","get","set","keyEntities","externalGetKey","getRowKey","childrenPropName","flattedData","pageData","checkboxPropsMap","map","getCheckboxProps","index","checkboxProps","process","env","NODE_ENV","_useMaxLevel","maxLevel","levelEntities","isCheckboxDisabled","r","_a","disabled","selectKeysState","_conductCheck","checkedKeys","halfCheckedKeys","derivedSelectedKeys","derivedHalfSelectedKeys","derivedSelectedKeySet","type","slice","Set","derivedHalfSelectedKeySet","_useState","_useState2","lastSelectedKey","setLastSelectedKey","setSelectedKeys","availableKeys","records","_mergedRowSelection$v","onSelectionChange","onChange","undefined","triggerSingleSelection","selected","event","onSelect","_ref8","rows","k","mergedSelections","_mergedRowSelection$v2","onSelectInvert","onSelectNone","selections","hideSelectAll","tableLocale","locale","selectionList","selection","text","selectionAll","filter","checkProps","selectInvert","keySet","add","Array","from","selectNone","flattedDataLength","length","transformColumns","columns","_mergedRowSelection$v3","onSelectAll","onSelectMultiple","selectionColWidth","columnWidth","selectionType","fixed","customizeRenderCell","renderCell","prefixCls","expandType","getPopupContainer","includes","col","cloneColumns","recordKeys","checkedCurrentAll","every","checkedCurrentSome","some","onSelectAllChange","changeKeys","title","customizeSelections","menu","_default","onSelectionClick","Item","onClick","allDisabledData","checked","_ref","allDisabled","allDisabledAndChecked","_ref2","allDisabledSomeChecked","_ref3","_ref4","node","e","stopPropagation","nativeEvent","_ref5","indeterminate","mergedIndeterminate","_ref6","shiftKey","startIndex","endIndex","pointKeys","recordKey","recordIndex","rangeKeys","changedKeys","originCheckedKeys","result","nextCheckedKeys","tempKeySet","renderSelectionCell","_ref7","_renderCell","findIndex","columnType","_cloneColumns","_cloneColumns2","_toArray","expandColumn","restColumns","selectionColumnIndex","indexOf","column","prevCol","nextCol","mergedFixed","selectionColumn","_defineProperty","width","className","columnTitle","customRender"],"sources":["C:/Users/zhouy/WebstormProjects/lingo/node_modules/ant-design-vue/es/table/hooks/useSelection.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nimport DownOutlined from \"@ant-design/icons-vue/es/icons/DownOutlined\";\nimport { INTERNAL_COL_DEFINE } from '../../vc-table';\nimport { arrAdd, arrDel } from '../../vc-tree/util';\nimport { conductCheck } from '../../vc-tree/utils/conductUtil';\nimport { convertDataToEntities } from '../../vc-tree/utils/treeUtil';\nimport devWarning from '../../vc-util/devWarning';\nimport useMergedState from '../../_util/hooks/useMergedState';\nimport useState from '../../_util/hooks/useState';\nimport { watchEffect, computed, shallowRef } from 'vue';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Menu from '../../menu';\nimport Radio from '../../radio';\nimport useMaxLevel from '../../vc-tree/useMaxLevel';\n// TODO: warning if use ajax!!!\nexport const SELECTION_COLUMN = {};\nexport const SELECTION_ALL = 'SELECT_ALL';\nexport const SELECTION_INVERT = 'SELECT_INVERT';\nexport const SELECTION_NONE = 'SELECT_NONE';\nconst EMPTY_LIST = [];\nfunction flattenData(childrenColumnName, data) {\n  let list = [];\n  (data || []).forEach(record => {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [...list, ...flattenData(childrenColumnName, record[childrenColumnName])];\n    }\n  });\n  return list;\n}\nexport default function useSelection(rowSelectionRef, configRef) {\n  const mergedRowSelection = computed(() => {\n    const temp = rowSelectionRef.value || {};\n    const {\n      checkStrictly = true\n    } = temp;\n    return _extends(_extends({}, temp), {\n      checkStrictly\n    });\n  });\n  // ========================= Keys =========================\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(mergedRowSelection.value.selectedRowKeys || mergedRowSelection.value.defaultSelectedRowKeys || EMPTY_LIST, {\n    value: computed(() => mergedRowSelection.value.selectedRowKeys)\n  });\n  // ======================== Caches ========================\n  const preserveRecordsRef = shallowRef(new Map());\n  const updatePreserveRecordsCache = keys => {\n    if (mergedRowSelection.value.preserveSelectedRowKeys) {\n      const newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(key => {\n        let record = configRef.getRecordByKey(key);\n        if (!record && preserveRecordsRef.value.has(key)) {\n          record = preserveRecordsRef.value.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.value = newCache;\n    }\n  };\n  watchEffect(() => {\n    updatePreserveRecordsCache(mergedSelectedKeys.value);\n  });\n  const keyEntities = computed(() => mergedRowSelection.value.checkStrictly ? null : convertDataToEntities(configRef.data.value, {\n    externalGetKey: configRef.getRowKey.value,\n    childrenPropName: configRef.childrenColumnName.value\n  }).keyEntities);\n  // Get flatten data\n  const flattedData = computed(() => flattenData(configRef.childrenColumnName.value, configRef.pageData.value));\n  // Get all checkbox props\n  const checkboxPropsMap = computed(() => {\n    const map = new Map();\n    const getRowKey = configRef.getRowKey.value;\n    const getCheckboxProps = mergedRowSelection.value.getCheckboxProps;\n    flattedData.value.forEach((record, index) => {\n      const key = getRowKey(record, index);\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      if (process.env.NODE_ENV !== 'production' && ('checked' in checkboxProps || 'defaultChecked' in checkboxProps)) {\n        devWarning(false, 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n      }\n    });\n    return map;\n  });\n  const {\n    maxLevel,\n    levelEntities\n  } = useMaxLevel(keyEntities);\n  const isCheckboxDisabled = r => {\n    var _a;\n    return !!((_a = checkboxPropsMap.value.get(configRef.getRowKey.value(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  };\n  const selectKeysState = computed(() => {\n    if (mergedRowSelection.value.checkStrictly) {\n      return [mergedSelectedKeys.value || [], []];\n    }\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = conductCheck(mergedSelectedKeys.value, true, keyEntities.value, maxLevel.value, levelEntities.value, isCheckboxDisabled);\n    return [checkedKeys || [], halfCheckedKeys];\n  });\n  const derivedSelectedKeys = computed(() => selectKeysState.value[0]);\n  const derivedHalfSelectedKeys = computed(() => selectKeysState.value[1]);\n  const derivedSelectedKeySet = computed(() => {\n    const keys = mergedRowSelection.value.type === 'radio' ? derivedSelectedKeys.value.slice(0, 1) : derivedSelectedKeys.value;\n    return new Set(keys);\n  });\n  const derivedHalfSelectedKeySet = computed(() => mergedRowSelection.value.type === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys.value));\n  // Save last selected key to enable range selection\n  const [lastSelectedKey, setLastSelectedKey] = useState(null);\n  // // Reset if rowSelection reset\n  // we use computed to reset, donot need setMergedSelectedKeys again like react\n  // https://github.com/vueComponent/ant-design-vue/issues/4885\n  // watchEffect(() => {\n  //   if (!rowSelectionRef.value) {\n  //     setMergedSelectedKeys([]);\n  //   }\n  // });\n  const setSelectedKeys = keys => {\n    let availableKeys;\n    let records;\n    updatePreserveRecordsCache(keys);\n    const {\n      preserveSelectedRowKeys,\n      onChange: onSelectionChange\n    } = mergedRowSelection.value;\n    const {\n      getRecordByKey\n    } = configRef;\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(key => preserveRecordsRef.value.get(key));\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(key => {\n        const record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records);\n  };\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  const triggerSingleSelection = (key, selected, keys, event) => {\n    const {\n      onSelect\n    } = mergedRowSelection.value;\n    const {\n      getRecordByKey\n    } = configRef || {};\n    if (onSelect) {\n      const rows = keys.map(k => getRecordByKey(k));\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys);\n  };\n  const mergedSelections = computed(() => {\n    const {\n      onSelectInvert,\n      onSelectNone,\n      selections,\n      hideSelectAll\n    } = mergedRowSelection.value;\n    const {\n      data,\n      pageData,\n      getRowKey,\n      locale: tableLocale\n    } = configRef;\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(selection => {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.value.selectionAll,\n          onSelect() {\n            setSelectedKeys(data.value.map((record, index) => getRowKey.value(record, index)).filter(key => {\n              const checkProps = checkboxPropsMap.value.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.value.has(key);\n            }));\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.value.selectInvert,\n          onSelect() {\n            const keySet = new Set(derivedSelectedKeySet.value);\n            pageData.value.forEach((record, index) => {\n              const key = getRowKey.value(record, index);\n              const checkProps = checkboxPropsMap.value.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            const keys = Array.from(keySet);\n            if (onSelectInvert) {\n              devWarning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.');\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys);\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.value.selectNone,\n          onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet.value).filter(key => {\n              const checkProps = checkboxPropsMap.value.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }));\n          }\n        };\n      }\n      return selection;\n    });\n  });\n  const flattedDataLength = computed(() => flattedData.value.length);\n  // ======================= Columns ========================\n  const transformColumns = columns => {\n    var _a;\n    const {\n      onSelectAll,\n      onSelectMultiple,\n      columnWidth: selectionColWidth,\n      type: selectionType,\n      fixed,\n      renderCell: customizeRenderCell,\n      hideSelectAll,\n      checkStrictly\n    } = mergedRowSelection.value;\n    const {\n      prefixCls,\n      getRecordByKey,\n      getRowKey,\n      expandType,\n      getPopupContainer\n    } = configRef;\n    if (!rowSelectionRef.value) {\n      if (process.env.NODE_ENV !== 'production') {\n        devWarning(!columns.includes(SELECTION_COLUMN), 'Table', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.');\n      }\n      return columns.filter(col => col !== SELECTION_COLUMN);\n    }\n    // Support selection\n    let cloneColumns = columns.slice();\n    const keySet = new Set(derivedSelectedKeySet.value);\n    // Record key only need check with enabled\n    const recordKeys = flattedData.value.map(getRowKey.value).filter(key => !checkboxPropsMap.value.get(key).disabled);\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n    const onSelectAllChange = () => {\n      const changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(key => {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(key => {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      const keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n      setSelectedKeys(keys);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    let title;\n    if (selectionType !== 'radio') {\n      let customizeSelections;\n      if (mergedSelections.value) {\n        const menu = _createVNode(Menu, {\n          \"getPopupContainer\": getPopupContainer.value\n        }, {\n          default: () => [mergedSelections.value.map((selection, index) => {\n            const {\n              key,\n              text,\n              onSelect: onSelectionClick\n            } = selection;\n            return _createVNode(Menu.Item, {\n              \"key\": key || index,\n              \"onClick\": () => {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              }\n            }, {\n              default: () => [text]\n            });\n          })]\n        });\n        customizeSelections = _createVNode(\"div\", {\n          \"class\": `${prefixCls.value}-selection-extra`\n        }, [_createVNode(Dropdown, {\n          \"overlay\": menu,\n          \"getPopupContainer\": getPopupContainer.value\n        }, {\n          default: () => [_createVNode(\"span\", null, [_createVNode(DownOutlined, null, null)])]\n        })]);\n      }\n      const allDisabledData = flattedData.value.map((record, index) => {\n        const key = getRowKey.value(record, index);\n        const checkboxProps = checkboxPropsMap.value.get(key) || {};\n        return _extends({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(_ref => {\n        let {\n          disabled\n        } = _ref;\n        return disabled;\n      });\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedDataLength.value;\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(_ref2 => {\n        let {\n          checked\n        } = _ref2;\n        return checked;\n      });\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(_ref3 => {\n        let {\n          checked\n        } = _ref3;\n        return checked;\n      });\n      title = !hideSelectAll && _createVNode(\"div\", {\n        \"class\": `${prefixCls.value}-selection`\n      }, [_createVNode(Checkbox, {\n        \"checked\": !allDisabled ? !!flattedDataLength.value && checkedCurrentAll : allDisabledAndChecked,\n        \"indeterminate\": !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        \"onChange\": onSelectAllChange,\n        \"disabled\": flattedDataLength.value === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        \"skipGroup\": true\n      }, null), customizeSelections]);\n    }\n    // Body Cell\n    let renderCell;\n    if (selectionType === 'radio') {\n      renderCell = _ref4 => {\n        let {\n          record,\n          index\n        } = _ref4;\n        const key = getRowKey.value(record, index);\n        const checked = keySet.has(key);\n        return {\n          node: _createVNode(Radio, _objectSpread(_objectSpread({}, checkboxPropsMap.value.get(key)), {}, {\n            \"checked\": checked,\n            \"onClick\": e => e.stopPropagation(),\n            \"onChange\": event => {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          }), null),\n          checked\n        };\n      };\n    } else {\n      renderCell = _ref5 => {\n        let {\n          record,\n          index\n        } = _ref5;\n        var _a;\n        const key = getRowKey.value(record, index);\n        const checked = keySet.has(key);\n        const indeterminate = derivedHalfSelectedKeySet.value.has(key);\n        const checkboxProps = checkboxPropsMap.value.get(key);\n        let mergedIndeterminate;\n        if (expandType.value === 'nest') {\n          mergedIndeterminate = indeterminate;\n          devWarning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.');\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: _createVNode(Checkbox, _objectSpread(_objectSpread({}, checkboxProps), {}, {\n            \"indeterminate\": mergedIndeterminate,\n            \"checked\": checked,\n            \"skipGroup\": true,\n            \"onClick\": e => e.stopPropagation(),\n            \"onChange\": _ref6 => {\n              let {\n                nativeEvent\n              } = _ref6;\n              const {\n                shiftKey\n              } = nativeEvent;\n              let startIndex = -1;\n              let endIndex = -1;\n              // Get range of this\n              if (shiftKey && checkStrictly) {\n                const pointKeys = new Set([lastSelectedKey.value, key]);\n                recordKeys.some((recordKey, recordIndex) => {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n                  return false;\n                });\n              }\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                const rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                const changedKeys = [];\n                if (checked) {\n                  rangeKeys.forEach(recordKey => {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.delete(recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(recordKey => {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n                const keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                setSelectedKeys(keys);\n              } else {\n                // Single record selected\n                const originCheckedKeys = derivedSelectedKeys.value;\n                if (checkStrictly) {\n                  const checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  const result = conductCheck([...originCheckedKeys, key], true, keyEntities.value, maxLevel.value, levelEntities.value, isCheckboxDisabled);\n                  const {\n                    checkedKeys,\n                    halfCheckedKeys\n                  } = result;\n                  let nextCheckedKeys = checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    const tempKeySet = new Set(checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys\n                    }, keyEntities.value, maxLevel.value, levelEntities.value, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              setLastSelectedKey(key);\n            }\n          }), null),\n          checked\n        };\n      };\n    }\n    const renderSelectionCell = _ref7 => {\n      let {\n        record,\n        index\n      } = _ref7;\n      const {\n        node,\n        checked\n      } = renderCell({\n        record,\n        index\n      });\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(col => {\n        var _a;\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        const [expandColumn, ...restColumns] = cloneColumns;\n        cloneColumns = [expandColumn, SELECTION_COLUMN, ...restColumns];\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN, ...cloneColumns];\n      }\n    }\n    // Deduplicate selection column\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    if (process.env.NODE_ENV !== 'production' && cloneColumns.filter(col => col === SELECTION_COLUMN).length > 1) {\n      devWarning(false, 'Table', 'Multiple `SELECTION_COLUMN` exist in `columns`.');\n    }\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex);\n    // Fixed column logic\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\n    let mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    // Replace with real selection column\n    const selectionColumn = {\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: `${prefixCls.value}-selection-column`,\n      title: mergedRowSelection.value.columnTitle || title,\n      customRender: renderSelectionCell,\n      [INTERNAL_COL_DEFINE]: {\n        class: `${prefixCls.value}-selection-col`\n      }\n    };\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\n  };\n  return [transformColumns, derivedSelectedKeySet];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}