{"ast":null,"code":"import _typeof from \"C:/Users/zhouy/WebstormProjects/lingo/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { watch, shallowRef } from 'vue';\nexport default function useLazyKVMap(dataRef, childrenColumnNameRef, getRowKeyRef) {\n  var mapCacheRef = shallowRef({});\n  watch([dataRef, childrenColumnNameRef, getRowKeyRef], function () {\n    var kvMap = new Map();\n    var getRowKey = getRowKeyRef.value;\n    var childrenColumnName = childrenColumnNameRef.value;\n    /* eslint-disable no-inner-declarations */\n    function dig(records) {\n      records.forEach(function (record, index) {\n        var rowKey = getRowKey(record, index);\n        kvMap.set(rowKey, record);\n        if (record && _typeof(record) === 'object' && childrenColumnName in record) {\n          dig(record[childrenColumnName] || []);\n        }\n      });\n    }\n    /* eslint-enable */\n    dig(dataRef.value);\n    mapCacheRef.value = {\n      kvMap: kvMap\n    };\n  }, {\n    deep: true,\n    immediate: true\n  });\n  function getRecordByKey(key) {\n    return mapCacheRef.value.kvMap.get(key);\n  }\n  return [getRecordByKey];\n}","map":{"version":3,"names":["watch","shallowRef","useLazyKVMap","dataRef","childrenColumnNameRef","getRowKeyRef","mapCacheRef","kvMap","Map","getRowKey","value","childrenColumnName","dig","records","forEach","record","index","rowKey","set","_typeof","deep","immediate","getRecordByKey","key","get"],"sources":["C:/Users/zhouy/WebstormProjects/lingo/node_modules/ant-design-vue/es/table/hooks/useLazyKVMap.js"],"sourcesContent":["import { watch, shallowRef } from 'vue';\nexport default function useLazyKVMap(dataRef, childrenColumnNameRef, getRowKeyRef) {\n  const mapCacheRef = shallowRef({});\n  watch([dataRef, childrenColumnNameRef, getRowKeyRef], () => {\n    const kvMap = new Map();\n    const getRowKey = getRowKeyRef.value;\n    const childrenColumnName = childrenColumnNameRef.value;\n    /* eslint-disable no-inner-declarations */\n    function dig(records) {\n      records.forEach((record, index) => {\n        const rowKey = getRowKey(record, index);\n        kvMap.set(rowKey, record);\n        if (record && typeof record === 'object' && childrenColumnName in record) {\n          dig(record[childrenColumnName] || []);\n        }\n      });\n    }\n    /* eslint-enable */\n    dig(dataRef.value);\n    mapCacheRef.value = {\n      kvMap\n    };\n  }, {\n    deep: true,\n    immediate: true\n  });\n  function getRecordByKey(key) {\n    return mapCacheRef.value.kvMap.get(key);\n  }\n  return [getRecordByKey];\n}"],"mappings":";;;;;;;AAAA,SAASA,KAAK,EAAEC,UAAU,QAAQ,KAAK;AACvC,eAAe,SAASC,YAAYA,CAACC,OAAO,EAAEC,qBAAqB,EAAEC,YAAY,EAAE;EACjF,IAAMC,WAAW,GAAGL,UAAU,CAAC,CAAC,CAAC,CAAC;EAClCD,KAAK,CAAC,CAACG,OAAO,EAAEC,qBAAqB,EAAEC,YAAY,CAAC,EAAE,YAAM;IAC1D,IAAME,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;IACvB,IAAMC,SAAS,GAAGJ,YAAY,CAACK,KAAK;IACpC,IAAMC,kBAAkB,GAAGP,qBAAqB,CAACM,KAAK;IACtD;IACA,SAASE,GAAGA,CAACC,OAAO,EAAE;MACpBA,OAAO,CAACC,OAAO,CAAC,UAACC,MAAM,EAAEC,KAAK,EAAK;QACjC,IAAMC,MAAM,GAAGR,SAAS,CAACM,MAAM,EAAEC,KAAK,CAAC;QACvCT,KAAK,CAACW,GAAG,CAACD,MAAM,EAAEF,MAAM,CAAC;QACzB,IAAIA,MAAM,IAAII,OAAA,CAAOJ,MAAM,MAAK,QAAQ,IAAIJ,kBAAkB,IAAII,MAAM,EAAE;UACxEH,GAAG,CAACG,MAAM,CAACJ,kBAAkB,CAAC,IAAI,EAAE,CAAC;QACvC;MACF,CAAC,CAAC;IACJ;IACA;IACAC,GAAG,CAACT,OAAO,CAACO,KAAK,CAAC;IAClBJ,WAAW,CAACI,KAAK,GAAG;MAClBH,KAAK,EAALA;IACF,CAAC;EACH,CAAC,EAAE;IACDa,IAAI,EAAE,IAAI;IACVC,SAAS,EAAE;EACb,CAAC,CAAC;EACF,SAASC,cAAcA,CAACC,GAAG,EAAE;IAC3B,OAAOjB,WAAW,CAACI,KAAK,CAACH,KAAK,CAACiB,GAAG,CAACD,GAAG,CAAC;EACzC;EACA,OAAO,CAACD,cAAc,CAAC;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}