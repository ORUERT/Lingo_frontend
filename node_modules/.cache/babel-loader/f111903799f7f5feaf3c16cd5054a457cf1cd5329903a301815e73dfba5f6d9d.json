{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  style: {\n    \"padding\": \"10px\",\n    \"margin-bottom\": \"50px\"\n  }\n};\nvar _hoisted_2 = {\n  \"class\": \"chat-box\"\n};\nvar _hoisted_3 = {\n  \"class\": \"chat-title\"\n};\nvar _hoisted_4 = [\"innerHTML\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_message_outlined = _resolveComponent(\"message-outlined\");\n  var _component_a_input = _resolveComponent(\"a-input\");\n  var _component_a_input_group = _resolveComponent(\"a-input-group\");\n  var _component_a_col = _resolveComponent(\"a-col\");\n  var _component_a_row = _resolveComponent(\"a-row\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_a_row, null, {\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_a_col, {\n        \"class\": \"chat-col\",\n        span: 16\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, \" Web聊天室（\" + _toDisplayString($data.chatUser) + \"） \", 1 /* TEXT */), _createElementVNode(\"div\", {\n            \"class\": \"chat-content\",\n            innerHTML: $data.content\n          }, null, 8 /* PROPS */, _hoisted_4), _createVNode(_component_a_input_group, {\n            size: \"small\",\n            compact: \"\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_a_input, {\n                \"class\": \"chat-input\"\n              }, {\n                suffix: _withCtx(function () {\n                  return [_createVNode(_component_message_outlined, {\n                    style: {\n                      fontSize: '20px',\n                      color: '#000000'\n                    },\n                    onClick: $options.onck\n                  }, null, 8 /* PROPS */, [\"onClick\"])];\n                }),\n                _: 1 /* STABLE */\n              })];\n            }),\n\n            _: 1 /* STABLE */\n          })])];\n        }),\n\n        _: 1 /* STABLE */\n      })];\n    }),\n\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["style","_createElementBlock","_hoisted_1","_createVNode","_component_a_row","_component_a_col","span","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","$data","chatUser","innerHTML","content","_component_a_input_group","size","compact","_component_a_input","suffix","_withCtx","_component_message_outlined","fontSize","color","onClick","$options","onck"],"sources":["C:\\Users\\zhouy\\WebstormProjects\\lingo\\src\\view\\chat.vue"],"sourcesContent":["<template>\r\n  <div  style=\"padding: 10px; margin-bottom: 50px\">\r\n    <a-row >\r\n      <a-col class=\"chat-col\" :span=\"16\">\r\n        <div class=\"chat-box\">\r\n          <div class=\"chat-title\">\r\n            Web聊天室（{{ chatUser }}）\r\n          </div>\r\n          <div class=\"chat-content\" v-html=\"content\"></div>\r\n          <a-input-group size=\"small\" compact>\r\n            <a-input  class=\"chat-input\" >\r\n              <template #suffix>\r\n                <message-outlined :style=\"{fontSize: '20px', color: '#000000'}\" @click=\"onck\" />\r\n              </template>\r\n            </a-input>\r\n\r\n          </a-input-group>\r\n        </div>\r\n      </a-col>\r\n    </a-row>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { MessageOutlined  } from '@ant-design/icons-vue';\r\n// import request from \"@/utils/request\";\r\n// let socket;\r\nexport default {\r\n  components: {\r\n    MessageOutlined\r\n  },\r\n  name: \"Im\",\r\n\r\n  data() {\r\n    return {\r\n      circleUrl: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\r\n      user: {},\r\n      isCollapse: false,\r\n      users: [],\r\n      chatUser: '',\r\n      text: \"\",\r\n      messages: [],\r\n      content: ''\r\n    }\r\n  },\r\n  created() {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    onck() {\r\n      console.log('onck')\r\n    },\r\n    send() {\r\n      if (!this.chatUser) {\r\n        this.$message({type: 'warning', message: \"请选择聊天对象\"})\r\n        return;\r\n      }\r\n      if (!this.text) {\r\n        this.$message({type: 'warning', message: \"请输入内容\"})\r\n      } else {\r\n        if (typeof (WebSocket) == \"undefined\") {\r\n          console.log(\"您的浏览器不支持WebSocket\");\r\n        } else {\r\n          console.log(\"您的浏览器支持WebSocket\");\r\n          // 组装待发送的消息 json\r\n          // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\r\n          let message = {from: this.user.username, to: this.chatUser, text: this.text}\r\n          // socket.send(JSON.stringify(message));  // 将组装好的json发送给服务端，由服务端进行转发\r\n          this.messages.push({user: this.user.username, text: this.text})\r\n          // 构建消息内容，本人消息\r\n          this.createContent(null, this.user.username, this.text)\r\n          this.text = '';\r\n        }\r\n      }\r\n    },\r\n    createContent(remoteUser, nowUser, text) {  // 这个方法是用来将 json的聊天消息数据转换成 html的。\r\n      let html\r\n      // 当前用户消息\r\n      if (nowUser) { // nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡\r\n        html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\r\n            \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: right; padding-right: 10px\\\">\\n\" +\r\n            \"    <div class=\\\"tip left\\\">\" + text + \"</div>\\n\" +\r\n            \"  </div>\\n\" +\r\n            \"  <div class=\\\"el-col el-col-2\\\">\\n\" +\r\n            \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\r\n            \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\r\n            \"  </span>\\n\" +\r\n            \"  </div>\\n\" +\r\n            \"</div>\";\r\n      } else if (remoteUser) {   // remoteUser表示远程用户聊天消息，蓝色的气泡\r\n        html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\r\n            \"  <div class=\\\"el-col el-col-2\\\" style=\\\"text-align: right\\\">\\n\" +\r\n            \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\r\n            \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\r\n            \"  </span>\\n\" +\r\n            \"  </div>\\n\" +\r\n            \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: left; padding-left: 10px\\\">\\n\" +\r\n            \"    <div class=\\\"tip right\\\">\" + text + \"</div>\\n\" +\r\n            \"  </div>\\n\" +\r\n            \"</div>\";\r\n      }\r\n      console.log(html)\r\n      this.content += html;\r\n    },\r\n    init() {\r\n      this.user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {}\r\n      let username = this.user.username;\r\n      let _this = this;\r\n      if (typeof (WebSocket) == \"undefined\") {\r\n        console.log(\"您的浏览器不支持WebSocket\");\r\n      } else {\r\n        console.log(\"您的浏览器支持WebSocket\");\r\n        let socketUrl = \"ws://localhost:9090/imserver/\" + username;\r\n        // if (socket != null) {\r\n        //   socket.close();\r\n        //   socket = null;\r\n        // }\r\n        // 开启一个websocket服务\r\n        // socket = new WebSocket(socketUrl);\r\n        //打开事件\r\n        // socket.onopen = function () {\r\n        //   console.log(\"websocket已打开\");\r\n        // };\r\n        //  浏览器端收消息，获得从服务端发送过来的文本消息\r\n        // socket.onmessage = function (msg) {\r\n        //   console.log(\"收到数据====\" + msg.data)\r\n        //   let data = JSON.parse(msg.data)  // 对收到的json数据进行解析， 类似这样的： {\"users\": [{\"username\": \"zhang\"},{ \"username\": \"admin\"}]}\r\n        //   if (data.users) {  // 获取在线人员信息\r\n        //     _this.users = data.users.filter(user => user.username !== username)  // 获取当前连接的所有用户信息，并且排除自身，自己不会出现在自己的聊天列表里\r\n        //   } else {\r\n        //     // 如果服务器端发送过来的json数据 不包含 users 这个key，那么发送过来的就是聊天文本json数据\r\n        //     //  // {\"from\": \"zhang\", \"text\": \"hello\"}\r\n        //     if (data.from === _this.chatUser) {\r\n        //       _this.messages.push(data)\r\n        //       // 构建消息内容\r\n        //       _this.createContent(data.from, null, data.text)\r\n        //     }\r\n        //   }\r\n        // };\r\n        //关闭事件\r\n        // socket.onclose = function () {\r\n        //   console.log(\"websocket已关闭\");\r\n        // };\r\n        // //发生了错误事件\r\n        // socket.onerror = function () {\r\n        //   console.log(\"websocket发生了错误\");\r\n        // }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style>\r\n@import \"../scss/pages/_chat.scss\";\r\n</style>\r\n"],"mappings":";;EACQA,KAA0C,EAA1C;IAAA;IAAA;EAAA;AAA0C;;EAGrC,SAAM;AAAU;;EACd,SAAM;AAAY;;;;;;;;uBAJ/BC,mBAAA,CAmBM,OAnBNC,UAmBM,GAlBJC,YAAA,CAiBQC,gBAAA;wBAhBN;MAAA,OAeQ,CAfRD,YAAA,CAeQE,gBAAA;QAfD,SAAM,UAAU;QAAEC,IAAI,EAAE;;4BAC7B;UAAA,OAaM,CAbNC,mBAAA,CAaM,OAbNC,UAaM,GAZJD,mBAAA,CAEM,OAFNE,UAEM,EAFkB,UACf,GAAAC,gBAAA,CAAGC,KAAA,CAAAC,QAAQ,IAAG,IACvB,iBACAL,mBAAA,CAAiD;YAA5C,SAAM,cAAc;YAACM,SAAgB,EAARF,KAAA,CAAAG;+CAClCX,YAAA,CAOgBY,wBAAA;YAPDC,IAAI,EAAC,OAAO;YAACC,OAAO,EAAP;;gCAC1B;cAAA,OAIU,CAJVd,YAAA,CAIUe,kBAAA;gBAJA,SAAM;cAAY;gBACfC,MAAM,EAAAC,QAAA,CACf;kBAAA,OAAgF,CAAhFjB,YAAA,CAAgFkB,2BAAA;oBAA7DrB,KAAK,EAAE;sBAAAsB,QAAA;sBAAAC,KAAA;oBAAA,CAAoC;oBAAGC,OAAK,EAAEC,QAAA,CAAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}