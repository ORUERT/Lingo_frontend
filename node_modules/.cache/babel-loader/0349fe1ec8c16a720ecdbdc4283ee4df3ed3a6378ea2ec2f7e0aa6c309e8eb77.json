{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { MessageOutlined } from '@ant-design/icons-vue';\nimport axios from \"@/axios\";\nimport { defineComponent, reactive } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { useRouter } from \"vue-router\";\n// import request from \"@/utils/request\";\n// let socket;\nexport default defineComponent({\n  setup: function setup() {\n    var _this = this;\n    var store = useStore();\n    var router = useRouter();\n    var formState = reactive({\n      username: 'oruert',\n      password: '321',\n      rememberMe: false\n    });\n    var rules = reactive({\n      username: [{\n        required: true,\n        message: '请输入用户名',\n        trigger: 'blur'\n      }, {\n        min: 3,\n        max: 15,\n        message: '长度在 3 到 15 个字符',\n        trigger: 'blur'\n      }],\n      password: [{\n        required: true,\n        message: '请选择密码',\n        trigger: 'change'\n      }]\n    });\n    var onFinish = function onFinish(values) {\n      console.log('Success:', values.username);\n      axios.post('/login', values).then(function (res) {\n        // console.log(res)\n        if (res.data.status === 100) {\n          var jwt = res.data.data;\n          console.log(\"jwt\", jwt);\n\n          // 把数据共享出去\n          store.commit(\"SET_TOKEN\", jwt);\n          // 获取\n          router.push('/home');\n        } else {\n          _this.$message.error('登录失败');\n        }\n      })[\"catch\"](function (err) {\n        console.log(err);\n      });\n    };\n    var onFinishFailed = function onFinishFailed(errorInfo) {\n      console.log('Failed:', errorInfo);\n    };\n    return {\n      formState: formState,\n      rules: rules,\n      onFinish: onFinish,\n      onFinishFailed: onFinishFailed\n    };\n  } // components: {\n  //   MessageOutlined\n  // },\n  //\n  // data() {\n  //   return {\n  //     circleUrl: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\n  //     user: {},\n  //     isCollapse: false,\n  //     users: [],\n  //     chatUser: '',\n  //     text: \"\",\n  //     messages: [],\n  //     content: ''\n  //   }\n  // },\n  // computed: {\n  //   isTextEmpty() {\n  //     return this.text.length === 0; // 判断文本是否为空\n  //   }\n  // },\n  // created() {\n  //   this.init()\n  // },\n  // methods: {\n  //   onck() {\n  //     console.log('onck')\n  //   },\n  //   send() {\n  //     if (typeof (WebSocket) == \"undefined\") {\n  //       console.log(\"您的浏览器不支持WebSocket\");\n  //     } else {\n  //       console.log(\"您的浏览器支持WebSocket\");\n  //       // 组装待发送的消息 json\n  //       // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n  //       let message = {from: this.user.username, to: this.chatUser, text: this.text}\n  //       axios.post('/message',message,{\n  //         headers:{\n  //           'Content-Type':'application/json',\n  //           'Authorization':localStorage.getItem('token')\n  //         }\n  //       }).then(res=>{\n  //         if(res.data.status === 100){\n  //           //create message\n  //           // socket.send(JSON.stringify(message));  // 将组装好的json发送给服务端，由服务端进行转发\n  //           this.messages.push({user: this.user.username, text: this.text})\n  //           // 构建消息内容，本人消息\n  //           this.createContent(null, this.user.username, this.text)\n  //           this.text = '';\n  //         }else{\n  //           //create error message\n  //           // this.$message.error('登录失败')\n  //         }\n  //       }).catch(err=>{\n  //         console.log(err)\n  //       })\n  //     }\n  //   },\n  //   createContent(remoteUser, nowUser, text) {  // 这个方法是用来将 json的聊天消息数据转换成 html的。\n  //     let html\n  //     // 当前用户消息\n  //     if (nowUser) { // nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡\n  //       html = \"<div class=\\\"a-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\n  //           \"  <div class=\\\"a-col a-col-22\\\" style=\\\"text-align: right; padding-right: 10px\\\">\\n\" +\n  //           \"    <div class=\\\"tip left\\\">\" + text + \"</div>\\n\" +\n  //           \"  </div>\\n\" +\n  //           \"  <div class=\\\"a-col a-col-2\\\">\\n\" +\n  //           \"  <span class=\\\"a-avatar a-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\n  //           \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\n  //           \"  </span>\\n\" +\n  //           \"  </div>\\n\" +\n  //           \"</div>\";\n  //     } else if (remoteUser) {   // remoteUser表示远程用户聊天消息，蓝色的气泡\n  //       html = \"<div class=\\\"a-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\n  //           \"  <div class=\\\"a-col a-col-2\\\" style=\\\"text-align: right\\\">\\n\" +\n  //           \"  <span class=\\\"a-avatar a-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\n  //           \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\n  //           \"  </span>\\n\" +\n  //           \"  </div>\\n\" +\n  //           \"  <div class=\\\"a-col a-col-22\\\" style=\\\"text-align: left; padding-left: 10px\\\">\\n\" +\n  //           \"    <div class=\\\"tip right\\\">\" + text + \"</div>\\n\" +\n  //           \"  </div>\\n\" +\n  //           \"</div>\";\n  //     }\n  //     console.log(html)\n  //     this.content += html;\n  //   },\n  //   init() {\n  //     this.user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {}\n  //     let username = this.user.username;\n  //     let _this = this;\n  //     if (typeof (WebSocket) == \"undefined\") {\n  //       console.log(\"您的浏览器不支持WebSocket\");\n  //     } else {\n  //       console.log(\"您的浏览器支持WebSocket\");\n  //       let socketUrl = \"ws://localhost:9090/imserver/\" + username;\n  //\n  //     }\n  //   }\n  // }\n});","map":{"version":3,"names":["MessageOutlined","axios","defineComponent","reactive","useStore","useRouter","setup","_this","store","router","formState","username","password","rememberMe","rules","required","message","trigger","min","max","onFinish","values","console","log","post","then","res","data","status","jwt","commit","push","$message","error","err","onFinishFailed","errorInfo"],"sources":["C:\\Users\\zhouy\\WebstormProjects\\lingo\\src\\view\\ChatWindow.vue"],"sourcesContent":["<template>\r\n  <div  style=\"padding: 10px; margin-bottom: 50px\">\r\n    <a-row >\r\n      <a-col class=\"chat-col\" :span=\"16\">\r\n        <div class=\"chat-box\">\r\n          <div class=\"chat-title\">\r\n            Web聊天室（{{ chatUser }}）\r\n          </div>\r\n          <div class=\"chat-content\" v-html=\"content\"></div>\r\n          <div class=\"chat-input\">\r\n            <a-input-group >\r\n              <a-input class=\"chat-a-input\" v-model:value=\"text\" size=\"small\">\r\n                <template #suffix>\r\n                  <message-outlined :style=\"{fontSize: '20px', color: isTextEmpty ? '#808080' : '#000000'}\" @click=\"isTextEmpty ? null : onck\" />                </template>\r\n              </a-input>\r\n            </a-input-group>\r\n          </div>\r\n\r\n        </div>\r\n      </a-col>\r\n    </a-row>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { MessageOutlined  } from '@ant-design/icons-vue';\r\nimport axios from \"@/axios\";\r\nimport {defineComponent, reactive} from \"vue\";\r\nimport {useStore} from \"vuex\";\r\nimport {useRouter} from \"vue-router\";\r\n// import request from \"@/utils/request\";\r\n// let socket;\r\nexport default defineComponent( {\r\n  setup(){\r\n    const store = useStore();\r\n    const router = useRouter();\r\n    const formState = reactive({\r\n      username: 'oruert',\r\n      password: '321',\r\n      rememberMe: false,\r\n    });\r\n    const rules = reactive({\r\n      username: [\r\n        { required: true, message: '请输入用户名', trigger: 'blur' },\r\n        { min: 3, max: 15, message: '长度在 3 到 15 个字符', trigger: 'blur' }\r\n      ],\r\n      password: [\r\n        { required: true, message: '请选择密码', trigger: 'change' }\r\n      ]\r\n    });\r\n    const onFinish = values => {\r\n      console.log('Success:', values.username);\r\n\r\n      axios.post('/login',values).then(res=>{\r\n        // console.log(res)\r\n        if(res.data.status === 100){\r\n          const jwt = res.data.data;\r\n          console.log(\"jwt\",jwt)\r\n\r\n          // 把数据共享出去\r\n          store.commit(\"SET_TOKEN\", jwt)\r\n          // 获取\r\n          router.push('/home')\r\n        }else{\r\n          this.$message.error('登录失败')\r\n        }\r\n      }).catch(err=>{\r\n        console.log(err)\r\n      })\r\n    };\r\n    const onFinishFailed = errorInfo => {\r\n      console.log('Failed:', errorInfo);\r\n    };\r\n    return {\r\n      formState,\r\n      rules,\r\n      onFinish,\r\n      onFinishFailed,\r\n    };\r\n  }\r\n  // components: {\r\n  //   MessageOutlined\r\n  // },\r\n  //\r\n  // data() {\r\n  //   return {\r\n  //     circleUrl: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\r\n  //     user: {},\r\n  //     isCollapse: false,\r\n  //     users: [],\r\n  //     chatUser: '',\r\n  //     text: \"\",\r\n  //     messages: [],\r\n  //     content: ''\r\n  //   }\r\n  // },\r\n  // computed: {\r\n  //   isTextEmpty() {\r\n  //     return this.text.length === 0; // 判断文本是否为空\r\n  //   }\r\n  // },\r\n  // created() {\r\n  //   this.init()\r\n  // },\r\n  // methods: {\r\n  //   onck() {\r\n  //     console.log('onck')\r\n  //   },\r\n  //   send() {\r\n  //     if (typeof (WebSocket) == \"undefined\") {\r\n  //       console.log(\"您的浏览器不支持WebSocket\");\r\n  //     } else {\r\n  //       console.log(\"您的浏览器支持WebSocket\");\r\n  //       // 组装待发送的消息 json\r\n  //       // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\r\n  //       let message = {from: this.user.username, to: this.chatUser, text: this.text}\r\n  //       axios.post('/message',message,{\r\n  //         headers:{\r\n  //           'Content-Type':'application/json',\r\n  //           'Authorization':localStorage.getItem('token')\r\n  //         }\r\n  //       }).then(res=>{\r\n  //         if(res.data.status === 100){\r\n  //           //create message\r\n  //           // socket.send(JSON.stringify(message));  // 将组装好的json发送给服务端，由服务端进行转发\r\n  //           this.messages.push({user: this.user.username, text: this.text})\r\n  //           // 构建消息内容，本人消息\r\n  //           this.createContent(null, this.user.username, this.text)\r\n  //           this.text = '';\r\n  //         }else{\r\n  //           //create error message\r\n  //           // this.$message.error('登录失败')\r\n  //         }\r\n  //       }).catch(err=>{\r\n  //         console.log(err)\r\n  //       })\r\n  //     }\r\n  //   },\r\n  //   createContent(remoteUser, nowUser, text) {  // 这个方法是用来将 json的聊天消息数据转换成 html的。\r\n  //     let html\r\n  //     // 当前用户消息\r\n  //     if (nowUser) { // nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡\r\n  //       html = \"<div class=\\\"a-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\r\n  //           \"  <div class=\\\"a-col a-col-22\\\" style=\\\"text-align: right; padding-right: 10px\\\">\\n\" +\r\n  //           \"    <div class=\\\"tip left\\\">\" + text + \"</div>\\n\" +\r\n  //           \"  </div>\\n\" +\r\n  //           \"  <div class=\\\"a-col a-col-2\\\">\\n\" +\r\n  //           \"  <span class=\\\"a-avatar a-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\r\n  //           \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\r\n  //           \"  </span>\\n\" +\r\n  //           \"  </div>\\n\" +\r\n  //           \"</div>\";\r\n  //     } else if (remoteUser) {   // remoteUser表示远程用户聊天消息，蓝色的气泡\r\n  //       html = \"<div class=\\\"a-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\r\n  //           \"  <div class=\\\"a-col a-col-2\\\" style=\\\"text-align: right\\\">\\n\" +\r\n  //           \"  <span class=\\\"a-avatar a-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\r\n  //           \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\r\n  //           \"  </span>\\n\" +\r\n  //           \"  </div>\\n\" +\r\n  //           \"  <div class=\\\"a-col a-col-22\\\" style=\\\"text-align: left; padding-left: 10px\\\">\\n\" +\r\n  //           \"    <div class=\\\"tip right\\\">\" + text + \"</div>\\n\" +\r\n  //           \"  </div>\\n\" +\r\n  //           \"</div>\";\r\n  //     }\r\n  //     console.log(html)\r\n  //     this.content += html;\r\n  //   },\r\n  //   init() {\r\n  //     this.user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {}\r\n  //     let username = this.user.username;\r\n  //     let _this = this;\r\n  //     if (typeof (WebSocket) == \"undefined\") {\r\n  //       console.log(\"您的浏览器不支持WebSocket\");\r\n  //     } else {\r\n  //       console.log(\"您的浏览器支持WebSocket\");\r\n  //       let socketUrl = \"ws://localhost:9090/imserver/\" + username;\r\n  //\r\n  //     }\r\n  //   }\r\n  // }\r\n})\r\n</script>\r\n<style>\r\n@import \"../scss/pages/_chat.scss\";\r\n</style>\r\n"],"mappings":";AAwBA,SAASA,eAAc,QAAU,uBAAuB;AACxD,OAAOC,KAAI,MAAO,SAAS;AAC3B,SAAQC,eAAe,EAAEC,QAAQ,QAAO,KAAK;AAC7C,SAAQC,QAAQ,QAAO,MAAM;AAC7B,SAAQC,SAAS,QAAO,YAAY;AACpC;AACA;AACA,eAAeH,eAAe,CAAE;EAC9BI,KAAK,WAAAA,MAAA,EAAE;IAAA,IAAAC,KAAA;IACL,IAAMC,KAAI,GAAIJ,QAAQ,CAAC,CAAC;IACxB,IAAMK,MAAK,GAAIJ,SAAS,CAAC,CAAC;IAC1B,IAAMK,SAAQ,GAAIP,QAAQ,CAAC;MACzBQ,QAAQ,EAAE,QAAQ;MAClBC,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,IAAMC,KAAI,GAAIX,QAAQ,CAAC;MACrBQ,QAAQ,EAAE,CACR;QAAEI,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAO,CAAC,EACtD;QAAEC,GAAG,EAAE,CAAC;QAAEC,GAAG,EAAE,EAAE;QAAEH,OAAO,EAAE,gBAAgB;QAAEC,OAAO,EAAE;MAAO,EAC/D;MACDL,QAAQ,EAAE,CACR;QAAEG,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,OAAO;QAAEC,OAAO,EAAE;MAAS;IAE1D,CAAC,CAAC;IACF,IAAMG,QAAO,GAAI,SAAXA,QAAOA,CAAIC,MAAK,EAAK;MACzBC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEF,MAAM,CAACV,QAAQ,CAAC;MAExCV,KAAK,CAACuB,IAAI,CAAC,QAAQ,EAACH,MAAM,CAAC,CAACI,IAAI,CAAC,UAAAC,GAAG,EAAE;QACpC;QACA,IAAGA,GAAG,CAACC,IAAI,CAACC,MAAK,KAAM,GAAG,EAAC;UACzB,IAAMC,GAAE,GAAIH,GAAG,CAACC,IAAI,CAACA,IAAI;UACzBL,OAAO,CAACC,GAAG,CAAC,KAAK,EAACM,GAAG;;UAErB;UACArB,KAAK,CAACsB,MAAM,CAAC,WAAW,EAAED,GAAG;UAC7B;UACApB,MAAM,CAACsB,IAAI,CAAC,OAAO;QACrB,CAAC,MAAI;UACHxB,KAAI,CAACyB,QAAQ,CAACC,KAAK,CAAC,MAAM;QAC5B;MACF,CAAC,CAAC,SAAM,CAAC,UAAAC,GAAG,EAAE;QACZZ,OAAO,CAACC,GAAG,CAACW,GAAG;MACjB,CAAC;IACH,CAAC;IACD,IAAMC,cAAa,GAAI,SAAjBA,cAAaA,CAAIC,SAAQ,EAAK;MAClCd,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEa,SAAS,CAAC;IACnC,CAAC;IACD,OAAO;MACL1B,SAAS,EAATA,SAAS;MACTI,KAAK,EAALA,KAAK;MACLM,QAAQ,EAARA,QAAQ;MACRe,cAAc,EAAd},"metadata":{},"sourceType":"module","externalDependencies":[]}