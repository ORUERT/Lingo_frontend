{"ast":null,"code":"import \"core-js/modules/es.date.get-year.js\";\nimport \"core-js/modules/es.date.set-year.js\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { createVNode as _createVNode } from \"vue\";\nimport { YEAR_DECADE_COUNT } from '.';\nimport useCellClassName from '../../hooks/useCellClassName';\nimport { formatValue, isSameYear } from '../../utils/dateUtil';\nimport { useInjectRange } from '../../RangeContext';\nimport PanelBody from '../PanelBody';\nimport useMergeProps from '../../hooks/useMergeProps';\nexport var YEAR_COL_COUNT = 3;\nvar YEAR_ROW_COUNT = 4;\nfunction YearBody(_props) {\n  var props = useMergeProps(_props);\n  var prefixCls = props.prefixCls,\n    value = props.value,\n    viewDate = props.viewDate,\n    locale = props.locale,\n    generateConfig = props.generateConfig;\n  var _useInjectRange = useInjectRange(),\n    rangedValue = _useInjectRange.rangedValue,\n    hoverRangedValue = _useInjectRange.hoverRangedValue;\n  var yearPrefixCls = \"\".concat(prefixCls, \"-cell\");\n  // =============================== Year ===============================\n  var yearNumber = generateConfig.getYear(viewDate);\n  var startYear = Math.floor(yearNumber / YEAR_DECADE_COUNT) * YEAR_DECADE_COUNT;\n  var endYear = startYear + YEAR_DECADE_COUNT - 1;\n  var baseYear = generateConfig.setYear(viewDate, startYear - Math.ceil((YEAR_COL_COUNT * YEAR_ROW_COUNT - YEAR_DECADE_COUNT) / 2));\n  var isInView = function isInView(date) {\n    var currentYearNumber = generateConfig.getYear(date);\n    return startYear <= currentYearNumber && currentYearNumber <= endYear;\n  };\n  var getCellClassName = useCellClassName({\n    cellPrefixCls: yearPrefixCls,\n    value: value,\n    generateConfig: generateConfig,\n    rangedValue: rangedValue.value,\n    hoverRangedValue: hoverRangedValue.value,\n    isSameCell: function isSameCell(current, target) {\n      return isSameYear(generateConfig, current, target);\n    },\n    isInView: isInView,\n    offsetCell: function offsetCell(date, offset) {\n      return generateConfig.addYear(date, offset);\n    }\n  });\n  return _createVNode(PanelBody, _objectSpread(_objectSpread({}, props), {}, {\n    \"rowNum\": YEAR_ROW_COUNT,\n    \"colNum\": YEAR_COL_COUNT,\n    \"baseDate\": baseYear,\n    \"getCellText\": generateConfig.getYear,\n    \"getCellClassName\": getCellClassName,\n    \"getCellDate\": generateConfig.addYear,\n    \"titleCell\": function titleCell(date) {\n      return formatValue(date, {\n        locale: locale,\n        format: 'YYYY',\n        generateConfig: generateConfig\n      });\n    }\n  }), null);\n}\nYearBody.displayName = 'YearBody';\nYearBody.inheritAttrs = false;\nexport default YearBody;","map":{"version":3,"names":["_objectSpread","createVNode","_createVNode","YEAR_DECADE_COUNT","useCellClassName","formatValue","isSameYear","useInjectRange","PanelBody","useMergeProps","YEAR_COL_COUNT","YEAR_ROW_COUNT","YearBody","_props","props","prefixCls","value","viewDate","locale","generateConfig","_useInjectRange","rangedValue","hoverRangedValue","yearPrefixCls","concat","yearNumber","getYear","startYear","Math","floor","endYear","baseYear","setYear","ceil","isInView","date","currentYearNumber","getCellClassName","cellPrefixCls","isSameCell","current","target","offsetCell","offset","addYear","titleCell","format","displayName","inheritAttrs"],"sources":["C:/Users/zhouy/WebstormProjects/lingo/node_modules/ant-design-vue/es/vc-picker/panels/YearPanel/YearBody.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { createVNode as _createVNode } from \"vue\";\nimport { YEAR_DECADE_COUNT } from '.';\nimport useCellClassName from '../../hooks/useCellClassName';\nimport { formatValue, isSameYear } from '../../utils/dateUtil';\nimport { useInjectRange } from '../../RangeContext';\nimport PanelBody from '../PanelBody';\nimport useMergeProps from '../../hooks/useMergeProps';\nexport const YEAR_COL_COUNT = 3;\nconst YEAR_ROW_COUNT = 4;\nfunction YearBody(_props) {\n  const props = useMergeProps(_props);\n  const {\n    prefixCls,\n    value,\n    viewDate,\n    locale,\n    generateConfig\n  } = props;\n  const {\n    rangedValue,\n    hoverRangedValue\n  } = useInjectRange();\n  const yearPrefixCls = `${prefixCls}-cell`;\n  // =============================== Year ===============================\n  const yearNumber = generateConfig.getYear(viewDate);\n  const startYear = Math.floor(yearNumber / YEAR_DECADE_COUNT) * YEAR_DECADE_COUNT;\n  const endYear = startYear + YEAR_DECADE_COUNT - 1;\n  const baseYear = generateConfig.setYear(viewDate, startYear - Math.ceil((YEAR_COL_COUNT * YEAR_ROW_COUNT - YEAR_DECADE_COUNT) / 2));\n  const isInView = date => {\n    const currentYearNumber = generateConfig.getYear(date);\n    return startYear <= currentYearNumber && currentYearNumber <= endYear;\n  };\n  const getCellClassName = useCellClassName({\n    cellPrefixCls: yearPrefixCls,\n    value,\n    generateConfig,\n    rangedValue: rangedValue.value,\n    hoverRangedValue: hoverRangedValue.value,\n    isSameCell: (current, target) => isSameYear(generateConfig, current, target),\n    isInView,\n    offsetCell: (date, offset) => generateConfig.addYear(date, offset)\n  });\n  return _createVNode(PanelBody, _objectSpread(_objectSpread({}, props), {}, {\n    \"rowNum\": YEAR_ROW_COUNT,\n    \"colNum\": YEAR_COL_COUNT,\n    \"baseDate\": baseYear,\n    \"getCellText\": generateConfig.getYear,\n    \"getCellClassName\": getCellClassName,\n    \"getCellDate\": generateConfig.addYear,\n    \"titleCell\": date => formatValue(date, {\n      locale,\n      format: 'YYYY',\n      generateConfig\n    })\n  }), null);\n}\nYearBody.displayName = 'YearBody';\nYearBody.inheritAttrs = false;\nexport default YearBody;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}