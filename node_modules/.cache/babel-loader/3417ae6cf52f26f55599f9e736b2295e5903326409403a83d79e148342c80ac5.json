{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport { MessageOutlined } from '@ant-design/icons-vue';\nimport axios from \"@/axios\";\n// import request from \"@/utils/request\";\n// let socket;\nexport default {\n  components: {\n    MessageOutlined: MessageOutlined\n  },\n  name: \"Im\",\n  data: function data() {\n    return {\n      circleUrl: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\n      user: {},\n      isCollapse: false,\n      users: [],\n      chatUser: '',\n      text: \"\",\n      messages: [],\n      content: ''\n    };\n  },\n  computed: {\n    isTextEmpty: function isTextEmpty() {\n      return this.text.length === 0; // 判断文本是否为空\n    }\n  },\n  created: function created() {\n    this.init();\n  },\n  methods: {\n    onck: function onck() {\n      console.log('onck');\n    },\n    send: function send() {\n      if (typeof WebSocket == \"undefined\") {\n        console.log(\"您的浏览器不支持WebSocket\");\n      } else {\n        console.log(\"您的浏览器支持WebSocket\");\n        // 组装待发送的消息 json\n        // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n        var message = {\n          from: this.user.username,\n          to: this.chatUser,\n          text: this.text\n        };\n        axios.post('/login', message, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': localStorage.getItem('token')\n          }\n        }).then(function (res) {\n          // console.log(res)\n          if (res.data.status === 100) {\n            //vreate message\n          } else {\n            //create error message\n            // this.$message.error('登录失败')\n          }\n        })[\"catch\"](function (err) {\n          console.log(err);\n        });\n        // socket.send(JSON.stringify(message));  // 将组装好的json发送给服务端，由服务端进行转发\n        this.messages.push({\n          user: this.user.username,\n          text: this.text\n        });\n        // 构建消息内容，本人消息\n        this.createContent(null, this.user.username, this.text);\n        this.text = '';\n      }\n    },\n    createContent: function createContent(remoteUser, nowUser, text) {\n      // 这个方法是用来将 json的聊天消息数据转换成 html的。\n      var html;\n      // 当前用户消息\n      if (nowUser) {\n        // nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡\n        html = \"<div class=\\\"a-row\\\" style=\\\"padding: 5px 0\\\">\\n\" + \"  <div class=\\\"a-col a-col-22\\\" style=\\\"text-align: right; padding-right: 10px\\\">\\n\" + \"    <div class=\\\"tip left\\\">\" + text + \"</div>\\n\" + \"  </div>\\n\" + \"  <div class=\\\"a-col a-col-2\\\">\\n\" + \"  <span class=\\\"a-avatar a-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" + \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" + \"  </span>\\n\" + \"  </div>\\n\" + \"</div>\";\n      } else if (remoteUser) {\n        // remoteUser表示远程用户聊天消息，蓝色的气泡\n        html = \"<div class=\\\"a-row\\\" style=\\\"padding: 5px 0\\\">\\n\" + \"  <div class=\\\"a-col a-col-2\\\" style=\\\"text-align: right\\\">\\n\" + \"  <span class=\\\"a-avatar a-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" + \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" + \"  </span>\\n\" + \"  </div>\\n\" + \"  <div class=\\\"a-col a-col-22\\\" style=\\\"text-align: left; padding-left: 10px\\\">\\n\" + \"    <div class=\\\"tip right\\\">\" + text + \"</div>\\n\" + \"  </div>\\n\" + \"</div>\";\n      }\n      console.log(html);\n      this.content += html;\n    },\n    init: function init() {\n      this.user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {};\n      var username = this.user.username;\n      var _this = this;\n      if (typeof WebSocket == \"undefined\") {\n        console.log(\"您的浏览器不支持WebSocket\");\n      } else {\n        console.log(\"您的浏览器支持WebSocket\");\n        var socketUrl = \"ws://localhost:9090/imserver/\" + username;\n        // if (socket != null) {\n        //   socket.close();\n        //   socket = null;\n        // }\n        // 开启一个websocket服务\n        // socket = new WebSocket(socketUrl);\n        //打开事件\n        // socket.onopen = function () {\n        //   console.log(\"websocket已打开\");\n        // };\n        //  浏览器端收消息，获得从服务端发送过来的文本消息\n        // socket.onmessage = function (msg) {\n        //   console.log(\"收到数据====\" + msg.data)\n        //   let data = JSON.parse(msg.data)  // 对收到的json数据进行解析， 类似这样的： {\"users\": [{\"username\": \"zhang\"},{ \"username\": \"admin\"}]}\n        //   if (data.users) {  // 获取在线人员信息\n        //     _this.users = data.users.filter(user => user.username !== username)  // 获取当前连接的所有用户信息，并且排除自身，自己不会出现在自己的聊天列表里\n        //   } else {\n        //     // 如果服务器端发送过来的json数据 不包含 users 这个key，那么发送过来的就是聊天文本json数据\n        //     //  // {\"from\": \"zhang\", \"text\": \"hello\"}\n        //     if (data.from === _this.chatUser) {\n        //       _this.messages.push(data)\n        //       // 构建消息内容\n        //       _this.createContent(data.from, null, data.text)\n        //     }\n        //   }\n        // };\n        //关闭事件\n        // socket.onclose = function () {\n        //   console.log(\"websocket已关闭\");\n        // };\n        // //发生了错误事件\n        // socket.onerror = function () {\n        //   console.log(\"websocket发生了错误\");\n        // }\n      }\n    }\n  }\n};","map":{"version":3,"names":["MessageOutlined","axios","components","name","data","circleUrl","user","isCollapse","users","chatUser","text","messages","content","computed","isTextEmpty","length","created","init","methods","onck","console","log","send","WebSocket","message","from","username","to","post","headers","localStorage","getItem","then","res","status","err","push","createContent","remoteUser","nowUser","html","JSON","parse","_this","socketUrl"],"sources":["C:\\Users\\zhouy\\WebstormProjects\\lingo\\src\\view\\chat.vue"],"sourcesContent":["<template>\r\n  <div  style=\"padding: 10px; margin-bottom: 50px\">\r\n    <a-row >\r\n      <a-col class=\"chat-col\" :span=\"16\">\r\n        <div class=\"chat-box\">\r\n          <div class=\"chat-title\">\r\n            Web聊天室（{{ chatUser }}）\r\n          </div>\r\n          <div class=\"chat-content\" v-html=\"content\"></div>\r\n          <div class=\"chat-input\">\r\n            <a-input-group >\r\n              <a-input class=\"chat-a-input\" v-model:value=\"text\" size=\"small\">\r\n                <template #suffix>\r\n                  <message-outlined :style=\"{fontSize: '20px', color: isTextEmpty ? '#808080' : '#000000'}\" @click=\"isTextEmpty ? null : onck\" />                </template>\r\n              </a-input>\r\n            </a-input-group>\r\n          </div>\r\n\r\n        </div>\r\n      </a-col>\r\n    </a-row>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { MessageOutlined  } from '@ant-design/icons-vue';\r\nimport axios from \"@/axios\";\r\n// import request from \"@/utils/request\";\r\n// let socket;\r\nexport default {\r\n  components: {\r\n    MessageOutlined\r\n  },\r\n  name: \"Im\",\r\n\r\n  data() {\r\n    return {\r\n      circleUrl: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\r\n      user: {},\r\n      isCollapse: false,\r\n      users: [],\r\n      chatUser: '',\r\n      text: \"\",\r\n      messages: [],\r\n      content: ''\r\n    }\r\n  },\r\n  computed: {\r\n    isTextEmpty() {\r\n      return this.text.length === 0; // 判断文本是否为空\r\n    }\r\n  },\r\n  created() {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    onck() {\r\n      console.log('onck')\r\n    },\r\n    send() {\r\n      if (typeof (WebSocket) == \"undefined\") {\r\n        console.log(\"您的浏览器不支持WebSocket\");\r\n      } else {\r\n        console.log(\"您的浏览器支持WebSocket\");\r\n        // 组装待发送的消息 json\r\n        // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\r\n        let message = {from: this.user.username, to: this.chatUser, text: this.text}\r\n        axios.post('/login',message,{\r\n          headers:{\r\n            'Content-Type':'application/json',\r\n            'Authorization':localStorage.getItem('token')\r\n          }\r\n        }).then(res=>{\r\n          // console.log(res)\r\n          if(res.data.status === 100){\r\n            //vreate message\r\n          }else{\r\n            //create error message\r\n            // this.$message.error('登录失败')\r\n          }\r\n        }).catch(err=>{\r\n          console.log(err)\r\n        })\r\n        // socket.send(JSON.stringify(message));  // 将组装好的json发送给服务端，由服务端进行转发\r\n        this.messages.push({user: this.user.username, text: this.text})\r\n        // 构建消息内容，本人消息\r\n        this.createContent(null, this.user.username, this.text)\r\n        this.text = '';\r\n      }\r\n    },\r\n    createContent(remoteUser, nowUser, text) {  // 这个方法是用来将 json的聊天消息数据转换成 html的。\r\n      let html\r\n      // 当前用户消息\r\n      if (nowUser) { // nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡\r\n        html = \"<div class=\\\"a-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\r\n            \"  <div class=\\\"a-col a-col-22\\\" style=\\\"text-align: right; padding-right: 10px\\\">\\n\" +\r\n            \"    <div class=\\\"tip left\\\">\" + text + \"</div>\\n\" +\r\n            \"  </div>\\n\" +\r\n            \"  <div class=\\\"a-col a-col-2\\\">\\n\" +\r\n            \"  <span class=\\\"a-avatar a-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\r\n            \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\r\n            \"  </span>\\n\" +\r\n            \"  </div>\\n\" +\r\n            \"</div>\";\r\n      } else if (remoteUser) {   // remoteUser表示远程用户聊天消息，蓝色的气泡\r\n        html = \"<div class=\\\"a-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\r\n            \"  <div class=\\\"a-col a-col-2\\\" style=\\\"text-align: right\\\">\\n\" +\r\n            \"  <span class=\\\"a-avatar a-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\r\n            \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\r\n            \"  </span>\\n\" +\r\n            \"  </div>\\n\" +\r\n            \"  <div class=\\\"a-col a-col-22\\\" style=\\\"text-align: left; padding-left: 10px\\\">\\n\" +\r\n            \"    <div class=\\\"tip right\\\">\" + text + \"</div>\\n\" +\r\n            \"  </div>\\n\" +\r\n            \"</div>\";\r\n      }\r\n      console.log(html)\r\n      this.content += html;\r\n    },\r\n    init() {\r\n      this.user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {}\r\n      let username = this.user.username;\r\n      let _this = this;\r\n      if (typeof (WebSocket) == \"undefined\") {\r\n        console.log(\"您的浏览器不支持WebSocket\");\r\n      } else {\r\n        console.log(\"您的浏览器支持WebSocket\");\r\n        let socketUrl = \"ws://localhost:9090/imserver/\" + username;\r\n        // if (socket != null) {\r\n        //   socket.close();\r\n        //   socket = null;\r\n        // }\r\n        // 开启一个websocket服务\r\n        // socket = new WebSocket(socketUrl);\r\n        //打开事件\r\n        // socket.onopen = function () {\r\n        //   console.log(\"websocket已打开\");\r\n        // };\r\n        //  浏览器端收消息，获得从服务端发送过来的文本消息\r\n        // socket.onmessage = function (msg) {\r\n        //   console.log(\"收到数据====\" + msg.data)\r\n        //   let data = JSON.parse(msg.data)  // 对收到的json数据进行解析， 类似这样的： {\"users\": [{\"username\": \"zhang\"},{ \"username\": \"admin\"}]}\r\n        //   if (data.users) {  // 获取在线人员信息\r\n        //     _this.users = data.users.filter(user => user.username !== username)  // 获取当前连接的所有用户信息，并且排除自身，自己不会出现在自己的聊天列表里\r\n        //   } else {\r\n        //     // 如果服务器端发送过来的json数据 不包含 users 这个key，那么发送过来的就是聊天文本json数据\r\n        //     //  // {\"from\": \"zhang\", \"text\": \"hello\"}\r\n        //     if (data.from === _this.chatUser) {\r\n        //       _this.messages.push(data)\r\n        //       // 构建消息内容\r\n        //       _this.createContent(data.from, null, data.text)\r\n        //     }\r\n        //   }\r\n        // };\r\n        //关闭事件\r\n        // socket.onclose = function () {\r\n        //   console.log(\"websocket已关闭\");\r\n        // };\r\n        // //发生了错误事件\r\n        // socket.onerror = function () {\r\n        //   console.log(\"websocket发生了错误\");\r\n        // }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style>\r\n@import \"../scss/pages/_chat.scss\";\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}